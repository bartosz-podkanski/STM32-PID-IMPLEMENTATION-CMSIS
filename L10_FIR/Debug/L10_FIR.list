
L10_FIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08009eb0  08009eb0  00019eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b8  0800a1b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1c0  0800a1c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e8  0800a3b0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800a3b0  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a47  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fef  00000000  00000000  00036c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00039c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003b010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025d59  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011592  00000000  00000000  00061f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f073d  00000000  00000000  00073513  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c70  00000000  00000000  00163ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e98 	.word	0x08009e98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009e98 	.word	0x08009e98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fb8:	eeb1 7a67 	vneg.f32	s14, s15
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 fe7a 	bl	8007ce0 <memset>
  }

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f94b 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f806 	bl	8001010 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f006 fad6 	bl	80075b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f965 	bl	80012fe <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f92d 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000014 	.word	0x20000014
 8001068:	20000004 	.word	0x20000004
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000004 	.word	0x20000004
 8001094:	20000230 	.word	0x20000230

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000230 	.word	0x20000230

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_Delay+0x40>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000004 	.word	0x20000004

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0000 	.word	0x05fa0000

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff3e 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff31 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d004      	beq.n	8001334 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e00c      	b.n	800134e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2205      	movs	r2, #5
 8001338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e175      	b.n	8001668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8164 	bne.w	8001662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x4e>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	69b9      	ldr	r1, [r7, #24]
 80013ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0203 	and.w	r2, r3, #3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00b      	beq.n	8001446 <HAL_GPIO_Init+0xea>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143a:	2b11      	cmp	r3, #17
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b12      	cmp	r3, #18
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80be 	beq.w	8001662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_GPIO_Init+0x320>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <HAL_GPIO_Init+0x320>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_GPIO_Init+0x320>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014fe:	4a60      	ldr	r2, [pc, #384]	; (8001680 <HAL_GPIO_Init+0x324>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_Init+0x328>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d037      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x32c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d031      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x330>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x334>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x338>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x33c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x340>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x344>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_GPIO_Init+0x34c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x21a>
 8001572:	2309      	movs	r3, #9
 8001574:	e012      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001576:	230a      	movs	r3, #10
 8001578:	e010      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157a:	2308      	movs	r3, #8
 800157c:	e00e      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157e:	2307      	movs	r3, #7
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001582:	2306      	movs	r3, #6
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x240>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015ac:	4934      	ldr	r1, [pc, #208]	; (8001680 <HAL_GPIO_Init+0x324>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015de:	4a33      	ldr	r2, [pc, #204]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_GPIO_Init+0x350>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_GPIO_Init+0x350>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_GPIO_Init+0x350>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae86 	bls.w	800137c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	; 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021c00 	.word	0x40021c00
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40022400 	.word	0x40022400
 80016ac:	40013c00 	.word	0x40013c00

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016cc:	e003      	b.n	80016d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	619a      	str	r2, [r3, #24]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	401a      	ands	r2, r3
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d104      	bne.n	8001706 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001704:	e002      	b.n	800170c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fe86 	bl	8007448 <HAL_GPIO_EXTI_Callback>
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f005 f93a 	bl	80069e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001798:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e006      	b.n	80017d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d104      	bne.n	80017e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_I2C_Init+0x11c>)
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	ea42 0103 	orr.w	r1, r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	021a      	lsls	r2, r3, #8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69d9      	ldr	r1, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	02008000 	.word	0x02008000

08001868 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	461a      	mov	r2, r3
 8001874:	460b      	mov	r3, r1
 8001876:	817b      	strh	r3, [r7, #10]
 8001878:	4613      	mov	r3, r2
 800187a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b20      	cmp	r3, #32
 8001886:	f040 80da 	bne.w	8001a3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x30>
 8001894:	2302      	movs	r3, #2
 8001896:	e0d3      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a0:	f7ff fbfa 	bl	8001098 <HAL_GetTick>
 80018a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2319      	movs	r3, #25
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f8f0 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0be      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2221      	movs	r2, #33	; 0x21
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2210      	movs	r2, #16
 80018ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	893a      	ldrh	r2, [r7, #8]
 80018e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2bff      	cmp	r3, #255	; 0xff
 80018f2:	d90e      	bls.n	8001912 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	8979      	ldrh	r1, [r7, #10]
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_I2C_Master_Transmit+0x1e0>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f9e6 	bl	8001cdc <I2C_TransferConfig>
 8001910:	e06c      	b.n	80019ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	b2da      	uxtb	r2, r3
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_I2C_Master_Transmit+0x1e0>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f9d5 	bl	8001cdc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001932:	e05b      	b.n	80019ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f8ed 	bl	8001b18 <I2C_WaitOnTXISFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e07b      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d034      	beq.n	80019ec <HAL_I2C_Master_Transmit+0x184>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	d130      	bne.n	80019ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f87f 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e04d      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	d90e      	bls.n	80019cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	8979      	ldrh	r1, [r7, #10]
 80019bc:	2300      	movs	r3, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f989 	bl	8001cdc <I2C_TransferConfig>
 80019ca:	e00f      	b.n	80019ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	8979      	ldrh	r1, [r7, #10]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f978 	bl	8001cdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d19e      	bne.n	8001934 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f8cc 	bl	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e01a      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_I2C_Master_Transmit+0x1e4>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
  }
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	80002000 	.word	0x80002000
 8001a4c:	fe00e800 	.word	0xfe00e800

08001a50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d103      	bne.n	8001a6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d007      	beq.n	8001a8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	619a      	str	r2, [r3, #24]
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa8:	e022      	b.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d01e      	beq.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff faf1 	bl	8001098 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e00f      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4013      	ands	r3, r2
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d0cd      	beq.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b24:	e02c      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f870 	bl	8001c10 <I2C_IsAcknowledgeFailed>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e02a      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d01e      	beq.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff faa9 	bl	8001098 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d113      	bne.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e007      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d1cb      	bne.n	8001b26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba4:	e028      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f830 	bl	8001c10 <I2C_IsAcknowledgeFailed>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e026      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bba:	f7ff fa6d 	bl	8001098 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d302      	bcc.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d113      	bne.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e007      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d1cf      	bne.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d151      	bne.n	8001cce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2a:	e022      	b.n	8001c72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d01e      	beq.n	8001c72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c34:	f7ff fa30 	bl	8001098 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d302      	bcc.n	8001c4a <I2C_IsAcknowledgeFailed+0x3a>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e02e      	b.n	8001cd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d1d5      	bne.n	8001c2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2210      	movs	r2, #16
 8001c86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff fedd 	bl	8001a50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f043 0204 	orr.w	r2, r3, #4
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	fe00e800 	.word	0xfe00e800

08001cdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	817b      	strh	r3, [r7, #10]
 8001cea:	4613      	mov	r3, r2
 8001cec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	0d5b      	lsrs	r3, r3, #21
 8001cf8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <I2C_TransferConfig+0x58>)
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	43db      	mvns	r3, r3
 8001d02:	ea02 0103 	and.w	r1, r2, r3
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d0c:	7a7b      	ldrb	r3, [r7, #9]
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	03ff63ff 	.word	0x03ff63ff

08001d38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d138      	bne.n	8001dc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e032      	b.n	8001dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d139      	bne.n	8001e58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e033      	b.n	8001e5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2224      	movs	r2, #36	; 0x24
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40007000 	.word	0x40007000

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e25c      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8087 	beq.w	8001fba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eac:	4b96      	ldr	r3, [pc, #600]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb8:	4b93      	ldr	r3, [pc, #588]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d112      	bne.n	8001eea <HAL_RCC_OscConfig+0x62>
 8001ec4:	4b90      	ldr	r3, [pc, #576]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed0:	d10b      	bne.n	8001eea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed2:	4b8d      	ldr	r3, [pc, #564]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d06c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x130>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d168      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e236      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x7a>
 8001ef4:	4b84      	ldr	r3, [pc, #528]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a83      	ldr	r2, [pc, #524]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	e02e      	b.n	8001f60 <HAL_RCC_OscConfig+0xd8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x9c>
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7e      	ldr	r2, [pc, #504]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b7c      	ldr	r3, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7b      	ldr	r2, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xd8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f2e:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a75      	ldr	r2, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a72      	ldr	r2, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xd8>
 8001f48:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6b      	ldr	r2, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f896 	bl	8001098 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f892 	bl	8001098 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1ea      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f882 	bl	8001098 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f87e 	bl	8001098 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1d6      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b57      	ldr	r3, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x110>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d069      	beq.n	800209a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11c      	bne.n	8002018 <HAL_RCC_OscConfig+0x190>
 8001fde:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x17a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1aa      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	493d      	ldr	r1, [pc, #244]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e040      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a38      	ldr	r2, [pc, #224]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f834 	bl	8001098 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff f830 	bl	8001098 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e188      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4929      	ldr	r1, [pc, #164]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
 8002066:	e018      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7ff f810 	bl	8001098 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7ff f80c 	bl	8001098 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e164      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d038      	beq.n	8002118 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d019      	beq.n	80020e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7fe ffed 	bl	8001098 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c2:	f7fe ffe9 	bl	8001098 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e141      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x23a>
 80020e0:	e01a      	b.n	8002118 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ee:	f7fe ffd3 	bl	8001098 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f6:	f7fe ffcf 	bl	8001098 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d903      	bls.n	800210c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e127      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
 8002108:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b94      	ldr	r3, [pc, #592]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ee      	bne.n	80020f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a4 	beq.w	800226e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10d      	bne.n	800214e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a8a      	ldr	r2, [pc, #552]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800215a:	4b82      	ldr	r3, [pc, #520]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a81      	ldr	r2, [pc, #516]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7fe ff97 	bl	8001098 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7fe ff93 	bl	8001098 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	; 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0eb      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002180:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x4dc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x31a>
 8002194:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	e02d      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x33c>
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a6c      	ldr	r2, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a69      	ldr	r2, [pc, #420]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e01c      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x35e>
 80021cc:	4b64      	ldr	r3, [pc, #400]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a63      	ldr	r2, [pc, #396]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a60      	ldr	r2, [pc, #384]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	e00b      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
 80021e6:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a5d      	ldr	r2, [pc, #372]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7fe ff47 	bl	8001098 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe ff43 	bl	8001098 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e099      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ee      	beq.n	800220e <HAL_RCC_OscConfig+0x386>
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe ff31 	bl	8001098 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe ff2d 	bl	8001098 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e083      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ee      	bne.n	800223a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06f      	beq.n	8002356 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d067      	beq.n	8002352 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d149      	bne.n	800231e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a34      	ldr	r2, [pc, #208]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7fe feff 	bl	8001098 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fefb 	bl	8001098 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e053      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	019b      	lsls	r3, r3, #6
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	4313      	orrs	r3, r2
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80022e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022e8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 80022f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fecf 	bl	8001098 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fecb 	bl	8001098 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e023      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x476>
 800231c:	e01b      	b.n	8002356 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe feb5 	bl	8001098 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe feb1 	bl	8001098 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x4d8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x4aa>
 8002350:	e001      	b.n	8002356 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0ce      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d910      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b66      	ldr	r3, [pc, #408]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	4964      	ldr	r1, [pc, #400]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b6      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b52      	ldr	r3, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a51      	ldr	r2, [pc, #324]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494c      	ldr	r1, [pc, #304]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d040      	beq.n	800248c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07d      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e071      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e069      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4935      	ldr	r1, [pc, #212]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fe1c 	bl	8001098 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe fe18 	bl	8001098 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e051      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d210      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 020f 	bic.w	r2, r3, #15
 80024a2:	4921      	ldr	r1, [pc, #132]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e030      	b.n	800251e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4915      	ldr	r1, [pc, #84]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490d      	ldr	r1, [pc, #52]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f81d 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	fa21 f303 	lsr.w	r3, r1, r3
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <HAL_RCC_ClockConfig+0x1cc>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fd7a 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08009f44 	.word	0x08009f44
 8002534:	20000014 	.word	0x20000014

08002538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d007      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x32>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d008      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x38>
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80b4 	bne.w	80026cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002566:	60bb      	str	r3, [r7, #8]
       break;
 8002568:	e0b3      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b5e      	ldr	r3, [pc, #376]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800256c:	60bb      	str	r3, [r7, #8]
      break;
 800256e:	e0b0      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800257a:	4b58      	ldr	r3, [pc, #352]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04a      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	f04f 0400 	mov.w	r4, #0
 8002590:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	ea03 0501 	and.w	r5, r3, r1
 800259c:	ea04 0602 	and.w	r6, r4, r2
 80025a0:	4629      	mov	r1, r5
 80025a2:	4632      	mov	r2, r6
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	0154      	lsls	r4, r2, #5
 80025ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025b2:	014b      	lsls	r3, r1, #5
 80025b4:	4619      	mov	r1, r3
 80025b6:	4622      	mov	r2, r4
 80025b8:	1b49      	subs	r1, r1, r5
 80025ba:	eb62 0206 	sbc.w	r2, r2, r6
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	f04f 0400 	mov.w	r4, #0
 80025c6:	0194      	lsls	r4, r2, #6
 80025c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025cc:	018b      	lsls	r3, r1, #6
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	eb64 0402 	sbc.w	r4, r4, r2
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	00e2      	lsls	r2, r4, #3
 80025de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025e2:	00d9      	lsls	r1, r3, #3
 80025e4:	460b      	mov	r3, r1
 80025e6:	4614      	mov	r4, r2
 80025e8:	195b      	adds	r3, r3, r5
 80025ea:	eb44 0406 	adc.w	r4, r4, r6
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	0262      	lsls	r2, r4, #9
 80025f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025fc:	0259      	lsls	r1, r3, #9
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	f7fe fb3a 	bl	8000c88 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e049      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	f240 11ff 	movw	r1, #511	; 0x1ff
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	ea03 0501 	and.w	r5, r3, r1
 8002632:	ea04 0602 	and.w	r6, r4, r2
 8002636:	4629      	mov	r1, r5
 8002638:	4632      	mov	r2, r6
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	0154      	lsls	r4, r2, #5
 8002644:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002648:	014b      	lsls	r3, r1, #5
 800264a:	4619      	mov	r1, r3
 800264c:	4622      	mov	r2, r4
 800264e:	1b49      	subs	r1, r1, r5
 8002650:	eb62 0206 	sbc.w	r2, r2, r6
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	0194      	lsls	r4, r2, #6
 800265e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	1a5b      	subs	r3, r3, r1
 8002666:	eb64 0402 	sbc.w	r4, r4, r2
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	00e2      	lsls	r2, r4, #3
 8002674:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002678:	00d9      	lsls	r1, r3, #3
 800267a:	460b      	mov	r3, r1
 800267c:	4614      	mov	r4, r2
 800267e:	195b      	adds	r3, r3, r5
 8002680:	eb44 0406 	adc.w	r4, r4, r6
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	02a2      	lsls	r2, r4, #10
 800268e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002692:	0299      	lsls	r1, r3, #10
 8002694:	460b      	mov	r3, r1
 8002696:	4614      	mov	r4, r2
 8002698:	4618      	mov	r0, r3
 800269a:	4621      	mov	r1, r4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f04f 0400 	mov.w	r4, #0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4623      	mov	r3, r4
 80026a6:	f7fe faef 	bl	8000c88 <__aeabi_uldivmod>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	60bb      	str	r3, [r7, #8]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026ce:	60bb      	str	r3, [r7, #8]
      break;
 80026d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d2:	68bb      	ldr	r3, [r7, #8]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200

080026e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000014 	.word	0x20000014

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff0 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002708:	4601      	mov	r1, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4a03      	ldr	r2, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08009f54 	.word	0x08009f54

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800272c:	f7ff ffdc 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002730:	4601      	mov	r1, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0b5b      	lsrs	r3, r3, #13
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	08009f54 	.word	0x08009f54

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002778:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a68      	ldr	r2, [pc, #416]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002782:	6093      	str	r3, [r2, #8]
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	4964      	ldr	r1, [pc, #400]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800279a:	2301      	movs	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d017      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	4959      	ldr	r1, [pc, #356]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c8:	d101      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d017      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027e6:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	494a      	ldr	r1, [pc, #296]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 808b 	beq.w	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4a39      	ldr	r2, [pc, #228]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	; 0x40
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a34      	ldr	r2, [pc, #208]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fc1e 	bl	8001098 <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fc1a 	bl	8001098 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e355      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800287e:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d035      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d02e      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028be:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d114      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fbe2 	bl	8001098 <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7fe fbde 	bl	8001098 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e317      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002906:	d111      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002916:	400b      	ands	r3, r1
 8002918:	4901      	ldr	r1, [pc, #4]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
 800291e:	e00b      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002920:	40023800 	.word	0x40023800
 8002924:	40007000 	.word	0x40007000
 8002928:	0ffffcff 	.word	0x0ffffcff
 800292c:	4bb0      	ldr	r3, [pc, #704]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4aaf      	ldr	r2, [pc, #700]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002932:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002936:	6093      	str	r3, [r2, #8]
 8002938:	4bad      	ldr	r3, [pc, #692]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800293a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002944:	49aa      	ldr	r1, [pc, #680]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002956:	4ba6      	ldr	r3, [pc, #664]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295c:	4aa4      	ldr	r2, [pc, #656]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800295e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002962:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002966:	4ba2      	ldr	r3, [pc, #648]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002968:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	499f      	ldr	r1, [pc, #636]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002984:	4b9a      	ldr	r3, [pc, #616]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002992:	4997      	ldr	r1, [pc, #604]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029a6:	4b92      	ldr	r3, [pc, #584]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b4:	498e      	ldr	r1, [pc, #568]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029c8:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d6:	4986      	ldr	r1, [pc, #536]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ea:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	497d      	ldr	r1, [pc, #500]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0c:	4b78      	ldr	r3, [pc, #480]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4975      	ldr	r1, [pc, #468]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a2e:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f023 020c 	bic.w	r2, r3, #12
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3c:	496c      	ldr	r1, [pc, #432]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a50:	4b67      	ldr	r3, [pc, #412]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4964      	ldr	r1, [pc, #400]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	495b      	ldr	r1, [pc, #364]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a94:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	4953      	ldr	r1, [pc, #332]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	494a      	ldr	r1, [pc, #296]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ad8:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	4942      	ldr	r1, [pc, #264]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002afa:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	4939      	ldr	r1, [pc, #228]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2a:	4931      	ldr	r1, [pc, #196]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d011      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4c:	4928      	ldr	r1, [pc, #160]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb0:	490f      	ldr	r1, [pc, #60]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc6:	f040 80d8 	bne.w	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd6:	f7fe fa5f 	bl	8001098 <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bde:	f7fe fa5b 	bl	8001098 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b64      	cmp	r3, #100	; 0x64
 8002bea:	d903      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e196      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002bf0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ee      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d021      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11d      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c22:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c28:	0e1b      	lsrs	r3, r3, #24
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	019a      	lsls	r2, r3, #6
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	071b      	lsls	r3, r3, #28
 8002c48:	4957      	ldr	r1, [pc, #348]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d02e      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d129      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c90:	0f1b      	lsrs	r3, r3, #28
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	019a      	lsls	r2, r3, #6
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	431a      	orrs	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	071b      	lsls	r3, r3, #28
 8002cb0:	493d      	ldr	r1, [pc, #244]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cbe:	f023 021f 	bic.w	r2, r3, #31
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01d      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce2:	0e1b      	lsrs	r3, r3, #24
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf0:	0f1b      	lsrs	r3, r3, #28
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	019a      	lsls	r2, r3, #6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	071b      	lsls	r3, r3, #28
 8002d10:	4925      	ldr	r1, [pc, #148]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d011      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	019a      	lsls	r2, r3, #6
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	071b      	lsls	r3, r3, #28
 8002d40:	4919      	ldr	r1, [pc, #100]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d54:	f7fe f9a0 	bl	8001098 <HAL_GetTick>
 8002d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d5c:	f7fe f99c 	bl	8001098 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0d7      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f040 80cd 	bne.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8e:	f7fe f983 	bl	8001098 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d96:	f7fe f97f 	bl	8001098 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d903      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0ba      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002da8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dac:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db8:	d0ed      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02e      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d12a      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	0f1b      	lsrs	r3, r3, #28
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	019a      	lsls	r2, r3, #6
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	4944      	ldr	r1, [pc, #272]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e1e:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	493d      	ldr	r1, [pc, #244]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d022      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4c:	d11d      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e4e:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	0e1b      	lsrs	r3, r3, #24
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	0f1b      	lsrs	r3, r3, #28
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	019a      	lsls	r2, r3, #6
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	061b      	lsls	r3, r3, #24
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	4929      	ldr	r1, [pc, #164]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	0e1b      	lsrs	r3, r3, #24
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	019a      	lsls	r2, r3, #6
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	4917      	ldr	r1, [pc, #92]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4911      	ldr	r1, [pc, #68]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fe f8d0 	bl	8001098 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002efc:	f7fe f8cc 	bl	8001098 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e007      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1a:	d1ef      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e084      	b.n	8003048 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d106      	bne.n	8002f5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f004 fae7 	bl	800752c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f7e:	d902      	bls.n	8002f86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e002      	b.n	8002f8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f94:	d007      	beq.n	8002fa6 <HAL_SPI_Init+0x7a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb6:	d903      	bls.n	8002fc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbe:	e002      	b.n	8002fc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	ea42 0103 	orr.w	r1, r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0204 	and.w	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	ea42 0103 	orr.w	r1, r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003036:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_SPI_Transmit+0x22>
 800306e:	2302      	movs	r3, #2
 8003070:	e150      	b.n	8003314 <HAL_SPI_Transmit+0x2c4>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307a:	f7fe f80d 	bl	8001098 <HAL_GetTick>
 800307e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003094:	e135      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_SPI_Transmit+0x52>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030a6:	e12c      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f2:	d107      	bne.n	8003104 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d007      	beq.n	8003122 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800312a:	d94b      	bls.n	80031c4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0xea>
 8003134:	8afb      	ldrh	r3, [r7, #22]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d13e      	bne.n	80031b8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	1c9a      	adds	r2, r3, #2
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800315e:	e02b      	b.n	80031b8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d112      	bne.n	8003194 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	1c9a      	adds	r2, r3, #2
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003192:	e011      	b.n	80031b8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003194:	f7fd ff80 	bl	8001098 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d803      	bhi.n	80031ac <HAL_SPI_Transmit+0x15c>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_Transmit+0x162>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031b6:	e0a4      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ce      	bne.n	8003160 <HAL_SPI_Transmit+0x110>
 80031c2:	e07c      	b.n	80032be <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Transmit+0x182>
 80031cc:	8afb      	ldrh	r3, [r7, #22]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d170      	bne.n	80032b4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d912      	bls.n	8003202 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b02      	subs	r3, #2
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003200:	e058      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003228:	e044      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d12b      	bne.n	8003290 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d912      	bls.n	8003268 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b02      	subs	r3, #2
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003266:	e025      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800328e:	e011      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003290:	f7fd ff02 	bl	8001098 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d803      	bhi.n	80032a8 <HAL_SPI_Transmit+0x258>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d102      	bne.n	80032ae <HAL_SPI_Transmit+0x25e>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032b2:	e026      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1b5      	bne.n	800322a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fb14 	bl	80038f0 <SPI_EndRxTxTransaction>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e000      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003312:	7ffb      	ldrb	r3, [r7, #31]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800332a:	2301      	movs	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_SPI_TransmitReceive+0x26>
 800333e:	2302      	movs	r3, #2
 8003340:	e1fb      	b.n	800373a <HAL_SPI_TransmitReceive+0x41e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800334a:	f7fd fea5 	bl	8001098 <HAL_GetTick>
 800334e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003356:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003366:	7efb      	ldrb	r3, [r7, #27]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d00e      	beq.n	800338a <HAL_SPI_TransmitReceive+0x6e>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003372:	d106      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x66>
 800337c:	7efb      	ldrb	r3, [r7, #27]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d003      	beq.n	800338a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003388:	e1cd      	b.n	8003726 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_SPI_TransmitReceive+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_TransmitReceive+0x80>
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033a2:	e1c0      	b.n	8003726 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d003      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2205      	movs	r2, #5
 80033b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033fa:	d802      	bhi.n	8003402 <HAL_SPI_TransmitReceive+0xe6>
 80033fc:	8a3b      	ldrh	r3, [r7, #16]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d908      	bls.n	8003414 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e007      	b.n	8003424 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d007      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800344a:	d97c      	bls.n	8003546 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_SPI_TransmitReceive+0x13e>
 8003454:	8a7b      	ldrh	r3, [r7, #18]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d169      	bne.n	800352e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800347e:	e056      	b.n	800352e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d11b      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x1aa>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x1aa>
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	2b01      	cmp	r3, #1
 800349c:	d113      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11c      	bne.n	800350e <HAL_SPI_TransmitReceive+0x1f2>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d016      	beq.n	800350e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800350a:	2301      	movs	r3, #1
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800350e:	f7fd fdc3 	bl	8001098 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351a:	429a      	cmp	r2, r3
 800351c:	d807      	bhi.n	800352e <HAL_SPI_TransmitReceive+0x212>
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d003      	beq.n	800352e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800352c:	e0fb      	b.n	8003726 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1a3      	bne.n	8003480 <HAL_SPI_TransmitReceive+0x164>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d19d      	bne.n	8003480 <HAL_SPI_TransmitReceive+0x164>
 8003544:	e0df      	b.n	8003706 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x23a>
 800354e:	8a7b      	ldrh	r3, [r7, #18]
 8003550:	2b01      	cmp	r3, #1
 8003552:	f040 80cb 	bne.w	80036ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d912      	bls.n	8003586 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b02      	subs	r3, #2
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003584:	e0b2      	b.n	80036ec <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ac:	e09e      	b.n	80036ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d134      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x30a>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02f      	beq.n	8003626 <HAL_SPI_TransmitReceive+0x30a>
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d12c      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d912      	bls.n	80035fc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b02      	subs	r3, #2
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035fa:	e012      	b.n	8003622 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d148      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x3aa>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d042      	beq.n	80036c6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d923      	bls.n	8003694 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	b292      	uxth	r2, r2
 8003658:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	1c9a      	adds	r2, r3, #2
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b02      	subs	r3, #2
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d81f      	bhi.n	80036c2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e016      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f103 020c 	add.w	r2, r3, #12
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036c2:	2301      	movs	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036c6:	f7fd fce7 	bl	8001098 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d803      	bhi.n	80036de <HAL_SPI_TransmitReceive+0x3c2>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d102      	bne.n	80036e4 <HAL_SPI_TransmitReceive+0x3c8>
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d103      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80036ea:	e01c      	b.n	8003726 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f47f af5b 	bne.w	80035ae <HAL_SPI_TransmitReceive+0x292>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af54 	bne.w	80035ae <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8f0 	bl	80038f0 <SPI_EndRxTxTransaction>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
 8003722:	e000      	b.n	8003726 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003724:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003736:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	e04c      	b.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d048      	beq.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800375c:	f7fd fc9c 	bl	8001098 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d902      	bls.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x30>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d13d      	bne.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378a:	d111      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d004      	beq.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d107      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d10f      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e00f      	b.n	800380e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	429a      	cmp	r2, r3
 800380a:	d1a3      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003824:	e057      	b.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800382c:	d106      	bne.n	800383c <SPI_WaitFifoStateUntilTimeout+0x26>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d048      	beq.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003844:	f7fd fc28 	bl	8001098 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d902      	bls.n	800385a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13d      	bne.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003872:	d111      	bne.n	8003898 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d004      	beq.n	8003888 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d107      	bne.n	8003898 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	d10f      	bne.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e008      	b.n	80038e8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d19f      	bne.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff ff84 	bl	8003816 <SPI_WaitFifoStateUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e027      	b.n	8003974 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff ff07 	bl	8003742 <SPI_WaitFlagStateUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e014      	b.n	8003974 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff ff5d 	bl	8003816 <SPI_WaitFifoStateUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e000      	b.n	8003974 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e01d      	b.n	80039ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f004 f852 	bl	8007a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f000 fc9a 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HAL_TIM_Base_Start_IT+0x50>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d00b      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x42>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d007      	beq.n	8003a16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	00010007 	.word	0x00010007

08003a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01d      	b.n	8003a76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f815 	bl	8003a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f000 fc44 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 ffbc 	bl	8004a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_TIM_PWM_Start+0x7c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_TIM_PWM_Start+0x2c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_TIM_PWM_Start+0x80>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_PWM_Start+0x30>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_TIM_PWM_Start+0x32>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_TIM_PWM_Start+0x84>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d00b      	beq.n	8003b04 <HAL_TIM_PWM_Start+0x70>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d007      	beq.n	8003b04 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400
 8003b18:	00010007 	.word	0x00010007

08003b1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e07b      	b.n	8003c28 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f003 ff1d 	bl	8007984 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_TIM_Encoder_Init+0x114>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f000 fbc1 	bl	80042f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_TIM_Encoder_Init+0x118>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_TIM_Encoder_Init+0x11c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_TIM_Encoder_Init+0x120>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	011a      	lsls	r2, r3, #4
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	031b      	lsls	r3, r3, #12
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fffebff8 	.word	0xfffebff8
 8003c34:	fffffcfc 	.word	0xfffffcfc
 8003c38:	fffff3f3 	.word	0xfffff3f3
 8003c3c:	ffff0f0f 	.word	0xffff0f0f

08003c40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_TIM_Encoder_Start+0x16>
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d008      	beq.n	8003c66 <HAL_TIM_Encoder_Start+0x26>
 8003c54:	e00f      	b.n	8003c76 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fee0 	bl	8004a24 <TIM_CCxChannelCmd>
      break;
 8003c64:	e016      	b.n	8003c94 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fed8 	bl	8004a24 <TIM_CCxChannelCmd>
      break;
 8003c74:	e00e      	b.n	8003c94 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fed0 	bl	8004a24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fec9 	bl	8004a24 <TIM_CCxChannelCmd>
      break;
 8003c92:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d122      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d11b      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0202 	mvn.w	r2, #2
 8003cda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fae1 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003cf6:	e005      	b.n	8003d04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fad3 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fae4 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d122      	bne.n	8003d5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d11b      	bne.n	8003d5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f06f 0204 	mvn.w	r2, #4
 8003d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fab7 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003d4a:	e005      	b.n	8003d58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 faa9 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 faba 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d122      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11b      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f06f 0208 	mvn.w	r2, #8
 8003d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa8d 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003d9e:	e005      	b.n	8003dac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa7f 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa90 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d122      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d11b      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f06f 0210 	mvn.w	r2, #16
 8003dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa63 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003df2:	e005      	b.n	8003e00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fa55 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa66 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10e      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0201 	mvn.w	r2, #1
 8003e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fa2f 	bl	8004290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b80      	cmp	r3, #128	; 0x80
 8003e3e:	d10e      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d107      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fe6f 	bl	8004b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fe62 	bl	8004b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa14 	bl	80042e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0220 	mvn.w	r2, #32
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fe22 	bl	8004b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e105      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b14      	cmp	r3, #20
 8003f1a:	f200 80f0 	bhi.w	80040fe <HAL_TIM_PWM_ConfigChannel+0x212>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	080040ff 	.word	0x080040ff
 8003f2c:	080040ff 	.word	0x080040ff
 8003f30:	080040ff 	.word	0x080040ff
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	080040ff 	.word	0x080040ff
 8003f3c:	080040ff 	.word	0x080040ff
 8003f40:	080040ff 	.word	0x080040ff
 8003f44:	08003ffb 	.word	0x08003ffb
 8003f48:	080040ff 	.word	0x080040ff
 8003f4c:	080040ff 	.word	0x080040ff
 8003f50:	080040ff 	.word	0x080040ff
 8003f54:	0800403b 	.word	0x0800403b
 8003f58:	080040ff 	.word	0x080040ff
 8003f5c:	080040ff 	.word	0x080040ff
 8003f60:	080040ff 	.word	0x080040ff
 8003f64:	0800407d 	.word	0x0800407d
 8003f68:	080040ff 	.word	0x080040ff
 8003f6c:	080040ff 	.word	0x080040ff
 8003f70:	080040ff 	.word	0x080040ff
 8003f74:	080040bd 	.word	0x080040bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fa58 	bl	8004434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0208 	orr.w	r2, r2, #8
 8003f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0204 	bic.w	r2, r2, #4
 8003fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6999      	ldr	r1, [r3, #24]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	619a      	str	r2, [r3, #24]
      break;
 8003fb6:	e0a3      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 faaa 	bl	8004518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	021a      	lsls	r2, r3, #8
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	619a      	str	r2, [r3, #24]
      break;
 8003ff8:	e082      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fb01 	bl	8004608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0208 	orr.w	r2, r2, #8
 8004014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0204 	bic.w	r2, r2, #4
 8004024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69d9      	ldr	r1, [r3, #28]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	61da      	str	r2, [r3, #28]
      break;
 8004038:	e062      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fb57 	bl	80046f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69d9      	ldr	r1, [r3, #28]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	021a      	lsls	r2, r3, #8
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	61da      	str	r2, [r3, #28]
      break;
 800407a:	e041      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fb8e 	bl	80047a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0204 	bic.w	r2, r2, #4
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ba:	e021      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fbc0 	bl	8004848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040fc:	e000      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80040fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop

0800411c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_ConfigClockSource+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e0a6      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x166>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <HAL_TIM_ConfigClockSource+0x170>)
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d067      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x120>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d80b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x6c>
 8004170:	2b10      	cmp	r3, #16
 8004172:	d073      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
 8004174:	2b10      	cmp	r3, #16
 8004176:	d802      	bhi.n	800417e <HAL_TIM_ConfigClockSource+0x62>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d06f      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800417c:	e078      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800417e:	2b20      	cmp	r3, #32
 8004180:	d06c      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
 8004182:	2b30      	cmp	r3, #48	; 0x30
 8004184:	d06a      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004186:	e073      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d00d      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x8c>
 800418c:	2b70      	cmp	r3, #112	; 0x70
 800418e:	d804      	bhi.n	800419a <HAL_TIM_ConfigClockSource+0x7e>
 8004190:	2b50      	cmp	r3, #80	; 0x50
 8004192:	d033      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xe0>
 8004194:	2b60      	cmp	r3, #96	; 0x60
 8004196:	d041      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004198:	e06a      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419e:	d066      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x152>
 80041a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a4:	d017      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041a6:	e063      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6899      	ldr	r1, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f000 fc14 	bl	80049e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
      break;
 80041d4:	e04c      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f000 fbfd 	bl	80049e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e039      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	461a      	mov	r2, r3
 800420a:	f000 fb71 	bl	80048f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2150      	movs	r1, #80	; 0x50
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fbca 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 800421a:	e029      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	461a      	mov	r2, r3
 800422a:	f000 fb90 	bl	800494e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2160      	movs	r1, #96	; 0x60
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fbba 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 800423a:	e019      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	461a      	mov	r2, r3
 800424a:	f000 fb51 	bl	80048f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fbaa 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 800425a:	e009      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f000 fba1 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 800426c:	e000      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800426e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	fffeff88 	.word	0xfffeff88

08004290 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	; (8004408 <TIM_Base_SetConfig+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d00f      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3d      	ldr	r2, [pc, #244]	; (800440c <TIM_Base_SetConfig+0x118>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00b      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <TIM_Base_SetConfig+0x11c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <TIM_Base_SetConfig+0x120>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <TIM_Base_SetConfig+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d108      	bne.n	8004346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <TIM_Base_SetConfig+0x114>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d027      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2c      	ldr	r2, [pc, #176]	; (800440c <TIM_Base_SetConfig+0x118>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d023      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <TIM_Base_SetConfig+0x11c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01f      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <TIM_Base_SetConfig+0x120>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <TIM_Base_SetConfig+0x124>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d017      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <TIM_Base_SetConfig+0x128>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a27      	ldr	r2, [pc, #156]	; (8004420 <TIM_Base_SetConfig+0x12c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <TIM_Base_SetConfig+0x130>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <TIM_Base_SetConfig+0x134>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <TIM_Base_SetConfig+0x138>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <TIM_Base_SetConfig+0x13c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <TIM_Base_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0xf8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <TIM_Base_SetConfig+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d103      	bne.n	80043f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	615a      	str	r2, [r3, #20]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400
 8004424:	40014800 	.word	0x40014800
 8004428:	40001800 	.word	0x40001800
 800442c:	40001c00 	.word	0x40001c00
 8004430:	40002000 	.word	0x40002000

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4b2b      	ldr	r3, [pc, #172]	; (800450c <TIM_OC1_SetConfig+0xd8>)
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a21      	ldr	r2, [pc, #132]	; (8004510 <TIM_OC1_SetConfig+0xdc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_OC1_SetConfig+0x64>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a20      	ldr	r2, [pc, #128]	; (8004514 <TIM_OC1_SetConfig+0xe0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10c      	bne.n	80044b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <TIM_OC1_SetConfig+0xdc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC1_SetConfig+0x8e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <TIM_OC1_SetConfig+0xe0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d111      	bne.n	80044e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	fffeff8f 	.word	0xfffeff8f
 8004510:	40010000 	.word	0x40010000
 8004514:	40010400 	.word	0x40010400

08004518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <TIM_OC2_SetConfig+0xe4>)
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0320 	bic.w	r3, r3, #32
 8004562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a23      	ldr	r2, [pc, #140]	; (8004600 <TIM_OC2_SetConfig+0xe8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_OC2_SetConfig+0x68>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a22      	ldr	r2, [pc, #136]	; (8004604 <TIM_OC2_SetConfig+0xec>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10d      	bne.n	800459c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <TIM_OC2_SetConfig+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC2_SetConfig+0x94>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	; (8004604 <TIM_OC2_SetConfig+0xec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d113      	bne.n	80045d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	feff8fff 	.word	0xfeff8fff
 8004600:	40010000 	.word	0x40010000
 8004604:	40010400 	.word	0x40010400

08004608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <TIM_OC3_SetConfig+0xe0>)
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <TIM_OC3_SetConfig+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC3_SetConfig+0x66>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <TIM_OC3_SetConfig+0xe8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10d      	bne.n	800468a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <TIM_OC3_SetConfig+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_OC3_SetConfig+0x92>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <TIM_OC3_SetConfig+0xe8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d113      	bne.n	80046c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	fffeff8f 	.word	0xfffeff8f
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010400 	.word	0x40010400

080046f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <TIM_OC4_SetConfig+0xa4>)
 8004720:	4013      	ands	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800473e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a13      	ldr	r2, [pc, #76]	; (800479c <TIM_OC4_SetConfig+0xa8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_OC4_SetConfig+0x68>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <TIM_OC4_SetConfig+0xac>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d109      	bne.n	8004770 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	019b      	lsls	r3, r3, #6
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	feff8fff 	.word	0xfeff8fff
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400

080047a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <TIM_OC5_SetConfig+0x98>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a12      	ldr	r2, [pc, #72]	; (8004840 <TIM_OC5_SetConfig+0x9c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_OC5_SetConfig+0x5e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <TIM_OC5_SetConfig+0xa0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d109      	bne.n	8004816 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	fffeff8f 	.word	0xfffeff8f
 8004840:	40010000 	.word	0x40010000
 8004844:	40010400 	.word	0x40010400

08004848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <TIM_OC6_SetConfig+0x9c>)
 8004874:	4013      	ands	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800488a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	051b      	lsls	r3, r3, #20
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <TIM_OC6_SetConfig+0xa0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_OC6_SetConfig+0x60>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <TIM_OC6_SetConfig+0xa4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d109      	bne.n	80048bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	feff8fff 	.word	0xfeff8fff
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40010400 	.word	0x40010400

080048f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 030a 	bic.w	r3, r3, #10
 800492c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0210 	bic.w	r2, r3, #16
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800498a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f043 0307 	orr.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	021a      	lsls	r2, r3, #8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2201      	movs	r2, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e045      	b.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d108      	bne.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40010400 	.word	0x40010400

08004b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e040      	b.n	8004bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f003 f806 	bl	8007b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	; 0x24
 8004b90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa90 	bl	80050c8 <UART_SetConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fd28 	bl	8005610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bde:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fdaf 	bl	8005754 <UART_CheckIdleState>
 8004bf6:	4603      	mov	r3, r0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d17f      	bne.n	8004d18 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Transmit+0x24>
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e078      	b.n	8004d1a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Transmit+0x36>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e071      	b.n	8004d1a <HAL_UART_Transmit+0x11a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2221      	movs	r2, #33	; 0x21
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c4a:	f7fc fa25 	bl	8001098 <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c68:	d108      	bne.n	8004c7c <HAL_UART_Transmit+0x7c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e003      	b.n	8004c84 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c84:	e02c      	b.n	8004ce0 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fd8e 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e03c      	b.n	8004d1a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e007      	b.n	8004cce <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1cc      	bne.n	8004c86 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fd5b 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e009      	b.n	8004d1a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f040 808a 	bne.w	8004e50 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Receive_IT+0x24>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e082      	b.n	8004e52 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Receive_IT+0x36>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e07b      	b.n	8004e52 <HAL_UART_Receive_IT+0x12e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d10e      	bne.n	8004da6 <HAL_UART_Receive_IT+0x82>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_UART_Receive_IT+0x78>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d9a:	e02d      	b.n	8004df8 <HAL_UART_Receive_IT+0xd4>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22ff      	movs	r2, #255	; 0xff
 8004da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da4:	e028      	b.n	8004df8 <HAL_UART_Receive_IT+0xd4>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_UART_Receive_IT+0xa6>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <HAL_UART_Receive_IT+0x9c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	22ff      	movs	r2, #255	; 0xff
 8004dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dbe:	e01b      	b.n	8004df8 <HAL_UART_Receive_IT+0xd4>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	227f      	movs	r2, #127	; 0x7f
 8004dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc8:	e016      	b.n	8004df8 <HAL_UART_Receive_IT+0xd4>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd2:	d10d      	bne.n	8004df0 <HAL_UART_Receive_IT+0xcc>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_UART_Receive_IT+0xc2>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	227f      	movs	r2, #127	; 0x7f
 8004de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de4:	e008      	b.n	8004df8 <HAL_UART_Receive_IT+0xd4>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	223f      	movs	r2, #63	; 0x3f
 8004dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dee:	e003      	b.n	8004df8 <HAL_UART_Receive_IT+0xd4>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2222      	movs	r2, #34	; 0x22
 8004e02:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1c:	d107      	bne.n	8004e2e <HAL_UART_Receive_IT+0x10a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <HAL_UART_Receive_IT+0x13c>)
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
 8004e2c:	e002      	b.n	8004e34 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <HAL_UART_Receive_IT+0x140>)
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004e4a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	08005987 	.word	0x08005987
 8004e64:	080058e1 	.word	0x080058e1

08004e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d113      	bne.n	8004ebe <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80eb 	beq.w	800508a <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
      }
      return;
 8004ebc:	e0e5      	b.n	800508a <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80c0 	beq.w	8005046 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80b5 	beq.w	8005046 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00e      	beq.n	8004f04 <HAL_UART_IRQHandler+0x9c>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <HAL_UART_IRQHandler+0xc4>
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00e      	beq.n	8004f54 <HAL_UART_IRQHandler+0xec>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2204      	movs	r2, #4
 8004f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	f043 0202 	orr.w	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2208      	movs	r2, #8
 8004f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7e:	f043 0208 	orr.w	r2, r3, #8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d07f      	beq.n	800508e <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d004      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d031      	beq.n	8005034 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fc36 	bl	8005842 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d123      	bne.n	800502c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d013      	beq.n	8005024 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <HAL_UART_IRQHandler+0x234>)
 8005002:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005008:	4618      	mov	r0, r3
 800500a:	f7fc f984 	bl	8001316 <HAL_DMA_Abort_IT>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800501e:	4610      	mov	r0, r2
 8005020:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005022:	e00e      	b.n	8005042 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f845 	bl	80050b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502a:	e00a      	b.n	8005042 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f841 	bl	80050b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	e006      	b.n	8005042 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f83d 	bl	80050b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005040:	e025      	b.n	800508e <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005042:	bf00      	nop
    return;
 8005044:	e023      	b.n	800508e <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505e:	2b00      	cmp	r3, #0
 8005060:	d017      	beq.n	8005092 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
    }
    return;
 800506a:	e012      	b.n	8005092 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00e      	beq.n	8005094 <HAL_UART_IRQHandler+0x22c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fc14 	bl	80058ae <UART_EndTransmit_IT>
    return;
 8005086:	bf00      	nop
 8005088:	e004      	b.n	8005094 <HAL_UART_IRQHandler+0x22c>
      return;
 800508a:	bf00      	nop
 800508c:	e002      	b.n	8005094 <HAL_UART_IRQHandler+0x22c>
    return;
 800508e:	bf00      	nop
 8005090:	e000      	b.n	8005094 <HAL_UART_IRQHandler+0x22c>
    return;
 8005092:	bf00      	nop
  }

}
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	08005883 	.word	0x08005883

080050a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4bb1      	ldr	r3, [pc, #708]	; (80053bc <UART_SetConfig+0x2f4>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	6939      	ldr	r1, [r7, #16]
 8005100:	430b      	orrs	r3, r1
 8005102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a9f      	ldr	r2, [pc, #636]	; (80053c0 <UART_SetConfig+0x2f8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d121      	bne.n	800518c <UART_SetConfig+0xc4>
 8005148:	4b9e      	ldr	r3, [pc, #632]	; (80053c4 <UART_SetConfig+0x2fc>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d816      	bhi.n	8005184 <UART_SetConfig+0xbc>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0x94>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	0800516d 	.word	0x0800516d
 8005160:	08005179 	.word	0x08005179
 8005164:	08005173 	.word	0x08005173
 8005168:	0800517f 	.word	0x0800517f
 800516c:	2301      	movs	r3, #1
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e151      	b.n	8005416 <UART_SetConfig+0x34e>
 8005172:	2302      	movs	r3, #2
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e14e      	b.n	8005416 <UART_SetConfig+0x34e>
 8005178:	2304      	movs	r3, #4
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e14b      	b.n	8005416 <UART_SetConfig+0x34e>
 800517e:	2308      	movs	r3, #8
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e148      	b.n	8005416 <UART_SetConfig+0x34e>
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	bf00      	nop
 800518a:	e144      	b.n	8005416 <UART_SetConfig+0x34e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a8d      	ldr	r2, [pc, #564]	; (80053c8 <UART_SetConfig+0x300>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d134      	bne.n	8005200 <UART_SetConfig+0x138>
 8005196:	4b8b      	ldr	r3, [pc, #556]	; (80053c4 <UART_SetConfig+0x2fc>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d829      	bhi.n	80051f8 <UART_SetConfig+0x130>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0xe4>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	080051f9 	.word	0x080051f9
 80051b4:	080051f9 	.word	0x080051f9
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	080051f9 	.word	0x080051f9
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	080051f9 	.word	0x080051f9
 80051cc:	080051e7 	.word	0x080051e7
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	080051f9 	.word	0x080051f9
 80051dc:	080051f3 	.word	0x080051f3
 80051e0:	2300      	movs	r3, #0
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e117      	b.n	8005416 <UART_SetConfig+0x34e>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e114      	b.n	8005416 <UART_SetConfig+0x34e>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e111      	b.n	8005416 <UART_SetConfig+0x34e>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e10e      	b.n	8005416 <UART_SetConfig+0x34e>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	bf00      	nop
 80051fe:	e10a      	b.n	8005416 <UART_SetConfig+0x34e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a71      	ldr	r2, [pc, #452]	; (80053cc <UART_SetConfig+0x304>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d120      	bne.n	800524c <UART_SetConfig+0x184>
 800520a:	4b6e      	ldr	r3, [pc, #440]	; (80053c4 <UART_SetConfig+0x2fc>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005214:	2b10      	cmp	r3, #16
 8005216:	d00f      	beq.n	8005238 <UART_SetConfig+0x170>
 8005218:	2b10      	cmp	r3, #16
 800521a:	d802      	bhi.n	8005222 <UART_SetConfig+0x15a>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <UART_SetConfig+0x164>
 8005220:	e010      	b.n	8005244 <UART_SetConfig+0x17c>
 8005222:	2b20      	cmp	r3, #32
 8005224:	d005      	beq.n	8005232 <UART_SetConfig+0x16a>
 8005226:	2b30      	cmp	r3, #48	; 0x30
 8005228:	d009      	beq.n	800523e <UART_SetConfig+0x176>
 800522a:	e00b      	b.n	8005244 <UART_SetConfig+0x17c>
 800522c:	2300      	movs	r3, #0
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e0f1      	b.n	8005416 <UART_SetConfig+0x34e>
 8005232:	2302      	movs	r3, #2
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e0ee      	b.n	8005416 <UART_SetConfig+0x34e>
 8005238:	2304      	movs	r3, #4
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e0eb      	b.n	8005416 <UART_SetConfig+0x34e>
 800523e:	2308      	movs	r3, #8
 8005240:	77fb      	strb	r3, [r7, #31]
 8005242:	e0e8      	b.n	8005416 <UART_SetConfig+0x34e>
 8005244:	2310      	movs	r3, #16
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	bf00      	nop
 800524a:	e0e4      	b.n	8005416 <UART_SetConfig+0x34e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5f      	ldr	r2, [pc, #380]	; (80053d0 <UART_SetConfig+0x308>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d120      	bne.n	8005298 <UART_SetConfig+0x1d0>
 8005256:	4b5b      	ldr	r3, [pc, #364]	; (80053c4 <UART_SetConfig+0x2fc>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d00f      	beq.n	8005284 <UART_SetConfig+0x1bc>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d802      	bhi.n	800526e <UART_SetConfig+0x1a6>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <UART_SetConfig+0x1b0>
 800526c:	e010      	b.n	8005290 <UART_SetConfig+0x1c8>
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d005      	beq.n	800527e <UART_SetConfig+0x1b6>
 8005272:	2bc0      	cmp	r3, #192	; 0xc0
 8005274:	d009      	beq.n	800528a <UART_SetConfig+0x1c2>
 8005276:	e00b      	b.n	8005290 <UART_SetConfig+0x1c8>
 8005278:	2300      	movs	r3, #0
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e0cb      	b.n	8005416 <UART_SetConfig+0x34e>
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e0c8      	b.n	8005416 <UART_SetConfig+0x34e>
 8005284:	2304      	movs	r3, #4
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e0c5      	b.n	8005416 <UART_SetConfig+0x34e>
 800528a:	2308      	movs	r3, #8
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e0c2      	b.n	8005416 <UART_SetConfig+0x34e>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	bf00      	nop
 8005296:	e0be      	b.n	8005416 <UART_SetConfig+0x34e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a4d      	ldr	r2, [pc, #308]	; (80053d4 <UART_SetConfig+0x30c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d124      	bne.n	80052ec <UART_SetConfig+0x224>
 80052a2:	4b48      	ldr	r3, [pc, #288]	; (80053c4 <UART_SetConfig+0x2fc>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d012      	beq.n	80052d8 <UART_SetConfig+0x210>
 80052b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b6:	d802      	bhi.n	80052be <UART_SetConfig+0x1f6>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <UART_SetConfig+0x204>
 80052bc:	e012      	b.n	80052e4 <UART_SetConfig+0x21c>
 80052be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c2:	d006      	beq.n	80052d2 <UART_SetConfig+0x20a>
 80052c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052c8:	d009      	beq.n	80052de <UART_SetConfig+0x216>
 80052ca:	e00b      	b.n	80052e4 <UART_SetConfig+0x21c>
 80052cc:	2300      	movs	r3, #0
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e0a1      	b.n	8005416 <UART_SetConfig+0x34e>
 80052d2:	2302      	movs	r3, #2
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e09e      	b.n	8005416 <UART_SetConfig+0x34e>
 80052d8:	2304      	movs	r3, #4
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e09b      	b.n	8005416 <UART_SetConfig+0x34e>
 80052de:	2308      	movs	r3, #8
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e098      	b.n	8005416 <UART_SetConfig+0x34e>
 80052e4:	2310      	movs	r3, #16
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	bf00      	nop
 80052ea:	e094      	b.n	8005416 <UART_SetConfig+0x34e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a39      	ldr	r2, [pc, #228]	; (80053d8 <UART_SetConfig+0x310>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d124      	bne.n	8005340 <UART_SetConfig+0x278>
 80052f6:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <UART_SetConfig+0x2fc>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005304:	d012      	beq.n	800532c <UART_SetConfig+0x264>
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d802      	bhi.n	8005312 <UART_SetConfig+0x24a>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <UART_SetConfig+0x258>
 8005310:	e012      	b.n	8005338 <UART_SetConfig+0x270>
 8005312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005316:	d006      	beq.n	8005326 <UART_SetConfig+0x25e>
 8005318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800531c:	d009      	beq.n	8005332 <UART_SetConfig+0x26a>
 800531e:	e00b      	b.n	8005338 <UART_SetConfig+0x270>
 8005320:	2301      	movs	r3, #1
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e077      	b.n	8005416 <UART_SetConfig+0x34e>
 8005326:	2302      	movs	r3, #2
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e074      	b.n	8005416 <UART_SetConfig+0x34e>
 800532c:	2304      	movs	r3, #4
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e071      	b.n	8005416 <UART_SetConfig+0x34e>
 8005332:	2308      	movs	r3, #8
 8005334:	77fb      	strb	r3, [r7, #31]
 8005336:	e06e      	b.n	8005416 <UART_SetConfig+0x34e>
 8005338:	2310      	movs	r3, #16
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	bf00      	nop
 800533e:	e06a      	b.n	8005416 <UART_SetConfig+0x34e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a25      	ldr	r2, [pc, #148]	; (80053dc <UART_SetConfig+0x314>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d124      	bne.n	8005394 <UART_SetConfig+0x2cc>
 800534a:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <UART_SetConfig+0x2fc>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d012      	beq.n	8005380 <UART_SetConfig+0x2b8>
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d802      	bhi.n	8005366 <UART_SetConfig+0x29e>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <UART_SetConfig+0x2ac>
 8005364:	e012      	b.n	800538c <UART_SetConfig+0x2c4>
 8005366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536a:	d006      	beq.n	800537a <UART_SetConfig+0x2b2>
 800536c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005370:	d009      	beq.n	8005386 <UART_SetConfig+0x2be>
 8005372:	e00b      	b.n	800538c <UART_SetConfig+0x2c4>
 8005374:	2300      	movs	r3, #0
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e04d      	b.n	8005416 <UART_SetConfig+0x34e>
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e04a      	b.n	8005416 <UART_SetConfig+0x34e>
 8005380:	2304      	movs	r3, #4
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e047      	b.n	8005416 <UART_SetConfig+0x34e>
 8005386:	2308      	movs	r3, #8
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e044      	b.n	8005416 <UART_SetConfig+0x34e>
 800538c:	2310      	movs	r3, #16
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	bf00      	nop
 8005392:	e040      	b.n	8005416 <UART_SetConfig+0x34e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <UART_SetConfig+0x318>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d139      	bne.n	8005412 <UART_SetConfig+0x34a>
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <UART_SetConfig+0x2fc>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ac:	d027      	beq.n	80053fe <UART_SetConfig+0x336>
 80053ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053b2:	d817      	bhi.n	80053e4 <UART_SetConfig+0x31c>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01c      	beq.n	80053f2 <UART_SetConfig+0x32a>
 80053b8:	e027      	b.n	800540a <UART_SetConfig+0x342>
 80053ba:	bf00      	nop
 80053bc:	efff69f3 	.word	0xefff69f3
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40004400 	.word	0x40004400
 80053cc:	40004800 	.word	0x40004800
 80053d0:	40004c00 	.word	0x40004c00
 80053d4:	40005000 	.word	0x40005000
 80053d8:	40011400 	.word	0x40011400
 80053dc:	40007800 	.word	0x40007800
 80053e0:	40007c00 	.word	0x40007c00
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e8:	d006      	beq.n	80053f8 <UART_SetConfig+0x330>
 80053ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053ee:	d009      	beq.n	8005404 <UART_SetConfig+0x33c>
 80053f0:	e00b      	b.n	800540a <UART_SetConfig+0x342>
 80053f2:	2300      	movs	r3, #0
 80053f4:	77fb      	strb	r3, [r7, #31]
 80053f6:	e00e      	b.n	8005416 <UART_SetConfig+0x34e>
 80053f8:	2302      	movs	r3, #2
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e00b      	b.n	8005416 <UART_SetConfig+0x34e>
 80053fe:	2304      	movs	r3, #4
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e008      	b.n	8005416 <UART_SetConfig+0x34e>
 8005404:	2308      	movs	r3, #8
 8005406:	77fb      	strb	r3, [r7, #31]
 8005408:	e005      	b.n	8005416 <UART_SetConfig+0x34e>
 800540a:	2310      	movs	r3, #16
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	bf00      	nop
 8005410:	e001      	b.n	8005416 <UART_SetConfig+0x34e>
 8005412:	2310      	movs	r3, #16
 8005414:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d17c      	bne.n	800551a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8005420:	7ffb      	ldrb	r3, [r7, #31]
 8005422:	2b08      	cmp	r3, #8
 8005424:	d859      	bhi.n	80054da <UART_SetConfig+0x412>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <UART_SetConfig+0x364>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005451 	.word	0x08005451
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054db 	.word	0x080054db
 800543c:	080054a5 	.word	0x080054a5
 8005440:	080054db 	.word	0x080054db
 8005444:	080054db 	.word	0x080054db
 8005448:	080054db 	.word	0x080054db
 800544c:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005450:	f7fd f956 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8005454:	4603      	mov	r3, r0
 8005456:	005a      	lsls	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	441a      	add	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	b29b      	uxth	r3, r3
 800546a:	61bb      	str	r3, [r7, #24]
        break;
 800546c:	e038      	b.n	80054e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800546e:	f7fd f95b 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8005472:	4603      	mov	r3, r0
 8005474:	005a      	lsls	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	fbb2 f3f3 	udiv	r3, r2, r3
 8005486:	b29b      	uxth	r3, r3
 8005488:	61bb      	str	r3, [r7, #24]
        break;
 800548a:	e029      	b.n	80054e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	085a      	lsrs	r2, r3, #1
 8005492:	4b5d      	ldr	r3, [pc, #372]	; (8005608 <UART_SetConfig+0x540>)
 8005494:	4413      	add	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6852      	ldr	r2, [r2, #4]
 800549a:	fbb3 f3f2 	udiv	r3, r3, r2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	61bb      	str	r3, [r7, #24]
        break;
 80054a2:	e01d      	b.n	80054e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80054a4:	f7fd f848 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80054a8:	4603      	mov	r3, r0
 80054aa:	005a      	lsls	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	441a      	add	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	b29b      	uxth	r3, r3
 80054be:	61bb      	str	r3, [r7, #24]
        break;
 80054c0:	e00e      	b.n	80054e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	61bb      	str	r3, [r7, #24]
        break;
 80054d8:	e002      	b.n	80054e0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
        break;
 80054de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	d916      	bls.n	8005514 <UART_SetConfig+0x44c>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ec:	d212      	bcs.n	8005514 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f023 030f 	bic.w	r3, r3, #15
 80054f6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	b29a      	uxth	r2, r3
 8005504:	89fb      	ldrh	r3, [r7, #14]
 8005506:	4313      	orrs	r3, r2
 8005508:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	89fa      	ldrh	r2, [r7, #14]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	e06e      	b.n	80055f2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
 8005518:	e06b      	b.n	80055f2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800551a:	7ffb      	ldrb	r3, [r7, #31]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d857      	bhi.n	80055d0 <UART_SetConfig+0x508>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x460>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005569 	.word	0x08005569
 8005530:	08005585 	.word	0x08005585
 8005534:	080055d1 	.word	0x080055d1
 8005538:	0800559d 	.word	0x0800559d
 800553c:	080055d1 	.word	0x080055d1
 8005540:	080055d1 	.word	0x080055d1
 8005544:	080055d1 	.word	0x080055d1
 8005548:	080055b9 	.word	0x080055b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800554c:	f7fd f8d8 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8005550:	4602      	mov	r2, r0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	441a      	add	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	61bb      	str	r3, [r7, #24]
        break;
 8005566:	e036      	b.n	80055d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005568:	f7fd f8de 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 800556c:	4602      	mov	r2, r0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	61bb      	str	r3, [r7, #24]
        break;
 8005582:	e028      	b.n	80055d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	085a      	lsrs	r2, r3, #1
 800558a:	4b20      	ldr	r3, [pc, #128]	; (800560c <UART_SetConfig+0x544>)
 800558c:	4413      	add	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6852      	ldr	r2, [r2, #4]
 8005592:	fbb3 f3f2 	udiv	r3, r3, r2
 8005596:	b29b      	uxth	r3, r3
 8005598:	61bb      	str	r3, [r7, #24]
        break;
 800559a:	e01c      	b.n	80055d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800559c:	f7fc ffcc 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	61bb      	str	r3, [r7, #24]
        break;
 80055b6:	e00e      	b.n	80055d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	61bb      	str	r3, [r7, #24]
        break;
 80055ce:	e002      	b.n	80055d6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
        break;
 80055d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b0f      	cmp	r3, #15
 80055da:	d908      	bls.n	80055ee <UART_SetConfig+0x526>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d204      	bcs.n	80055ee <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e001      	b.n	80055f2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	01e84800 	.word	0x01e84800
 800560c:	00f42400 	.word	0x00f42400

08005610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01a      	beq.n	8005726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570e:	d10a      	bne.n	8005726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005762:	f7fb fc99 	bl	8001098 <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b08      	cmp	r3, #8
 8005774:	d10e      	bne.n	8005794 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f814 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e00a      	b.n	80057aa <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c2:	e02a      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d026      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fb fc64 	bl	8001098 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11b      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e00f      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	429a      	cmp	r2, r3
 8005836:	d0c5      	beq.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005858:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fc07 	bl	80050b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fbe4 	bl	80050a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f4:	2b22      	cmp	r3, #34	; 0x22
 80058f6:	d13a      	bne.n	800596e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005900:	89bb      	ldrh	r3, [r7, #12]
 8005902:	b2d9      	uxtb	r1, r3
 8005904:	89fb      	ldrh	r3, [r7, #14]
 8005906:	b2da      	uxtb	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	400a      	ands	r2, r1
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d121      	bne.n	800597e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005948:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 fd0c 	bl	8007384 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800596c:	e007      	b.n	800597e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0208 	orr.w	r2, r2, #8
 800597c:	619a      	str	r2, [r3, #24]
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005994:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800599a:	2b22      	cmp	r3, #34	; 0x22
 800599c:	d13a      	bne.n	8005a14 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80059ac:	89ba      	ldrh	r2, [r7, #12]
 80059ae:	89fb      	ldrh	r3, [r7, #14]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d121      	bne.n	8005a24 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fcb9 	bl	8007384 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a12:	e007      	b.n	8005a24 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	619a      	str	r2, [r3, #24]
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	4603      	mov	r3, r0
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fb36 	bl	80060b0 <null_ptr_check>
 8005a44:	4603      	mov	r3, r0
 8005a46:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8005a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d11c      	bne.n	8005a8a <bmp280_get_regs+0x5e>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d019      	beq.n	8005a8a <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	789b      	ldrb	r3, [r3, #2]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a64:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685c      	ldr	r4, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7858      	ldrb	r0, [r3, #1]
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	7bf9      	ldrb	r1, [r7, #15]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	47a0      	blx	r4
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8005a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8005a84:	23fc      	movs	r3, #252	; 0xfc
 8005a86:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8005a88:	e001      	b.n	8005a8e <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005a8a:	23ff      	movs	r3, #255	; 0xff
 8005a8c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd90      	pop	{r4, r7, pc}

08005a9a <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8005a9a:	b590      	push	{r4, r7, lr}
 8005a9c:	b089      	sub	sp, #36	; 0x24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	603b      	str	r3, [r7, #0]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d901      	bls.n	8005ab4 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8005ab4:	6838      	ldr	r0, [r7, #0]
 8005ab6:	f000 fafb 	bl	80060b0 <null_ptr_check>
 8005aba:	4603      	mov	r3, r0
 8005abc:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8005abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d14d      	bne.n	8005b62 <bmp280_set_regs+0xc8>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d04a      	beq.n	8005b62 <bmp280_set_regs+0xc8>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d047      	beq.n	8005b62 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d041      	beq.n	8005b5c <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	789b      	ldrb	r3, [r3, #2]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d114      	bne.n	8005b10 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	76fb      	strb	r3, [r7, #27]
 8005aea:	e00d      	b.n	8005b08 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005aec:	7efb      	ldrb	r3, [r7, #27]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	7efb      	ldrb	r3, [r7, #27]
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	440b      	add	r3, r1
 8005afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005b02:	7efb      	ldrb	r3, [r7, #27]
 8005b04:	3301      	adds	r3, #1
 8005b06:	76fb      	strb	r3, [r7, #27]
 8005b08:	7efa      	ldrb	r2, [r7, #27]
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d3ed      	bcc.n	8005aec <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d90d      	bls.n	8005b32 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	f107 0110 	add.w	r1, r7, #16
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fae6 	bl	80060f0 <interleave_data>
                temp_len = ((len * 2) - 1);
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	83bb      	strh	r3, [r7, #28]
 8005b30:	e001      	b.n	8005b36 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689c      	ldr	r4, [r3, #8]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	7858      	ldrb	r0, [r3, #1]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	7819      	ldrb	r1, [r3, #0]
 8005b42:	8bbb      	ldrh	r3, [r7, #28]
 8005b44:	f107 0210 	add.w	r2, r7, #16
 8005b48:	47a0      	blx	r4
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8005b4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8005b56:	23fc      	movs	r3, #252	; 0xfc
 8005b58:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8005b5a:	e005      	b.n	8005b68 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8005b5c:	23fd      	movs	r3, #253	; 0xfd
 8005b5e:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8005b60:	e002      	b.n	8005b68 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005b62:	23ff      	movs	r3, #255	; 0xff
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e000      	b.n	8005b6a <bmp280_set_regs+0xd0>
        if (len != 0)
 8005b68:	bf00      	nop
    }

    return rslt;
 8005b6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	; 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd90      	pop	{r4, r7, pc}

08005b76 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8005b7e:	23e0      	movs	r3, #224	; 0xe0
 8005b80:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8005b82:	23b6      	movs	r3, #182	; 0xb6
 8005b84:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa92 	bl	80060b0 <null_ptr_check>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8005b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8005b98:	f107 010d 	add.w	r1, r7, #13
 8005b9c:	f107 000e 	add.w	r0, r7, #14
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f7ff ff79 	bl	8005a9a <bmp280_set_regs>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2002      	movs	r0, #2
 8005bb2:	4798      	blx	r3
    }

    return rslt;
 8005bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8005bc8:	2305      	movs	r3, #5
 8005bca:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa6f 	bl	80060b0 <null_ptr_check>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8005bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d150      	bne.n	8005c80 <bmp280_init+0xc0>
    {
        while (try_count)
 8005bde:	e02d      	b.n	8005c3c <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	20d0      	movs	r0, #208	; 0xd0
 8005be8:	f7ff ff20 	bl	8005a2c <bmp280_get_regs>
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8005bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8005bfc:	2b56      	cmp	r3, #86	; 0x56
 8005bfe:	d007      	beq.n	8005c10 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b57      	cmp	r3, #87	; 0x57
 8005c06:	d003      	beq.n	8005c10 <bmp280_init+0x50>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b58      	cmp	r3, #88	; 0x58
 8005c0e:	d10e      	bne.n	8005c2e <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ffb0 	bl	8005b76 <bmp280_soft_reset>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa8f 	bl	8006146 <get_calib_param>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8005c2c:	e00a      	b.n	8005c44 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	200a      	movs	r0, #10
 8005c34:	4798      	blx	r3
            --try_count;
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1ce      	bne.n	8005be0 <bmp280_init+0x20>
 8005c42:	e000      	b.n	8005c46 <bmp280_init+0x86>
                break;
 8005c44:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8005c4c:	23fe      	movs	r3, #254	; 0xfe
 8005c4e:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8005c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d113      	bne.n	8005c80 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8005c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8005c96:	2300      	movs	r3, #0
 8005c98:	733b      	strb	r3, [r7, #12]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8005c9e:	6838      	ldr	r0, [r7, #0]
 8005ca0:	f000 fa06 	bl	80060b0 <null_ptr_check>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8005ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d137      	bne.n	8005d20 <bmp280_get_config+0x94>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d034      	beq.n	8005d20 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8005cb6:	f107 010c 	add.w	r1, r7, #12
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	20f4      	movs	r0, #244	; 0xf4
 8005cc0:	f7ff feb4 	bl	8005a2c <bmp280_get_regs>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d129      	bne.n	8005d24 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8005cd0:	7b3b      	ldrb	r3, [r7, #12]
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8005cda:	7b3b      	ldrb	r3, [r7, #12]
 8005cdc:	109b      	asrs	r3, r3, #2
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8005cea:	7b7b      	ldrb	r3, [r7, #13]
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8005cf4:	7b7b      	ldrb	r3, [r7, #13]
 8005cf6:	109b      	asrs	r3, r3, #2
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8005d04:	7b7b      	ldrb	r3, [r7, #13]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	332c      	adds	r3, #44	; 0x2c
 8005d16:	6810      	ldr	r0, [r2, #0]
 8005d18:	6018      	str	r0, [r3, #0]
 8005d1a:	7912      	ldrb	r2, [r2, #4]
 8005d1c:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8005d1e:	e001      	b.n	8005d24 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005d20:	23ff      	movs	r3, #255	; 0xff
 8005d22:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f000 fa9e 	bl	8006280 <conf_sensor>
 8005d44:	4603      	mov	r3, r0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	6039      	str	r1, [r7, #0]
 8005d58:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005d5a:	6838      	ldr	r0, [r7, #0]
 8005d5c:	f000 f9a8 	bl	80060b0 <null_ptr_check>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8005d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fa82 	bl	8006280 <conf_sensor>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8005da0:	6838      	ldr	r0, [r7, #0]
 8005da2:	f000 f985 	bl	80060b0 <null_ptr_check>
 8005da6:	4603      	mov	r3, r0
 8005da8:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8005daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d133      	bne.n	8005e1a <bmp280_get_uncomp_data+0x8e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d030      	beq.n	8005e1a <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8005db8:	f107 0108 	add.w	r1, r7, #8
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	20f7      	movs	r0, #247	; 0xf7
 8005dc2:	f7ff fe33 	bl	8005a2c <bmp280_get_regs>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d120      	bne.n	8005e14 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8005dd2:	7a3b      	ldrb	r3, [r7, #8]
 8005dd4:	031a      	lsls	r2, r3, #12
 8005dd6:	7a7b      	ldrb	r3, [r7, #9]
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	7aba      	ldrb	r2, [r7, #10]
 8005dde:	0912      	lsrs	r2, r2, #4
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	031a      	lsls	r2, r3, #12
 8005dec:	7b3b      	ldrb	r3, [r7, #12]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	4313      	orrs	r3, r2
 8005df2:	7b7a      	ldrb	r2, [r7, #13]
 8005df4:	0912      	lsrs	r2, r2, #4
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 faf3 	bl	80063f4 <st_check_boundaries>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005e12:	e004      	b.n	8005e1e <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 8005e14:	23f3      	movs	r3, #243	; 0xf3
 8005e16:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8005e18:	e001      	b.n	8005e1e <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8005e1a:	23ff      	movs	r3, #255	; 0xff
 8005e1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b088      	sub	sp, #32
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f93a 	bl	80060b0 <null_ptr_check>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8005e40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d150      	bne.n	8005eea <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	da00      	bge.n	8005e50 <bmp280_get_comp_temp_32bit+0x26>
 8005e4e:	3307      	adds	r3, #7
 8005e50:	10db      	asrs	r3, r3, #3
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8a1b      	ldrh	r3, [r3, #16]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da01      	bge.n	8005e6e <bmp280_get_comp_temp_32bit+0x44>
 8005e6a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005e6e:	12db      	asrs	r3, r3, #11
 8005e70:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da00      	bge.n	8005e7a <bmp280_get_comp_temp_32bit+0x50>
 8005e78:	330f      	adds	r3, #15
 8005e7a:	111b      	asrs	r3, r3, #4
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8a1b      	ldrh	r3, [r3, #16]
 8005e82:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da00      	bge.n	8005e8c <bmp280_get_comp_temp_32bit+0x62>
 8005e8a:	330f      	adds	r3, #15
 8005e8c:	111b      	asrs	r3, r3, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8a1b      	ldrh	r3, [r3, #16]
 8005e94:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 8005e96:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da01      	bge.n	8005ea2 <bmp280_get_comp_temp_32bit+0x78>
 8005e9e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005ea2:	131b      	asrs	r3, r3, #12
 8005ea4:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8005eac:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da03      	bge.n	8005ebc <bmp280_get_comp_temp_32bit+0x92>
 8005eb4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005eb8:	441a      	add	r2, r3
 8005eba:	4613      	mov	r3, r2
 8005ebc:	139b      	asrs	r3, r3, #14
 8005ebe:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3380      	adds	r3, #128	; 0x80
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da00      	bge.n	8005edc <bmp280_get_comp_temp_32bit+0xb2>
 8005eda:	33ff      	adds	r3, #255	; 0xff
 8005edc:	121b      	asrs	r3, r3, #8
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	e004      	b.n	8005ef4 <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8005ef0:	23f2      	movs	r3, #242	; 0xf2
 8005ef2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005ef4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8005f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f04:	b08a      	sub	sp, #40	; 0x28
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f8ce 	bl	80060b0 <null_ptr_check>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8005f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 80ac 	bne.w	800607c <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8005f24:	68b8      	ldr	r0, [r7, #8]
 8005f26:	f7fa fb1d 	bl	8000564 <__aeabi_i2d>
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	; (80060a0 <bmp280_get_comp_temp_double+0x1a0>)
 8005f30:	f7fa fcac 	bl	800088c <__aeabi_ddiv>
 8005f34:	4603      	mov	r3, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	4625      	mov	r5, r4
 8005f3a:	461c      	mov	r4, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8a1b      	ldrh	r3, [r3, #16]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa faff 	bl	8000544 <__aeabi_ui2d>
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	4b56      	ldr	r3, [pc, #344]	; (80060a4 <bmp280_get_comp_temp_double+0x1a4>)
 8005f4c:	f7fa fc9e 	bl	800088c <__aeabi_ddiv>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4620      	mov	r0, r4
 8005f56:	4629      	mov	r1, r5
 8005f58:	f7fa f9b6 	bl	80002c8 <__aeabi_dsub>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	4625      	mov	r5, r4
 8005f62:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fa fafa 	bl	8000564 <__aeabi_i2d>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8005f74:	4620      	mov	r0, r4
 8005f76:	4629      	mov	r1, r5
 8005f78:	f7fa fb5e 	bl	8000638 <__aeabi_dmul>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8005f84:	68b8      	ldr	r0, [r7, #8]
 8005f86:	f7fa faed 	bl	8000564 <__aeabi_i2d>
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005f92:	f7fa fc7b 	bl	800088c <__aeabi_ddiv>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	4625      	mov	r5, r4
 8005f9c:	461c      	mov	r4, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8a1b      	ldrh	r3, [r3, #16]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa face 	bl	8000544 <__aeabi_ui2d>
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <bmp280_get_comp_temp_double+0x1a8>)
 8005fae:	f7fa fc6d 	bl	800088c <__aeabi_ddiv>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f7fa f985 	bl	80002c8 <__aeabi_dsub>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	4625      	mov	r5, r4
 8005fc4:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8005fc6:	68b8      	ldr	r0, [r7, #8]
 8005fc8:	f7fa facc 	bl	8000564 <__aeabi_i2d>
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005fd4:	f7fa fc5a 	bl	800088c <__aeabi_ddiv>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4690      	mov	r8, r2
 8005fde:	4699      	mov	r9, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8a1b      	ldrh	r3, [r3, #16]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa faad 	bl	8000544 <__aeabi_ui2d>
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <bmp280_get_comp_temp_double+0x1a8>)
 8005ff0:	f7fa fc4c 	bl	800088c <__aeabi_ddiv>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa f964 	bl	80002c8 <__aeabi_dsub>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa fb16 	bl	8000638 <__aeabi_dmul>
 800600c:	4603      	mov	r3, r0
 800600e:	460c      	mov	r4, r1
 8006010:	4625      	mov	r5, r4
 8006012:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800601a:	4618      	mov	r0, r3
 800601c:	f7fa faa2 	bl	8000564 <__aeabi_i2d>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
        var2 =
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fb06 	bl	8000638 <__aeabi_dmul>
 800602c:	4603      	mov	r3, r0
 800602e:	460c      	mov	r4, r1
 8006030:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8006034:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006038:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800603c:	f7fa f946 	bl	80002cc <__adddf3>
 8006040:	4603      	mov	r3, r0
 8006042:	460c      	mov	r4, r1
 8006044:	4618      	mov	r0, r3
 8006046:	4621      	mov	r1, r4
 8006048:	f7fa fda6 	bl	8000b98 <__aeabi_d2iz>
 800604c:	4602      	mov	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8006052:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006056:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800605a:	f7fa f937 	bl	80002cc <__adddf3>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	4618      	mov	r0, r3
 8006064:	4621      	mov	r1, r4
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	4b10      	ldr	r3, [pc, #64]	; (80060ac <bmp280_get_comp_temp_double+0x1ac>)
 800606c:	f7fa fc0e 	bl	800088c <__aeabi_ddiv>
 8006070:	4603      	mov	r3, r0
 8006072:	460c      	mov	r4, r1
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	e9c2 3400 	strd	r3, r4, [r2]
 800607a:	e009      	b.n	8006090 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	f04f 0400 	mov.w	r4, #0
 8006086:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 800608a:	23ef      	movs	r3, #239	; 0xef
 800608c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8006090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	; 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800609e:	bf00      	nop
 80060a0:	40d00000 	.word	0x40d00000
 80060a4:	40900000 	.word	0x40900000
 80060a8:	40c00000 	.word	0x40c00000
 80060ac:	40b40000 	.word	0x40b40000

080060b0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <null_ptr_check+0x26>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <null_ptr_check+0x26>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <null_ptr_check+0x26>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80060d6:	23ff      	movs	r3, #255	; 0xff
 80060d8:	73fb      	strb	r3, [r7, #15]
 80060da:	e001      	b.n	80060e0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80060e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80060fe:	2301      	movs	r3, #1
 8006100:	75fb      	strb	r3, [r7, #23]
 8006102:	e016      	b.n	8006132 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	441a      	add	r2, r3
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	440b      	add	r3, r1
 8006114:	7812      	ldrb	r2, [r2, #0]
 8006116:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	441a      	add	r2, r3
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	4619      	mov	r1, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	440b      	add	r3, r1
 8006128:	7812      	ldrb	r2, [r2, #0]
 800612a:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	3301      	adds	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
 8006132:	7dfa      	ldrb	r2, [r7, #23]
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	429a      	cmp	r2, r3
 8006138:	d3e4      	bcc.n	8006104 <interleave_data+0x14>
    }
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b08a      	sub	sp, #40	; 0x28
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	609a      	str	r2, [r3, #8]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	611a      	str	r2, [r3, #16]
 800615e:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ffa5 	bl	80060b0 <null_ptr_check>
 8006166:	4603      	mov	r3, r0
 8006168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 800616c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006170:	2b00      	cmp	r3, #0
 8006172:	d17f      	bne.n	8006274 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8006174:	f107 010c 	add.w	r1, r7, #12
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2218      	movs	r2, #24
 800617c:	2088      	movs	r0, #136	; 0x88
 800617e:	f7ff fc55 	bl	8005a2c <bmp280_get_regs>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8006188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800618c:	2b00      	cmp	r3, #0
 800618e:	d171      	bne.n	8006274 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8006190:	7b7b      	ldrb	r3, [r7, #13]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	b21a      	sxth	r2, r3
 8006196:	7b3b      	ldrb	r3, [r7, #12]
 8006198:	b21b      	sxth	r3, r3
 800619a:	4313      	orrs	r3, r2
 800619c:	b21b      	sxth	r3, r3
 800619e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	b21a      	sxth	r2, r3
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80061b6:	7c7b      	ldrb	r3, [r7, #17]
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	b21a      	sxth	r2, r3
 80061bc:	7c3b      	ldrb	r3, [r7, #16]
 80061be:	b21b      	sxth	r3, r3
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80061c8:	7cfb      	ldrb	r3, [r7, #19]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	b21a      	sxth	r2, r3
 80061ce:	7cbb      	ldrb	r3, [r7, #18]
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80061dc:	7d7b      	ldrb	r3, [r7, #21]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	b21a      	sxth	r2, r3
 80061e2:	7d3b      	ldrb	r3, [r7, #20]
 80061e4:	b21b      	sxth	r3, r3
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	b21a      	sxth	r2, r3
 80061f4:	7dbb      	ldrb	r3, [r7, #22]
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8006200:	7e7b      	ldrb	r3, [r7, #25]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	b21a      	sxth	r2, r3
 8006206:	7e3b      	ldrb	r3, [r7, #24]
 8006208:	b21b      	sxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8006212:	7efb      	ldrb	r3, [r7, #27]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	b21a      	sxth	r2, r3
 8006218:	7ebb      	ldrb	r3, [r7, #26]
 800621a:	b21b      	sxth	r3, r3
 800621c:	4313      	orrs	r3, r2
 800621e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8006224:	7f7b      	ldrb	r3, [r7, #29]
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	b21a      	sxth	r2, r3
 800622a:	7f3b      	ldrb	r3, [r7, #28]
 800622c:	b21b      	sxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8006236:	7ffb      	ldrb	r3, [r7, #31]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	b21a      	sxth	r2, r3
 800623c:	7fbb      	ldrb	r3, [r7, #30]
 800623e:	b21b      	sxth	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8006248:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	b21a      	sxth	r2, r3
 8006250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006254:	b21b      	sxth	r3, r3
 8006256:	4313      	orrs	r3, r2
 8006258:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 800625e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	b21a      	sxth	r2, r3
 8006266:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800626a:	b21b      	sxth	r3, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8006274:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006278:	4618      	mov	r0, r3
 800627a:	3728      	adds	r7, #40	; 0x28
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800628e:	2300      	movs	r3, #0
 8006290:	753b      	strb	r3, [r7, #20]
 8006292:	2300      	movs	r3, #0
 8006294:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8006296:	4b56      	ldr	r3, [pc, #344]	; (80063f0 <conf_sensor+0x170>)
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff ff07 	bl	80060b0 <null_ptr_check>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 80062a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f040 8095 	bne.w	80063da <conf_sensor+0x15a>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8091 	beq.w	80063da <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 80062b8:	f107 0114 	add.w	r1, r7, #20
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	20f4      	movs	r0, #244	; 0xf4
 80062c2:	f7ff fbb3 	bl	8005a2c <bmp280_get_regs>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80062ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 8086 	bne.w	80063e0 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fc4e 	bl	8005b76 <bmp280_soft_reset>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80062de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d17c      	bne.n	80063e0 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80062e6:	7d3b      	ldrb	r3, [r7, #20]
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	b25a      	sxtb	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	015b      	lsls	r3, r3, #5
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8006300:	7d3b      	ldrb	r3, [r7, #20]
 8006302:	b25b      	sxtb	r3, r3
 8006304:	f023 031c 	bic.w	r3, r3, #28
 8006308:	b25a      	sxtb	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	b25b      	sxtb	r3, r3
 8006312:	f003 031c 	and.w	r3, r3, #28
 8006316:	b25b      	sxtb	r3, r3
 8006318:	4313      	orrs	r3, r2
 800631a:	b25b      	sxtb	r3, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8006320:	7d7b      	ldrb	r3, [r7, #21]
 8006322:	b25b      	sxtb	r3, r3
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	b25a      	sxtb	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	789b      	ldrb	r3, [r3, #2]
 800632e:	015b      	lsls	r3, r3, #5
 8006330:	b25b      	sxtb	r3, r3
 8006332:	4313      	orrs	r3, r2
 8006334:	b25b      	sxtb	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 800633a:	7d7b      	ldrb	r3, [r7, #21]
 800633c:	b25b      	sxtb	r3, r3
 800633e:	f023 031c 	bic.w	r3, r3, #28
 8006342:	b25a      	sxtb	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	78db      	ldrb	r3, [r3, #3]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	b25b      	sxtb	r3, r3
 800634c:	f003 031c 	and.w	r3, r3, #28
 8006350:	b25b      	sxtb	r3, r3
 8006352:	4313      	orrs	r3, r2
 8006354:	b25b      	sxtb	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 800635a:	7d7b      	ldrb	r3, [r7, #21]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	b25a      	sxtb	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	791b      	ldrb	r3, [r3, #4]
 8006368:	b25b      	sxtb	r3, r3
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	b25b      	sxtb	r3, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	b25b      	sxtb	r3, r3
 8006374:	b2db      	uxtb	r3, r3
 8006376:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8006378:	f107 0114 	add.w	r1, r7, #20
 800637c:	f107 0010 	add.w	r0, r7, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f7ff fb89 	bl	8005a9a <bmp280_set_regs>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 800638c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d125      	bne.n	80063e0 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	332c      	adds	r3, #44	; 0x2c
 800639a:	6810      	ldr	r0, [r2, #0]
 800639c:	6018      	str	r0, [r3, #0]
 800639e:	7912      	ldrb	r2, [r2, #4]
 80063a0:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01b      	beq.n	80063e0 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 80063a8:	7d3b      	ldrb	r3, [r7, #20]
 80063aa:	b25b      	sxtb	r3, r3
 80063ac:	f023 0303 	bic.w	r3, r3, #3
 80063b0:	b25a      	sxtb	r2, r3
 80063b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 80063c4:	f107 0114 	add.w	r1, r7, #20
 80063c8:	f107 0010 	add.w	r0, r7, #16
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f7ff fb63 	bl	8005a9a <bmp280_set_regs>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80063d8:	e002      	b.n	80063e0 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80063da:	23ff      	movs	r3, #255	; 0xff
 80063dc:	75fb      	strb	r3, [r7, #23]
 80063de:	e000      	b.n	80063e2 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 80063e0:	bf00      	nop
    }

    return rslt;
 80063e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	08009eb0 	.word	0x08009eb0

080063f4 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	dd03      	ble.n	8006410 <st_check_boundaries+0x1c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a15      	ldr	r2, [pc, #84]	; (8006460 <st_check_boundaries+0x6c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	dd09      	ble.n	8006424 <st_check_boundaries+0x30>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd03      	ble.n	800641e <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	4a11      	ldr	r2, [pc, #68]	; (8006460 <st_check_boundaries+0x6c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	dd02      	ble.n	8006424 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800641e:	23f4      	movs	r3, #244	; 0xf4
 8006420:	73fb      	strb	r3, [r7, #15]
 8006422:	e015      	b.n	8006450 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd03      	ble.n	8006432 <st_check_boundaries+0x3e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a0c      	ldr	r2, [pc, #48]	; (8006460 <st_check_boundaries+0x6c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	dd02      	ble.n	8006438 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8006432:	23f6      	movs	r3, #246	; 0xf6
 8006434:	73fb      	strb	r3, [r7, #15]
 8006436:	e00b      	b.n	8006450 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd03      	ble.n	8006446 <st_check_boundaries+0x52>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	4a07      	ldr	r2, [pc, #28]	; (8006460 <st_check_boundaries+0x6c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	dd02      	ble.n	800644c <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8006446:	23f5      	movs	r3, #245	; 0xf5
 8006448:	73fb      	strb	r3, [r7, #15]
 800644a:	e001      	b.n	8006450 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	000fffef 	.word	0x000fffef

08006464 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	; 0x38
 8006468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800646a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	605a      	str	r2, [r3, #4]
 8006474:	609a      	str	r2, [r3, #8]
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800647a:	4bb3      	ldr	r3, [pc, #716]	; (8006748 <MX_GPIO_Init+0x2e4>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	4ab2      	ldr	r2, [pc, #712]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006480:	f043 0310 	orr.w	r3, r3, #16
 8006484:	6313      	str	r3, [r2, #48]	; 0x30
 8006486:	4bb0      	ldr	r3, [pc, #704]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006492:	4bad      	ldr	r3, [pc, #692]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	4aac      	ldr	r2, [pc, #688]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006498:	f043 0304 	orr.w	r3, r3, #4
 800649c:	6313      	str	r3, [r2, #48]	; 0x30
 800649e:	4baa      	ldr	r3, [pc, #680]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80064aa:	4ba7      	ldr	r3, [pc, #668]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	4aa6      	ldr	r2, [pc, #664]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064b0:	f043 0320 	orr.w	r3, r3, #32
 80064b4:	6313      	str	r3, [r2, #48]	; 0x30
 80064b6:	4ba4      	ldr	r3, [pc, #656]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064c2:	4ba1      	ldr	r3, [pc, #644]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	4aa0      	ldr	r2, [pc, #640]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	6313      	str	r3, [r2, #48]	; 0x30
 80064ce:	4b9e      	ldr	r3, [pc, #632]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064da:	4b9b      	ldr	r3, [pc, #620]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	4a9a      	ldr	r2, [pc, #616]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6313      	str	r3, [r2, #48]	; 0x30
 80064e6:	4b98      	ldr	r3, [pc, #608]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064f2:	4b95      	ldr	r3, [pc, #596]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	4a94      	ldr	r2, [pc, #592]	; (8006748 <MX_GPIO_Init+0x2e4>)
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	6313      	str	r3, [r2, #48]	; 0x30
 80064fe:	4b92      	ldr	r3, [pc, #584]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800650a:	4b8f      	ldr	r3, [pc, #572]	; (8006748 <MX_GPIO_Init+0x2e4>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	4a8e      	ldr	r2, [pc, #568]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006510:	f043 0308 	orr.w	r3, r3, #8
 8006514:	6313      	str	r3, [r2, #48]	; 0x30
 8006516:	4b8c      	ldr	r3, [pc, #560]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006522:	4b89      	ldr	r3, [pc, #548]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	4a88      	ldr	r2, [pc, #544]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652c:	6313      	str	r3, [r2, #48]	; 0x30
 800652e:	4b86      	ldr	r3, [pc, #536]	; (8006748 <MX_GPIO_Init+0x2e4>)
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800653a:	2200      	movs	r2, #0
 800653c:	2110      	movs	r1, #16
 800653e:	4883      	ldr	r0, [pc, #524]	; (800674c <MX_GPIO_Init+0x2e8>)
 8006540:	f7fb f8b6 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED1_GPIO_Port, EXT_LED1_Pin, GPIO_PIN_RESET);
 8006544:	2200      	movs	r2, #0
 8006546:	2108      	movs	r1, #8
 8006548:	4881      	ldr	r0, [pc, #516]	; (8006750 <MX_GPIO_Init+0x2ec>)
 800654a:	f7fb f8b1 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800654e:	2200      	movs	r2, #0
 8006550:	f244 0181 	movw	r1, #16513	; 0x4081
 8006554:	487f      	ldr	r0, [pc, #508]	; (8006754 <MX_GPIO_Init+0x2f0>)
 8006556:	f7fb f8ab 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800655a:	2200      	movs	r2, #0
 800655c:	2140      	movs	r1, #64	; 0x40
 800655e:	487e      	ldr	r0, [pc, #504]	; (8006758 <MX_GPIO_Init+0x2f4>)
 8006560:	f7fb f8a6 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8006564:	2310      	movs	r3, #16
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006568:	2301      	movs	r3, #1
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006570:	2300      	movs	r3, #0
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8006574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006578:	4619      	mov	r1, r3
 800657a:	4874      	ldr	r0, [pc, #464]	; (800674c <MX_GPIO_Init+0x2e8>)
 800657c:	f7fa feee 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|EXT_BTN2_Pin;
 8006580:	f242 0308 	movw	r3, #8200	; 0x2008
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006586:	4b75      	ldr	r3, [pc, #468]	; (800675c <MX_GPIO_Init+0x2f8>)
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658a:	2300      	movs	r3, #0
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	4619      	mov	r1, r3
 8006594:	4872      	ldr	r0, [pc, #456]	; (8006760 <MX_GPIO_Init+0x2fc>)
 8006596:	f7fa fee1 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_DT_Pin;
 800659a:	2320      	movs	r3, #32
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800659e:	2300      	movs	r3, #0
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_DT_GPIO_Port, &GPIO_InitStruct);
 80065a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065aa:	4619      	mov	r1, r3
 80065ac:	486d      	ldr	r0, [pc, #436]	; (8006764 <MX_GPIO_Init+0x300>)
 80065ae:	f7fa fed5 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_CLK_Pin;
 80065b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065b8:	4b68      	ldr	r3, [pc, #416]	; (800675c <MX_GPIO_Init+0x2f8>)
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_CLK_GPIO_Port, &GPIO_InitStruct);
 80065c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c4:	4619      	mov	r1, r3
 80065c6:	4867      	ldr	r0, [pc, #412]	; (8006764 <MX_GPIO_Init+0x300>)
 80065c8:	f7fa fec8 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_BTN1_Pin;
 80065cc:	2301      	movs	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80065d0:	4b65      	ldr	r3, [pc, #404]	; (8006768 <MX_GPIO_Init+0x304>)
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT_BTN1_GPIO_Port, &GPIO_InitStruct);
 80065d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065dc:	4619      	mov	r1, r3
 80065de:	4860      	ldr	r0, [pc, #384]	; (8006760 <MX_GPIO_Init+0x2fc>)
 80065e0:	f7fa febc 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80065e4:	2332      	movs	r3, #50	; 0x32
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e8:	2302      	movs	r3, #2
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065f0:	2303      	movs	r3, #3
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80065f4:	230b      	movs	r3, #11
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065fc:	4619      	mov	r1, r3
 80065fe:	4858      	ldr	r0, [pc, #352]	; (8006760 <MX_GPIO_Init+0x2fc>)
 8006600:	f7fa feac 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006604:	2386      	movs	r3, #134	; 0x86
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006608:	2302      	movs	r3, #2
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660c:	2300      	movs	r3, #0
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006610:	2303      	movs	r3, #3
 8006612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006614:	230b      	movs	r3, #11
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661c:	4619      	mov	r1, r3
 800661e:	484c      	ldr	r0, [pc, #304]	; (8006750 <MX_GPIO_Init+0x2ec>)
 8006620:	f7fa fe9c 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_LED1_Pin;
 8006624:	2308      	movs	r3, #8
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006628:	2301      	movs	r3, #1
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662c:	2300      	movs	r3, #0
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006630:	2300      	movs	r3, #0
 8006632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EXT_LED1_GPIO_Port, &GPIO_InitStruct);
 8006634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006638:	4619      	mov	r1, r3
 800663a:	4845      	ldr	r0, [pc, #276]	; (8006750 <MX_GPIO_Init+0x2ec>)
 800663c:	f7fa fe8e 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8006640:	f244 0381 	movw	r3, #16513	; 0x4081
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006646:	2301      	movs	r3, #1
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664a:	2300      	movs	r3, #0
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800664e:	2300      	movs	r3, #0
 8006650:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006656:	4619      	mov	r1, r3
 8006658:	483e      	ldr	r0, [pc, #248]	; (8006754 <MX_GPIO_Init+0x2f0>)
 800665a:	f7fa fe7f 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800665e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006664:	2302      	movs	r3, #2
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800666c:	2303      	movs	r3, #3
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006670:	230b      	movs	r3, #11
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006678:	4619      	mov	r1, r3
 800667a:	4836      	ldr	r0, [pc, #216]	; (8006754 <MX_GPIO_Init+0x2f0>)
 800667c:	f7fa fe6e 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006684:	2301      	movs	r3, #1
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006688:	2300      	movs	r3, #0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800668c:	2300      	movs	r3, #0
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006694:	4619      	mov	r1, r3
 8006696:	4830      	ldr	r0, [pc, #192]	; (8006758 <MX_GPIO_Init+0x2f4>)
 8006698:	f7fa fe60 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80066a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ac:	4619      	mov	r1, r3
 80066ae:	482a      	ldr	r0, [pc, #168]	; (8006758 <MX_GPIO_Init+0x2f4>)
 80066b0:	f7fa fe54 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80066b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ba:	2302      	movs	r3, #2
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c2:	2303      	movs	r3, #3
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066c6:	230a      	movs	r3, #10
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ce:	4619      	mov	r1, r3
 80066d0:	481f      	ldr	r0, [pc, #124]	; (8006750 <MX_GPIO_Init+0x2ec>)
 80066d2:	f7fa fe43 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80066d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066dc:	2300      	movs	r3, #0
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80066e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e8:	4619      	mov	r1, r3
 80066ea:	4819      	ldr	r0, [pc, #100]	; (8006750 <MX_GPIO_Init+0x2ec>)
 80066ec:	f7fa fe36 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = guzik_Pin;
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <MX_GPIO_Init+0x2f8>)
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(guzik_GPIO_Port, &GPIO_InitStruct);
 80066fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006700:	4619      	mov	r1, r3
 8006702:	481a      	ldr	r0, [pc, #104]	; (800676c <MX_GPIO_Init+0x308>)
 8006704:	f7fa fe2a 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006708:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670e:	2302      	movs	r3, #2
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006712:	2300      	movs	r3, #0
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006716:	2303      	movs	r3, #3
 8006718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800671a:	230b      	movs	r3, #11
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800671e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006722:	4619      	mov	r1, r3
 8006724:	480c      	ldr	r0, [pc, #48]	; (8006758 <MX_GPIO_Init+0x2f4>)
 8006726:	f7fa fe19 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800672a:	2200      	movs	r2, #0
 800672c:	2100      	movs	r1, #0
 800672e:	2006      	movs	r0, #6
 8006730:	f7fa fdbb 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006734:	2006      	movs	r0, #6
 8006736:	f7fa fdd4 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	2009      	movs	r0, #9
 8006740:	f7fa fdb3 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006744:	2009      	movs	r0, #9
 8006746:	e013      	b.n	8006770 <MX_GPIO_Init+0x30c>
 8006748:	40023800 	.word	0x40023800
 800674c:	40021000 	.word	0x40021000
 8006750:	40020000 	.word	0x40020000
 8006754:	40020400 	.word	0x40020400
 8006758:	40021800 	.word	0x40021800
 800675c:	10110000 	.word	0x10110000
 8006760:	40020800 	.word	0x40020800
 8006764:	40021400 	.word	0x40021400
 8006768:	10210000 	.word	0x10210000
 800676c:	40020c00 	.word	0x40020c00
 8006770:	f7fa fdb7 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006774:	2200      	movs	r2, #0
 8006776:	2100      	movs	r1, #0
 8006778:	2017      	movs	r0, #23
 800677a:	f7fa fd96 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800677e:	2017      	movs	r0, #23
 8006780:	f7fa fdaf 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	2028      	movs	r0, #40	; 0x28
 800678a:	f7fa fd8e 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800678e:	2028      	movs	r0, #40	; 0x28
 8006790:	f7fa fda7 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 8006794:	bf00      	nop
 8006796:	3738      	adds	r7, #56	; 0x38
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x4e) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	4603      	mov	r3, r0
 80067a4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	f023 030f 	bic.w	r3, r3, #15
 80067ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	f043 030c 	orr.w	r3, r3, #12
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	f043 0308 	orr.w	r3, r3, #8
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	f043 030c 	orr.w	r3, r3, #12
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80067dc:	f107 0208 	add.w	r2, r7, #8
 80067e0:	2364      	movs	r3, #100	; 0x64
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2304      	movs	r3, #4
 80067e6:	214e      	movs	r1, #78	; 0x4e
 80067e8:	4803      	ldr	r0, [pc, #12]	; (80067f8 <lcd_send_cmd+0x5c>)
 80067ea:	f7fb f83d 	bl	8001868 <HAL_I2C_Master_Transmit>
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000234 	.word	0x20000234

080067fc <lcd_send_data>:

void lcd_send_data (char data)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af02      	add	r7, sp, #8
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	f023 030f 	bic.w	r3, r3, #15
 800680c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	f043 030d 	orr.w	r3, r3, #13
 800681a:	b2db      	uxtb	r3, r3
 800681c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	f043 0309 	orr.w	r3, r3, #9
 8006824:	b2db      	uxtb	r3, r3
 8006826:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	f043 030d 	orr.w	r3, r3, #13
 800682e:	b2db      	uxtb	r3, r3
 8006830:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	f043 0309 	orr.w	r3, r3, #9
 8006838:	b2db      	uxtb	r3, r3
 800683a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800683c:	f107 0208 	add.w	r2, r7, #8
 8006840:	2364      	movs	r3, #100	; 0x64
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2304      	movs	r3, #4
 8006846:	214e      	movs	r1, #78	; 0x4e
 8006848:	4803      	ldr	r0, [pc, #12]	; (8006858 <lcd_send_data+0x5c>)
 800684a:	f7fb f80d 	bl	8001868 <HAL_I2C_Master_Transmit>
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000234 	.word	0x20000234

0800685c <lcd_clear>:

void lcd_clear (void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8006862:	2080      	movs	r0, #128	; 0x80
 8006864:	f7ff ff9a 	bl	800679c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	e005      	b.n	800687a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800686e:	2020      	movs	r0, #32
 8006870:	f7ff ffc4 	bl	80067fc <lcd_send_data>
	for (int i=0; i<70; i++)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b45      	cmp	r3, #69	; 0x45
 800687e:	ddf6      	ble.n	800686e <lcd_clear+0x12>
	}
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
    switch (row)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <lcd_put_cur+0x16>
 8006898:	2b01      	cmp	r3, #1
 800689a:	d005      	beq.n	80068a8 <lcd_put_cur+0x20>
 800689c:	e009      	b.n	80068b2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a4:	603b      	str	r3, [r7, #0]
            break;
 80068a6:	e004      	b.n	80068b2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068ae:	603b      	str	r3, [r7, #0]
            break;
 80068b0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff ff70 	bl	800679c <lcd_send_cmd>
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <lcd_init>:


void lcd_init (void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80068c8:	2032      	movs	r0, #50	; 0x32
 80068ca:	f7fa fbf1 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80068ce:	2030      	movs	r0, #48	; 0x30
 80068d0:	f7ff ff64 	bl	800679c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80068d4:	2005      	movs	r0, #5
 80068d6:	f7fa fbeb 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80068da:	2030      	movs	r0, #48	; 0x30
 80068dc:	f7ff ff5e 	bl	800679c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80068e0:	2001      	movs	r0, #1
 80068e2:	f7fa fbe5 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80068e6:	2030      	movs	r0, #48	; 0x30
 80068e8:	f7ff ff58 	bl	800679c <lcd_send_cmd>
	HAL_Delay(10);
 80068ec:	200a      	movs	r0, #10
 80068ee:	f7fa fbdf 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80068f2:	2020      	movs	r0, #32
 80068f4:	f7ff ff52 	bl	800679c <lcd_send_cmd>
	HAL_Delay(10);
 80068f8:	200a      	movs	r0, #10
 80068fa:	f7fa fbd9 	bl	80010b0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80068fe:	2028      	movs	r0, #40	; 0x28
 8006900:	f7ff ff4c 	bl	800679c <lcd_send_cmd>
	HAL_Delay(1);
 8006904:	2001      	movs	r0, #1
 8006906:	f7fa fbd3 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800690a:	2008      	movs	r0, #8
 800690c:	f7ff ff46 	bl	800679c <lcd_send_cmd>
	HAL_Delay(1);
 8006910:	2001      	movs	r0, #1
 8006912:	f7fa fbcd 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8006916:	2001      	movs	r0, #1
 8006918:	f7ff ff40 	bl	800679c <lcd_send_cmd>
	HAL_Delay(1);
 800691c:	2001      	movs	r0, #1
 800691e:	f7fa fbc7 	bl	80010b0 <HAL_Delay>
	HAL_Delay(1);
 8006922:	2001      	movs	r0, #1
 8006924:	f7fa fbc4 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8006928:	2006      	movs	r0, #6
 800692a:	f7ff ff37 	bl	800679c <lcd_send_cmd>
	HAL_Delay(1);
 800692e:	2001      	movs	r0, #1
 8006930:	f7fa fbbe 	bl	80010b0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8006934:	200c      	movs	r0, #12
 8006936:	f7ff ff31 	bl	800679c <lcd_send_cmd>
}
 800693a:	bf00      	nop
 800693c:	bd80      	pop	{r7, pc}

0800693e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8006946:	e006      	b.n	8006956 <lcd_send_string+0x18>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff ff53 	bl	80067fc <lcd_send_data>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f4      	bne.n	8006948 <lcd_send_string+0xa>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <MX_I2C1_Init+0x74>)
 800696e:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <MX_I2C1_Init+0x78>)
 8006970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <MX_I2C1_Init+0x74>)
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <MX_I2C1_Init+0x7c>)
 8006976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006978:	4b18      	ldr	r3, [pc, #96]	; (80069dc <MX_I2C1_Init+0x74>)
 800697a:	2200      	movs	r2, #0
 800697c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <MX_I2C1_Init+0x74>)
 8006980:	2201      	movs	r2, #1
 8006982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006984:	4b15      	ldr	r3, [pc, #84]	; (80069dc <MX_I2C1_Init+0x74>)
 8006986:	2200      	movs	r2, #0
 8006988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <MX_I2C1_Init+0x74>)
 800698c:	2200      	movs	r2, #0
 800698e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006990:	4b12      	ldr	r3, [pc, #72]	; (80069dc <MX_I2C1_Init+0x74>)
 8006992:	2200      	movs	r2, #0
 8006994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <MX_I2C1_Init+0x74>)
 8006998:	2200      	movs	r2, #0
 800699a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <MX_I2C1_Init+0x74>)
 800699e:	2200      	movs	r2, #0
 80069a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80069a2:	480e      	ldr	r0, [pc, #56]	; (80069dc <MX_I2C1_Init+0x74>)
 80069a4:	f7fa fed0 	bl	8001748 <HAL_I2C_Init>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80069ae:	f000 fd61 	bl	8007474 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80069b2:	2100      	movs	r1, #0
 80069b4:	4809      	ldr	r0, [pc, #36]	; (80069dc <MX_I2C1_Init+0x74>)
 80069b6:	f7fb f9bf 	bl	8001d38 <HAL_I2CEx_ConfigAnalogFilter>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80069c0:	f000 fd58 	bl	8007474 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80069c4:	2100      	movs	r1, #0
 80069c6:	4805      	ldr	r0, [pc, #20]	; (80069dc <MX_I2C1_Init+0x74>)
 80069c8:	f7fb fa01 	bl	8001dce <HAL_I2CEx_ConfigDigitalFilter>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80069d2:	f000 fd4f 	bl	8007474 <Error_Handler>
  }

}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000234 	.word	0x20000234
 80069e0:	40005400 	.word	0x40005400
 80069e4:	00808cd2 	.word	0x00808cd2

080069e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	609a      	str	r2, [r3, #8]
 80069fc:	60da      	str	r2, [r3, #12]
 80069fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <HAL_I2C_MspInit+0x7c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d128      	bne.n	8006a5c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <HAL_I2C_MspInit+0x80>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	4a16      	ldr	r2, [pc, #88]	; (8006a68 <HAL_I2C_MspInit+0x80>)
 8006a10:	f043 0302 	orr.w	r3, r3, #2
 8006a14:	6313      	str	r3, [r2, #48]	; 0x30
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <HAL_I2C_MspInit+0x80>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a28:	2312      	movs	r3, #18
 8006a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a30:	2303      	movs	r3, #3
 8006a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006a34:	2304      	movs	r3, #4
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	480b      	ldr	r0, [pc, #44]	; (8006a6c <HAL_I2C_MspInit+0x84>)
 8006a40:	f7fa fc8c 	bl	800135c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <HAL_I2C_MspInit+0x80>)
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <HAL_I2C_MspInit+0x80>)
 8006a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <HAL_I2C_MspInit+0x80>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40005400 	.word	0x40005400
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40020400 	.word	0x40020400

08006a70 <spi_reg_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b092      	sub	sp, #72	; 0x48
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	603a      	str	r2, [r7, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	71fb      	strb	r3, [r7, #7]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	71bb      	strb	r3, [r7, #6]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK ;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	int32_t iError = BMP280_OK ;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t txarray [ SPI_BUFFER_LEN * BMP280_ADDRESS_INDEX ];
	uint8_t stringpos ;

	txarray [0] = reg_addr ;
 8006a90:	79bb      	ldrb	r3, [r7, #6]
 8006a92:	723b      	strb	r3, [r7, #8]
	 for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e011      	b.n	8006ac0 <spi_reg_write+0x50>
	txarray [ stringpos + BMP280_DATA_INDEX ] = reg_data [ stringpos ];
 8006a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006ab0:	440b      	add	r3, r1
 8006ab2:	f803 2c40 	strb.w	r2, [r3, #-64]
	 for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8006ab6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aba:	3301      	adds	r3, #1
 8006abc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	88ba      	ldrh	r2, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d8e7      	bhi.n	8006a9c <spi_reg_write+0x2c>
	}

	HAL_GPIO_WritePin (SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 8006acc:	2200      	movs	r2, #0
 8006ace:	2110      	movs	r1, #16
 8006ad0:	4813      	ldr	r0, [pc, #76]	; (8006b20 <spi_reg_write+0xb0>)
 8006ad2:	f7fa fded 	bl	80016b0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit ( &hspi4 , ( uint8_t *)(& txarray ), length *2, 100);
 8006ad6:	88bb      	ldrh	r3, [r7, #4]
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	f107 0108 	add.w	r1, r7, #8
 8006ae0:	2364      	movs	r3, #100	; 0x64
 8006ae2:	4810      	ldr	r0, [pc, #64]	; (8006b24 <spi_reg_write+0xb4>)
 8006ae4:	f7fc fab4 	bl	8003050 <HAL_SPI_Transmit>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	while ( hspi4 . State == HAL_SPI_STATE_BUSY ) {};
 8006aee:	bf00      	nop
 8006af0:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <spi_reg_write+0xb4>)
 8006af2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d0f9      	beq.n	8006af0 <spi_reg_write+0x80>
	HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 8006afc:	2201      	movs	r2, #1
 8006afe:	2110      	movs	r1, #16
 8006b00:	4807      	ldr	r0, [pc, #28]	; (8006b20 <spi_reg_write+0xb0>)
 8006b02:	f7fa fdd5 	bl	80016b0 <HAL_GPIO_WritePin>

	if ( status != HAL_OK )
 8006b06:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <spi_reg_write+0xa4>
	{
	// The BMP280 API calls for 0 return value as a success ,
	// and -1 returned as failure
	iError = ( -1);
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b12:	647b      	str	r3, [r7, #68]	; 0x44
	 }
	return ( int8_t ) iError ;
 8006b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b16:	b25b      	sxtb	r3, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3748      	adds	r7, #72	; 0x48
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40021000 	.word	0x40021000
 8006b24:	20000328 	.word	0x20000328

08006b28 <spi_reg_read>:
int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b094      	sub	sp, #80	; 0x50
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	603a      	str	r2, [r7, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
 8006b36:	460b      	mov	r3, r1
 8006b38:	71bb      	strb	r3, [r7, #6]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK ;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	 int32_t iError = BMP280_OK ;
 8006b44:	2300      	movs	r3, #0
 8006b46:	647b      	str	r3, [r7, #68]	; 0x44
	 uint8_t txarray [ SPI_BUFFER_LEN ] = {0 ,};
 8006b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	60da      	str	r2, [r3, #12]
 8006b56:	611a      	str	r2, [r3, #16]
 8006b58:	615a      	str	r2, [r3, #20]
 8006b5a:	619a      	str	r2, [r3, #24]
	uint8_t rxarray [ SPI_BUFFER_LEN ] = {0 ,};
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	609a      	str	r2, [r3, #8]
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	611a      	str	r2, [r3, #16]
 8006b6c:	615a      	str	r2, [r3, #20]
 8006b6e:	619a      	str	r2, [r3, #24]
	 uint8_t stringpos ;

	 txarray [0] = reg_addr ;
 8006b70:	79bb      	ldrb	r3, [r7, #6]
 8006b72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_RESET );
 8006b76:	2200      	movs	r2, #0
 8006b78:	2110      	movs	r1, #16
 8006b7a:	4824      	ldr	r0, [pc, #144]	; (8006c0c <spi_reg_read+0xe4>)
 8006b7c:	f7fa fd98 	bl	80016b0 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive ( &hspi4 , ( uint8_t *)(& txarray ),
 8006b80:	88bb      	ldrh	r3, [r7, #4]
 8006b82:	3301      	adds	r3, #1
 8006b84:	b298      	uxth	r0, r3
 8006b86:	f107 0208 	add.w	r2, r7, #8
 8006b8a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006b8e:	2305      	movs	r3, #5
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4603      	mov	r3, r0
 8006b94:	481e      	ldr	r0, [pc, #120]	; (8006c10 <spi_reg_read+0xe8>)
 8006b96:	f7fc fbc1 	bl	800331c <HAL_SPI_TransmitReceive>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	( uint8_t *)(& rxarray ), length +1, 5);
	while ( hspi4 . State == HAL_SPI_STATE_BUSY ) {};
 8006ba0:	bf00      	nop
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <spi_reg_read+0xe8>)
 8006ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d0f9      	beq.n	8006ba2 <spi_reg_read+0x7a>
	HAL_GPIO_WritePin ( SPI4_CS_GPIO_Port , SPI4_CS_Pin , GPIO_PIN_SET );
 8006bae:	2201      	movs	r2, #1
 8006bb0:	2110      	movs	r1, #16
 8006bb2:	4816      	ldr	r0, [pc, #88]	; (8006c0c <spi_reg_read+0xe4>)
 8006bb4:	f7fa fd7c 	bl	80016b0 <HAL_GPIO_WritePin>

	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bbe:	e011      	b.n	8006be4 <spi_reg_read+0xbc>
	 *( reg_data + stringpos ) = rxarray [ stringpos + BMP280_DATA_INDEX ];
 8006bc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	440b      	add	r3, r1
 8006bce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8006bd8:	701a      	strb	r2, [r3, #0]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8006bda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bde:	3301      	adds	r3, #1
 8006be0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	88ba      	ldrh	r2, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d8e7      	bhi.n	8006bc0 <spi_reg_read+0x98>
	 }

	 if ( status != HAL_OK )
 8006bf0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <spi_reg_read+0xd6>
	 {
	 // The BMP280 API calls for 0 return value as a success ,
	 // and -1 returned as failure
	 iError = ( -1);
 8006bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfc:	647b      	str	r3, [r7, #68]	; 0x44
	 }
	 return ( int8_t ) iError ;
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c00:	b25b      	sxtb	r3, r3
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3748      	adds	r7, #72	; 0x48
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	20000328 	.word	0x20000328

08006c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b0d1      	sub	sp, #324	; 0x144
 8006c18:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c1a:	f7fa f9eb 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c1e:	f000 fb23 	bl	8007268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c22:	f7ff fc1f 	bl	8006464 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8006c26:	f000 ff87 	bl	8007b38 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8006c2a:	f7ff fe9d 	bl	8006968 <MX_I2C1_Init>
  MX_SPI4_Init();
 8006c2e:	f000 fc3f 	bl	80074b0 <MX_SPI4_Init>
  MX_TIM3_Init();
 8006c32:	f000 fe21 	bl	8007878 <MX_TIM3_Init>
  MX_TIM1_Init();
 8006c36:	f000 fdc5 	bl	80077c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8006c3a:	488a      	ldr	r0, [pc, #552]	; (8006e64 <main+0x250>)
 8006c3c:	f7fc feca 	bl	80039d4 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8006c40:	f7ff fe40 	bl	80068c4 <lcd_init>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8006c44:	213c      	movs	r1, #60	; 0x3c
 8006c46:	4888      	ldr	r0, [pc, #544]	; (8006e68 <main+0x254>)
 8006c48:	f7fc fffa 	bl	8003c40 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8006c4c:	2108      	movs	r1, #8
 8006c4e:	4885      	ldr	r0, [pc, #532]	; (8006e64 <main+0x250>)
 8006c50:	f7fc ff20 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006c54:	2100      	movs	r1, #0
 8006c56:	4883      	ldr	r0, [pc, #524]	; (8006e64 <main+0x250>)
 8006c58:	f7fc ff1c 	bl	8003a94 <HAL_TIM_PWM_Start>

  /* Map the delay function pointer with the function responsible for implementing the delay */
      bmp.delay_ms = HAL_Delay;
 8006c5c:	4b83      	ldr	r3, [pc, #524]	; (8006e6c <main+0x258>)
 8006c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

      /* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
      bmp.dev_id = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd

      /* Select the interface mode as I2C */
      bmp.intf = BMP280_SPI_INTF;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

      /* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
      bmp.read = spi_reg_read;
 8006c6e:	4b80      	ldr	r3, [pc, #512]	; (8006e70 <main+0x25c>)
 8006c70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
      bmp.write = spi_reg_write;
 8006c74:	4b7f      	ldr	r3, [pc, #508]	; (8006e74 <main+0x260>)
 8006c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      rslt = bmp280_init(&bmp);
 8006c7a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe ff9e 	bl	8005bc0 <bmp280_init>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

      rslt = bmp280_get_config(&conf, &bmp);\
 8006c8a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8006c8e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fff9 	bl	8005c8c <bmp280_get_config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f


      	  /* configuring the temperature oversampling, filter coefficient and output data rate */
      	 /* Overwrite the desired settings */
      	conf.filter = BMP280_FILTER_COEFF_2;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

      	/* Temperature oversampling set at 4x */
      	conf.os_temp = BMP280_OS_4X;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4

		/* Pressure over sampling none (disabling pressure measurement) */
		conf.os_pres = BMP280_OS_4X;
 8006cac:	2303      	movs	r3, #3
 8006cae:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5

		/* Setting the output data rate as 1HZ(1000ms) */
		conf.odr = BMP280_ODR_1000_MS;
 8006cb2:	2305      	movs	r3, #5
 8006cb4:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
		rslt = bmp280_set_config(&conf, &bmp);
 8006cb8:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8006cbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff f834 	bl	8005d30 <bmp280_set_config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f


		/* Always set the power mode after setting the configuration */
		rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8006cce:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	2003      	movs	r0, #3
 8006cd6:	f7ff f83a 	bl	8005d4e <bmp280_set_power_mode>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f


          /* PID */
		  /*inicjalizacja regulatora*/
          arm_pid_instance_f32 pid;
          arm_pid_init_f32(&pid, 1);
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fa f94f 	bl	8000f88 <arm_pid_init_f32>
  while (1)
  {


	  /* Reading the raw data from sensor */
		        rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8006cea:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8006cee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff f849 	bl	8005d8c <bmp280_get_uncomp_data>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

		        /* Getting the 32 bit compensated temperature */
		        rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp);
 8006d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d04:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8006d08:	4619      	mov	r1, r3
 8006d0a:	485b      	ldr	r0, [pc, #364]	; (8006e78 <main+0x264>)
 8006d0c:	f7ff f88d 	bl	8005e2a <bmp280_get_comp_temp_32bit>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f


		        /* Getting the compensated temperature as floating point value */
		        rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
 8006d16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d1a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4856      	ldr	r0, [pc, #344]	; (8006e7c <main+0x268>)
 8006d22:	f7ff f8ed 	bl	8005f00 <bmp280_get_comp_temp_double>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

		        /*obliczanie uchybu*/

		        actual_temp=temp; // aktualna temperatura = temperatura odczytana z czujnika
 8006d2c:	4b53      	ldr	r3, [pc, #332]	; (8006e7c <main+0x268>)
 8006d2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d32:	4618      	mov	r0, r3
 8006d34:	4621      	mov	r1, r4
 8006d36:	f7f9 ff57 	bl	8000be8 <__aeabi_d2f>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b50      	ldr	r3, [pc, #320]	; (8006e80 <main+0x26c>)
 8006d3e:	601a      	str	r2, [r3, #0]

		        error= (set_temp-actual_temp); // uchyb
 8006d40:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <main+0x270>)
 8006d42:	ed93 7a00 	vldr	s14, [r3]
 8006d46:	4b4e      	ldr	r3, [pc, #312]	; (8006e80 <main+0x26c>)
 8006d48:	edd3 7a00 	vldr	s15, [r3]
 8006d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d50:	4b4d      	ldr	r3, [pc, #308]	; (8006e88 <main+0x274>)
 8006d52:	edc3 7a00 	vstr	s15, [r3]


		        pControl=arm_pid_f32(&pid, error); // wartosc zwracana przez regulator
 8006d56:	4b4c      	ldr	r3, [pc, #304]	; (8006e88 <main+0x274>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006d60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006d64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d68:	ed93 7a00 	vldr	s14, [r3]
 8006d6c:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8006d70:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006d74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d78:	edd3 6a01 	vldr	s13, [r3, #4]
 8006d7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d80:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006d88:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006d8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d90:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d98:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006da4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006da8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db0:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130

    /* Update state */
    S->state[1] = S->state[0];
 8006db4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006dbe:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006dc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006dc4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006dc8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006dca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006dce:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006dd2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8006dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006dd8:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <main+0x278>)
 8006dda:	6013      	str	r3, [r2, #0]


		  temp_size=sprintf(&buffer, "TEMP: %f \n\r",temp);
 8006ddc:	4b27      	ldr	r3, [pc, #156]	; (8006e7c <main+0x268>)
 8006dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006de2:	461a      	mov	r2, r3
 8006de4:	4623      	mov	r3, r4
 8006de6:	492a      	ldr	r1, [pc, #168]	; (8006e90 <main+0x27c>)
 8006de8:	482a      	ldr	r0, [pc, #168]	; (8006e94 <main+0x280>)
 8006dea:	f001 fbdd 	bl	80085a8 <siprintf>
 8006dee:	4603      	mov	r3, r0
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4b29      	ldr	r3, [pc, #164]	; (8006e98 <main+0x284>)
 8006df4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, temp_size, 0xffff); // wysylanie aktualnej temperatury do terminala
 8006df6:	4b28      	ldr	r3, [pc, #160]	; (8006e98 <main+0x284>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e00:	4924      	ldr	r1, [pc, #144]	; (8006e94 <main+0x280>)
 8006e02:	4826      	ldr	r0, [pc, #152]	; (8006e9c <main+0x288>)
 8006e04:	f7fd fefc 	bl	8004c00 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart3, &msg, 2);//nasłuchiwanie
 8006e08:	2202      	movs	r2, #2
 8006e0a:	4925      	ldr	r1, [pc, #148]	; (8006ea0 <main+0x28c>)
 8006e0c:	4823      	ldr	r0, [pc, #140]	; (8006e9c <main+0x288>)
 8006e0e:	f7fd ff89 	bl	8004d24 <HAL_UART_Receive_IT>

		  /* ograniczenie w y p e n i e n i a */
		  if(pControl<0)
 8006e12:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <main+0x278>)
 8006e14:	edd3 7a00 	vldr	s15, [r3]
 8006e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e20:	d503      	bpl.n	8006e2a <main+0x216>
		  {
			  pControl=0;
 8006e22:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <main+0x278>)
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
		  }
		  if(pControl >1000)
 8006e2a:	4b18      	ldr	r3, [pc, #96]	; (8006e8c <main+0x278>)
 8006e2c:	edd3 7a00 	vldr	s15, [r3]
 8006e30:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006ea4 <main+0x290>
 8006e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3c:	dd02      	ble.n	8006e44 <main+0x230>
		  {
			  pControl=1000;
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <main+0x278>)
 8006e40:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <main+0x294>)
 8006e42:	601a      	str	r2, [r3, #0]
		  }
		  duty=pControl; // wypelnienie zalezne od wartosci zwracanej przez regulator
 8006e44:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <main+0x278>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a18      	ldr	r2, [pc, #96]	; (8006eac <main+0x298>)
 8006e4a:	6013      	str	r3, [r2, #0]

		  //regulacja dwupolozeniowa wentylatora
		  if(error<0)
 8006e4c:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <main+0x274>)
 8006e4e:	edd3 7a00 	vldr	s15, [r3]
 8006e52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	d52b      	bpl.n	8006eb4 <main+0x2a0>
		  {
			  duty_fan=1000;
 8006e5c:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <main+0x29c>)
 8006e5e:	4a12      	ldr	r2, [pc, #72]	; (8006ea8 <main+0x294>)
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e02b      	b.n	8006ebc <main+0x2a8>
 8006e64:	2000038c 	.word	0x2000038c
 8006e68:	200003cc 	.word	0x200003cc
 8006e6c:	080010b1 	.word	0x080010b1
 8006e70:	08006b29 	.word	0x08006b29
 8006e74:	08006a71 	.word	0x08006a71
 8006e78:	20000318 	.word	0x20000318
 8006e7c:	200002a0 	.word	0x200002a0
 8006e80:	2000020c 	.word	0x2000020c
 8006e84:	20000008 	.word	0x20000008
 8006e88:	20000204 	.word	0x20000204
 8006e8c:	20000208 	.word	0x20000208
 8006e90:	08009eb4 	.word	0x08009eb4
 8006e94:	200002b0 	.word	0x200002b0
 8006e98:	20000280 	.word	0x20000280
 8006e9c:	2000040c 	.word	0x2000040c
 8006ea0:	20000284 	.word	0x20000284
 8006ea4:	447a0000 	.word	0x447a0000
 8006ea8:	447a0000 	.word	0x447a0000
 8006eac:	20000320 	.word	0x20000320
 8006eb0:	2000031c 	.word	0x2000031c
		  }
		  else
			  duty_fan=0;
 8006eb4:	4bb3      	ldr	r3, [pc, #716]	; (8007184 <main+0x570>)
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,duty_fan);// PWM wentylatora
 8006ebc:	4bb1      	ldr	r3, [pc, #708]	; (8007184 <main+0x570>)
 8006ebe:	edd3 7a00 	vldr	s15, [r3]
 8006ec2:	4bb1      	ldr	r3, [pc, #708]	; (8007188 <main+0x574>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eca:	ee17 2a90 	vmov	r2, s15
 8006ece:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,duty);// PWM rezystor
 8006ed0:	4bae      	ldr	r3, [pc, #696]	; (800718c <main+0x578>)
 8006ed2:	edd3 7a00 	vldr	s15, [r3]
 8006ed6:	4bac      	ldr	r3, [pc, #688]	; (8007188 <main+0x574>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ede:	ee17 2a90 	vmov	r2, s15
 8006ee2:	63da      	str	r2, [r3, #60]	; 0x3c


	/********************LCD**************/

	//filtrowanie odczytu z przycisku
	 if(zlicz_przycisk>zlicz_poprzednie)
 8006ee4:	4baa      	ldr	r3, [pc, #680]	; (8007190 <main+0x57c>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4baa      	ldr	r3, [pc, #680]	; (8007194 <main+0x580>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	dd0e      	ble.n	8006f0e <main+0x2fa>
	 {
		  menu_activated++;
 8006ef0:	4ba9      	ldr	r3, [pc, #676]	; (8007198 <main+0x584>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	4aa8      	ldr	r2, [pc, #672]	; (8007198 <main+0x584>)
 8006ef8:	6013      	str	r3, [r2, #0]
		  if(menu_activated>=5)
 8006efa:	4ba7      	ldr	r3, [pc, #668]	; (8007198 <main+0x584>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	dd02      	ble.n	8006f08 <main+0x2f4>
		  {
			  menu_activated=0;
 8006f02:	4ba5      	ldr	r3, [pc, #660]	; (8007198 <main+0x584>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
		  }
		  HAL_Delay(20);
 8006f08:	2014      	movs	r0, #20
 8006f0a:	f7fa f8d1 	bl	80010b0 <HAL_Delay>
	 }
		  zlicz_poprzednie=zlicz_przycisk;
 8006f0e:	4ba0      	ldr	r3, [pc, #640]	; (8007190 <main+0x57c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4aa0      	ldr	r2, [pc, #640]	; (8007194 <main+0x580>)
 8006f14:	6013      	str	r3, [r2, #0]

		  /* strona glowna menu */
	if(menu_activated==0)
 8006f16:	4ba0      	ldr	r3, [pc, #640]	; (8007198 <main+0x584>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d12c      	bne.n	8006f78 <main+0x364>
	{
		lcd_clear();
 8006f1e:	f7ff fc9d 	bl	800685c <lcd_clear>
		lcd_put_cur(0, 2);
 8006f22:	2102      	movs	r1, #2
 8006f24:	2000      	movs	r0, #0
 8006f26:	f7ff fcaf 	bl	8006888 <lcd_put_cur>
		lcd_send_string("PID control");
 8006f2a:	489c      	ldr	r0, [pc, #624]	; (800719c <main+0x588>)
 8006f2c:	f7ff fd07 	bl	800693e <lcd_send_string>

		lcd_put_cur(1, 0);
 8006f30:	2100      	movs	r1, #0
 8006f32:	2001      	movs	r0, #1
 8006f34:	f7ff fca8 	bl	8006888 <lcd_put_cur>
		sprintf(zdanie2,"S:%.1f", set_temp);
 8006f38:	4b99      	ldr	r3, [pc, #612]	; (80071a0 <main+0x58c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7f9 fb23 	bl	8000588 <__aeabi_f2d>
 8006f42:	4603      	mov	r3, r0
 8006f44:	460c      	mov	r4, r1
 8006f46:	461a      	mov	r2, r3
 8006f48:	4623      	mov	r3, r4
 8006f4a:	4996      	ldr	r1, [pc, #600]	; (80071a4 <main+0x590>)
 8006f4c:	4896      	ldr	r0, [pc, #600]	; (80071a8 <main+0x594>)
 8006f4e:	f001 fb2b 	bl	80085a8 <siprintf>
		lcd_send_string(zdanie2);
 8006f52:	4895      	ldr	r0, [pc, #596]	; (80071a8 <main+0x594>)
 8006f54:	f7ff fcf3 	bl	800693e <lcd_send_string>

		lcd_put_cur(1, 8);
 8006f58:	2108      	movs	r1, #8
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	f7ff fc94 	bl	8006888 <lcd_put_cur>
		sprintf(zdanie2,"R:%.2f",temp);
 8006f60:	4b92      	ldr	r3, [pc, #584]	; (80071ac <main+0x598>)
 8006f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f66:	461a      	mov	r2, r3
 8006f68:	4623      	mov	r3, r4
 8006f6a:	4991      	ldr	r1, [pc, #580]	; (80071b0 <main+0x59c>)
 8006f6c:	488e      	ldr	r0, [pc, #568]	; (80071a8 <main+0x594>)
 8006f6e:	f001 fb1b 	bl	80085a8 <siprintf>
		lcd_send_string(zdanie2);
 8006f72:	488d      	ldr	r0, [pc, #564]	; (80071a8 <main+0x594>)
 8006f74:	f7ff fce3 	bl	800693e <lcd_send_string>

	  //koniec strony glownej
	}

	/* pierwsza strona menu , set temperature */
	  if(menu_activated==1)
 8006f78:	4b87      	ldr	r3, [pc, #540]	; (8007198 <main+0x584>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d146      	bne.n	800700e <main+0x3fa>
	  {
		  lcd_clear();
 8006f80:	f7ff fc6c 	bl	800685c <lcd_clear>
		  lcd_put_cur(0, 0);
 8006f84:	2100      	movs	r1, #0
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7ff fc7e 	bl	8006888 <lcd_put_cur>
		  lcd_send_string("Set temperature:");
 8006f8c:	4889      	ldr	r0, [pc, #548]	; (80071b4 <main+0x5a0>)
 8006f8e:	f7ff fcd6 	bl	800693e <lcd_send_string>

		  sprintf(zdanie2,"S:%.1f", set_temp);
 8006f92:	4b83      	ldr	r3, [pc, #524]	; (80071a0 <main+0x58c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7f9 faf6 	bl	8000588 <__aeabi_f2d>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	497f      	ldr	r1, [pc, #508]	; (80071a4 <main+0x590>)
 8006fa6:	4880      	ldr	r0, [pc, #512]	; (80071a8 <main+0x594>)
 8006fa8:	f001 fafe 	bl	80085a8 <siprintf>
		  lcd_put_cur(1, 6);
 8006fac:	2106      	movs	r1, #6
 8006fae:	2001      	movs	r0, #1
 8006fb0:	f7ff fc6a 	bl	8006888 <lcd_put_cur>
		  lcd_send_string(zdanie2);
 8006fb4:	487c      	ldr	r0, [pc, #496]	; (80071a8 <main+0x594>)
 8006fb6:	f7ff fcc2 	bl	800693e <lcd_send_string>

		  /*obsluga enkodera*/

		  		stan_obecny_ENC=htim1.Instance->CNT;// obecna pozycja enkodera
 8006fba:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <main+0x5a4>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	4b7e      	ldr	r3, [pc, #504]	; (80071bc <main+0x5a8>)
 8006fc4:	701a      	strb	r2, [r3, #0]


		  			 if(stan_poprzedni_ENC<stan_obecny_ENC)
 8006fc6:	4b7e      	ldr	r3, [pc, #504]	; (80071c0 <main+0x5ac>)
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	4b7c      	ldr	r3, [pc, #496]	; (80071bc <main+0x5a8>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d209      	bcs.n	8006fe6 <main+0x3d2>
		  			 {
		  			 	set_temp-=1;
 8006fd2:	4b73      	ldr	r3, [pc, #460]	; (80071a0 <main+0x58c>)
 8006fd4:	edd3 7a00 	vldr	s15, [r3]
 8006fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fe0:	4b6f      	ldr	r3, [pc, #444]	; (80071a0 <main+0x58c>)
 8006fe2:	edc3 7a00 	vstr	s15, [r3]
		  			 }
		  			 if(stan_poprzedni_ENC>stan_obecny_ENC)
 8006fe6:	4b76      	ldr	r3, [pc, #472]	; (80071c0 <main+0x5ac>)
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	4b74      	ldr	r3, [pc, #464]	; (80071bc <main+0x5a8>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d909      	bls.n	8007006 <main+0x3f2>
		  			 {
		  			 	set_temp+=1;
 8006ff2:	4b6b      	ldr	r3, [pc, #428]	; (80071a0 <main+0x58c>)
 8006ff4:	edd3 7a00 	vldr	s15, [r3]
 8006ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ffc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007000:	4b67      	ldr	r3, [pc, #412]	; (80071a0 <main+0x58c>)
 8007002:	edc3 7a00 	vstr	s15, [r3]
		  			 }
		  			 stan_poprzedni_ENC=stan_obecny_ENC; // zapamietanie poprzedniego stanu enkodera
 8007006:	4b6d      	ldr	r3, [pc, #436]	; (80071bc <main+0x5a8>)
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	4b6d      	ldr	r3, [pc, #436]	; (80071c0 <main+0x5ac>)
 800700c:	701a      	strb	r2, [r3, #0]
	  }

	  /* druga strona menu , set kp */

	  if(menu_activated==2)
 800700e:	4b62      	ldr	r3, [pc, #392]	; (8007198 <main+0x584>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d146      	bne.n	80070a4 <main+0x490>
	  {
			  lcd_clear();
 8007016:	f7ff fc21 	bl	800685c <lcd_clear>
			  lcd_put_cur(0, 0);
 800701a:	2100      	movs	r1, #0
 800701c:	2000      	movs	r0, #0
 800701e:	f7ff fc33 	bl	8006888 <lcd_put_cur>
			  lcd_send_string("Set Kp value:");
 8007022:	4868      	ldr	r0, [pc, #416]	; (80071c4 <main+0x5b0>)
 8007024:	f7ff fc8b 	bl	800693e <lcd_send_string>

			  sprintf(zdanie2, "Kp:%.1f", pid.Kp);
 8007028:	463b      	mov	r3, r7
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 faab 	bl	8000588 <__aeabi_f2d>
 8007032:	4603      	mov	r3, r0
 8007034:	460c      	mov	r4, r1
 8007036:	461a      	mov	r2, r3
 8007038:	4623      	mov	r3, r4
 800703a:	4963      	ldr	r1, [pc, #396]	; (80071c8 <main+0x5b4>)
 800703c:	485a      	ldr	r0, [pc, #360]	; (80071a8 <main+0x594>)
 800703e:	f001 fab3 	bl	80085a8 <siprintf>
			  lcd_put_cur(1, 6);
 8007042:	2106      	movs	r1, #6
 8007044:	2001      	movs	r0, #1
 8007046:	f7ff fc1f 	bl	8006888 <lcd_put_cur>
			  lcd_send_string(zdanie2);
 800704a:	4857      	ldr	r0, [pc, #348]	; (80071a8 <main+0x594>)
 800704c:	f7ff fc77 	bl	800693e <lcd_send_string>

			  /*obsluga enkodera*/

			  stan_obecny_ENC=htim1.Instance->CNT;
 8007050:	4b59      	ldr	r3, [pc, #356]	; (80071b8 <main+0x5a4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	b2da      	uxtb	r2, r3
 8007058:	4b58      	ldr	r3, [pc, #352]	; (80071bc <main+0x5a8>)
 800705a:	701a      	strb	r2, [r3, #0]

			 	 if(stan_poprzedni_ENC<stan_obecny_ENC)
 800705c:	4b58      	ldr	r3, [pc, #352]	; (80071c0 <main+0x5ac>)
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	4b56      	ldr	r3, [pc, #344]	; (80071bc <main+0x5a8>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d209      	bcs.n	800707c <main+0x468>
			 	 {
			 	 	set_kp-=10;
 8007068:	4b58      	ldr	r3, [pc, #352]	; (80071cc <main+0x5b8>)
 800706a:	edd3 7a00 	vldr	s15, [r3]
 800706e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007076:	4b55      	ldr	r3, [pc, #340]	; (80071cc <main+0x5b8>)
 8007078:	edc3 7a00 	vstr	s15, [r3]
			 	 }
			 	 if(stan_poprzedni_ENC>stan_obecny_ENC)
 800707c:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <main+0x5ac>)
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	4b4e      	ldr	r3, [pc, #312]	; (80071bc <main+0x5a8>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d909      	bls.n	800709c <main+0x488>
			 	 {
			 	 	set_kp+=10;
 8007088:	4b50      	ldr	r3, [pc, #320]	; (80071cc <main+0x5b8>)
 800708a:	edd3 7a00 	vldr	s15, [r3]
 800708e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007096:	4b4d      	ldr	r3, [pc, #308]	; (80071cc <main+0x5b8>)
 8007098:	edc3 7a00 	vstr	s15, [r3]
			 	 }
			 	 stan_poprzedni_ENC=stan_obecny_ENC;
 800709c:	4b47      	ldr	r3, [pc, #284]	; (80071bc <main+0x5a8>)
 800709e:	781a      	ldrb	r2, [r3, #0]
 80070a0:	4b47      	ldr	r3, [pc, #284]	; (80071c0 <main+0x5ac>)
 80070a2:	701a      	strb	r2, [r3, #0]
	  }
	  /* trzecia strona menu , set Ki */
	  	  if(menu_activated==3)
 80070a4:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <main+0x584>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d146      	bne.n	800713a <main+0x526>
	  	  {
	  			lcd_clear();
 80070ac:	f7ff fbd6 	bl	800685c <lcd_clear>
	  			lcd_put_cur(0, 0);
 80070b0:	2100      	movs	r1, #0
 80070b2:	2000      	movs	r0, #0
 80070b4:	f7ff fbe8 	bl	8006888 <lcd_put_cur>
	  			lcd_send_string("Set Ki value:");
 80070b8:	4845      	ldr	r0, [pc, #276]	; (80071d0 <main+0x5bc>)
 80070ba:	f7ff fc40 	bl	800693e <lcd_send_string>

	  			sprintf(zdanie2, "Ki:%.1f", pid.Ki);
 80070be:	463b      	mov	r3, r7
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 fa60 	bl	8000588 <__aeabi_f2d>
 80070c8:	4603      	mov	r3, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	461a      	mov	r2, r3
 80070ce:	4623      	mov	r3, r4
 80070d0:	4940      	ldr	r1, [pc, #256]	; (80071d4 <main+0x5c0>)
 80070d2:	4835      	ldr	r0, [pc, #212]	; (80071a8 <main+0x594>)
 80070d4:	f001 fa68 	bl	80085a8 <siprintf>
	  			lcd_put_cur(1, 6);
 80070d8:	2106      	movs	r1, #6
 80070da:	2001      	movs	r0, #1
 80070dc:	f7ff fbd4 	bl	8006888 <lcd_put_cur>
	  			lcd_send_string(zdanie2);
 80070e0:	4831      	ldr	r0, [pc, #196]	; (80071a8 <main+0x594>)
 80070e2:	f7ff fc2c 	bl	800693e <lcd_send_string>

	  			 /*obsluga enkodera*/
	  			stan_obecny_ENC=htim1.Instance->CNT;
 80070e6:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <main+0x5a4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b33      	ldr	r3, [pc, #204]	; (80071bc <main+0x5a8>)
 80070f0:	701a      	strb	r2, [r3, #0]

	  			 if(stan_poprzedni_ENC<stan_obecny_ENC)
 80070f2:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <main+0x5ac>)
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	4b31      	ldr	r3, [pc, #196]	; (80071bc <main+0x5a8>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d209      	bcs.n	8007112 <main+0x4fe>
	  			 {
	  				 set_ki-=1;
 80070fe:	4b36      	ldr	r3, [pc, #216]	; (80071d8 <main+0x5c4>)
 8007100:	edd3 7a00 	vldr	s15, [r3]
 8007104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800710c:	4b32      	ldr	r3, [pc, #200]	; (80071d8 <main+0x5c4>)
 800710e:	edc3 7a00 	vstr	s15, [r3]
	  			 }
	  			 if(stan_poprzedni_ENC>stan_obecny_ENC)
 8007112:	4b2b      	ldr	r3, [pc, #172]	; (80071c0 <main+0x5ac>)
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	4b29      	ldr	r3, [pc, #164]	; (80071bc <main+0x5a8>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d909      	bls.n	8007132 <main+0x51e>
	  			 {
	  				 set_ki+=1;
 800711e:	4b2e      	ldr	r3, [pc, #184]	; (80071d8 <main+0x5c4>)
 8007120:	edd3 7a00 	vldr	s15, [r3]
 8007124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800712c:	4b2a      	ldr	r3, [pc, #168]	; (80071d8 <main+0x5c4>)
 800712e:	edc3 7a00 	vstr	s15, [r3]
	  			 }
	  			 stan_poprzedni_ENC=stan_obecny_ENC;
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <main+0x5a8>)
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <main+0x5ac>)
 8007138:	701a      	strb	r2, [r3, #0]
	  	  }

	  	/* czwarta strona menu , set Kd */
	  	 if(menu_activated==4)
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <main+0x584>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d178      	bne.n	8007234 <main+0x620>
	  	 {
	  		lcd_clear();
 8007142:	f7ff fb8b 	bl	800685c <lcd_clear>
	  		lcd_put_cur(0, 0);
 8007146:	2100      	movs	r1, #0
 8007148:	2000      	movs	r0, #0
 800714a:	f7ff fb9d 	bl	8006888 <lcd_put_cur>
	  		lcd_send_string("Set Kd value:");
 800714e:	4823      	ldr	r0, [pc, #140]	; (80071dc <main+0x5c8>)
 8007150:	f7ff fbf5 	bl	800693e <lcd_send_string>

	  		sprintf(zdanie2, "Kd:%.1f", pid.Kd);
 8007154:	463b      	mov	r3, r7
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	4618      	mov	r0, r3
 800715a:	f7f9 fa15 	bl	8000588 <__aeabi_f2d>
 800715e:	4603      	mov	r3, r0
 8007160:	460c      	mov	r4, r1
 8007162:	461a      	mov	r2, r3
 8007164:	4623      	mov	r3, r4
 8007166:	491e      	ldr	r1, [pc, #120]	; (80071e0 <main+0x5cc>)
 8007168:	480f      	ldr	r0, [pc, #60]	; (80071a8 <main+0x594>)
 800716a:	f001 fa1d 	bl	80085a8 <siprintf>
	  		lcd_put_cur(1, 6);
 800716e:	2106      	movs	r1, #6
 8007170:	2001      	movs	r0, #1
 8007172:	f7ff fb89 	bl	8006888 <lcd_put_cur>
	  		lcd_send_string(zdanie2);
 8007176:	480c      	ldr	r0, [pc, #48]	; (80071a8 <main+0x594>)
 8007178:	f7ff fbe1 	bl	800693e <lcd_send_string>

	  		/*obsluga enkodera*/
	  		stan_obecny_ENC=htim1.Instance->CNT;
 800717c:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <main+0x5a4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	e030      	b.n	80071e4 <main+0x5d0>
 8007182:	bf00      	nop
 8007184:	2000031c 	.word	0x2000031c
 8007188:	2000038c 	.word	0x2000038c
 800718c:	20000320 	.word	0x20000320
 8007190:	2000021c 	.word	0x2000021c
 8007194:	20000220 	.word	0x20000220
 8007198:	20000210 	.word	0x20000210
 800719c:	08009ec0 	.word	0x08009ec0
 80071a0:	20000008 	.word	0x20000008
 80071a4:	08009ecc 	.word	0x08009ecc
 80071a8:	200002a8 	.word	0x200002a8
 80071ac:	200002a0 	.word	0x200002a0
 80071b0:	08009ed4 	.word	0x08009ed4
 80071b4:	08009edc 	.word	0x08009edc
 80071b8:	200003cc 	.word	0x200003cc
 80071bc:	20000218 	.word	0x20000218
 80071c0:	20000219 	.word	0x20000219
 80071c4:	08009ef0 	.word	0x08009ef0
 80071c8:	08009f00 	.word	0x08009f00
 80071cc:	2000000c 	.word	0x2000000c
 80071d0:	08009f08 	.word	0x08009f08
 80071d4:	08009f18 	.word	0x08009f18
 80071d8:	20000010 	.word	0x20000010
 80071dc:	08009f20 	.word	0x08009f20
 80071e0:	08009f30 	.word	0x08009f30
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <main+0x640>)
 80071ea:	701a      	strb	r2, [r3, #0]
	  		if(stan_poprzedni_ENC<stan_obecny_ENC)
 80071ec:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <main+0x644>)
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	4b18      	ldr	r3, [pc, #96]	; (8007254 <main+0x640>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d209      	bcs.n	800720c <main+0x5f8>
	  		  {
	  		 	 set_kd-=1;
 80071f8:	4b18      	ldr	r3, [pc, #96]	; (800725c <main+0x648>)
 80071fa:	edd3 7a00 	vldr	s15, [r3]
 80071fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <main+0x648>)
 8007208:	edc3 7a00 	vstr	s15, [r3]
	  		  }
	  		if(stan_poprzedni_ENC>stan_obecny_ENC)
 800720c:	4b12      	ldr	r3, [pc, #72]	; (8007258 <main+0x644>)
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	4b10      	ldr	r3, [pc, #64]	; (8007254 <main+0x640>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d909      	bls.n	800722c <main+0x618>
	  		  {
	  			set_kd+=1;
 8007218:	4b10      	ldr	r3, [pc, #64]	; (800725c <main+0x648>)
 800721a:	edd3 7a00 	vldr	s15, [r3]
 800721e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <main+0x648>)
 8007228:	edc3 7a00 	vstr	s15, [r3]
	  		  }
	  		 stan_poprzedni_ENC=stan_obecny_ENC;
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <main+0x640>)
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <main+0x644>)
 8007232:	701a      	strb	r2, [r3, #0]
	  	 }
	  	//przypisanie zmian do pid.k

	  		 pid.Kp=set_kp;
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <main+0x64c>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	463b      	mov	r3, r7
 800723a:	619a      	str	r2, [r3, #24]
	  		  pid.Kd=set_kd;
 800723c:	4b07      	ldr	r3, [pc, #28]	; (800725c <main+0x648>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	463b      	mov	r3, r7
 8007242:	621a      	str	r2, [r3, #32]
	  		  pid.Ki=set_ki;
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <main+0x650>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	463b      	mov	r3, r7
 800724a:	61da      	str	r2, [r3, #28]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(250); // Main loop delay
 800724c:	20fa      	movs	r0, #250	; 0xfa
 800724e:	f7f9 ff2f 	bl	80010b0 <HAL_Delay>
		        rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8007252:	e54a      	b.n	8006cea <main+0xd6>
 8007254:	20000218 	.word	0x20000218
 8007258:	20000219 	.word	0x20000219
 800725c:	20000214 	.word	0x20000214
 8007260:	2000000c 	.word	0x2000000c
 8007264:	20000010 	.word	0x20000010

08007268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b0b4      	sub	sp, #208	; 0xd0
 800726c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800726e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007272:	2230      	movs	r2, #48	; 0x30
 8007274:	2100      	movs	r1, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fd32 	bl	8007ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800727c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	609a      	str	r2, [r3, #8]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800728c:	f107 0308 	add.w	r3, r7, #8
 8007290:	2284      	movs	r2, #132	; 0x84
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fd23 	bl	8007ce0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800729a:	f7fa fde5 	bl	8001e68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800729e:	4b37      	ldr	r3, [pc, #220]	; (800737c <SystemClock_Config+0x114>)
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	4a36      	ldr	r2, [pc, #216]	; (800737c <SystemClock_Config+0x114>)
 80072a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a8:	6413      	str	r3, [r2, #64]	; 0x40
 80072aa:	4b34      	ldr	r3, [pc, #208]	; (800737c <SystemClock_Config+0x114>)
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80072b6:	4b32      	ldr	r3, [pc, #200]	; (8007380 <SystemClock_Config+0x118>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80072be:	4a30      	ldr	r2, [pc, #192]	; (8007380 <SystemClock_Config+0x118>)
 80072c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b2e      	ldr	r3, [pc, #184]	; (8007380 <SystemClock_Config+0x118>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80072d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80072dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072e0:	2302      	movs	r3, #2
 80072e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80072e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80072ee:	2304      	movs	r3, #4
 80072f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80072f4:	2348      	movs	r3, #72	; 0x48
 80072f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80072fa:	2302      	movs	r3, #2
 80072fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8007300:	2303      	movs	r3, #3
 8007302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800730a:	4618      	mov	r0, r3
 800730c:	f7fa fdbc 	bl	8001e88 <HAL_RCC_OscConfig>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007316:	f000 f8ad 	bl	8007474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800731a:	230f      	movs	r3, #15
 800731c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007320:	2302      	movs	r3, #2
 8007322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007326:	2300      	movs	r3, #0
 8007328:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800732c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007334:	2300      	movs	r3, #0
 8007336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800733a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f7fb f811 	bl	8002368 <HAL_RCC_ClockConfig>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800734c:	f000 f892 	bl	8007474 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8007350:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8007354:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007356:	2300      	movs	r3, #0
 8007358:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800735a:	2300      	movs	r3, #0
 800735c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	4618      	mov	r0, r3
 8007364:	f7fb f9f4 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800736e:	f000 f881 	bl	8007474 <Error_Handler>
  }
}
 8007372:	bf00      	nop
 8007374:	37d0      	adds	r7, #208	; 0xd0
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40023800 	.word	0x40023800
 8007380:	40007000 	.word	0x40007000

08007384 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *htim)
{/* konwersja zadanej temperatury z terminala */
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	char value1[2];

	value1[0]=msg[0];
 800738c:	4b28      	ldr	r3, [pc, #160]	; (8007430 <HAL_UART_RxCpltCallback+0xac>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	733b      	strb	r3, [r7, #12]
	value1[1]=msg[1];
 8007392:	4b27      	ldr	r3, [pc, #156]	; (8007430 <HAL_UART_RxCpltCallback+0xac>)
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	737b      	strb	r3, [r7, #13]
	set_temp_interrupt=atoi(value1);
 8007398:	f107 030c 	add.w	r3, r7, #12
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fc70 	bl	8007c82 <atoi>
 80073a2:	ee07 0a90 	vmov	s15, r0
 80073a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073aa:	4b22      	ldr	r3, [pc, #136]	; (8007434 <HAL_UART_RxCpltCallback+0xb0>)
 80073ac:	edc3 7a00 	vstr	s15, [r3]

	 /* granica wartosci temperatury , wysylanie informacji o bledzie */
	if(set_temp_interrupt>40)
 80073b0:	4b20      	ldr	r3, [pc, #128]	; (8007434 <HAL_UART_RxCpltCallback+0xb0>)
 80073b2:	edd3 7a00 	vldr	s15, [r3]
 80073b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007438 <HAL_UART_RxCpltCallback+0xb4>
 80073ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	dd06      	ble.n	80073d2 <HAL_UART_RxCpltCallback+0x4e>
	{
		HAL_UART_Transmit(&huart3, "ERROR \n\r", 8, 0xffff);
 80073c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073c8:	2208      	movs	r2, #8
 80073ca:	491c      	ldr	r1, [pc, #112]	; (800743c <HAL_UART_RxCpltCallback+0xb8>)
 80073cc:	481c      	ldr	r0, [pc, #112]	; (8007440 <HAL_UART_RxCpltCallback+0xbc>)
 80073ce:	f7fd fc17 	bl	8004c00 <HAL_UART_Transmit>
	}
	if(set_temp_interrupt<20)
 80073d2:	4b18      	ldr	r3, [pc, #96]	; (8007434 <HAL_UART_RxCpltCallback+0xb0>)
 80073d4:	edd3 7a00 	vldr	s15, [r3]
 80073d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80073dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	d506      	bpl.n	80073f4 <HAL_UART_RxCpltCallback+0x70>
	{
		HAL_UART_Transmit(&huart3, "ERROR \n\r", 8, 0xffff);
 80073e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073ea:	2208      	movs	r2, #8
 80073ec:	4913      	ldr	r1, [pc, #76]	; (800743c <HAL_UART_RxCpltCallback+0xb8>)
 80073ee:	4814      	ldr	r0, [pc, #80]	; (8007440 <HAL_UART_RxCpltCallback+0xbc>)
 80073f0:	f7fd fc06 	bl	8004c00 <HAL_UART_Transmit>
	}
	if((set_temp_interrupt>=20)&&set_temp_interrupt<=40)
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <HAL_UART_RxCpltCallback+0xb0>)
 80073f6:	edd3 7a00 	vldr	s15, [r3]
 80073fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80073fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007406:	da00      	bge.n	800740a <HAL_UART_RxCpltCallback+0x86>
	{
	set_temp=set_temp_interrupt;
	}
}
 8007408:	e00e      	b.n	8007428 <HAL_UART_RxCpltCallback+0xa4>
	if((set_temp_interrupt>=20)&&set_temp_interrupt<=40)
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <HAL_UART_RxCpltCallback+0xb0>)
 800740c:	edd3 7a00 	vldr	s15, [r3]
 8007410:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007438 <HAL_UART_RxCpltCallback+0xb4>
 8007414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	d900      	bls.n	8007420 <HAL_UART_RxCpltCallback+0x9c>
}
 800741e:	e003      	b.n	8007428 <HAL_UART_RxCpltCallback+0xa4>
	set_temp=set_temp_interrupt;
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <HAL_UART_RxCpltCallback+0xb0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a07      	ldr	r2, [pc, #28]	; (8007444 <HAL_UART_RxCpltCallback+0xc0>)
 8007426:	6013      	str	r3, [r2, #0]
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000284 	.word	0x20000284
 8007434:	20000314 	.word	0x20000314
 8007438:	42200000 	.word	0x42200000
 800743c:	08009f38 	.word	0x08009f38
 8007440:	2000040c 	.word	0x2000040c
 8007444:	20000008 	.word	0x20000008

08007448 <HAL_GPIO_EXTI_Callback>:
//interrupt from gpio
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==guzik_Pin)
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d104      	bne.n	8007462 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		zlicz_przycisk++;
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <HAL_GPIO_EXTI_Callback+0x28>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	4a04      	ldr	r2, [pc, #16]	; (8007470 <HAL_GPIO_EXTI_Callback+0x28>)
 8007460:	6013      	str	r3, [r2, #0]
	}
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	2000021c 	.word	0x2000021c

08007474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8007478:	2200      	movs	r2, #0
 800747a:	2101      	movs	r1, #1
 800747c:	480b      	ldr	r0, [pc, #44]	; (80074ac <Error_Handler+0x38>)
 800747e:	f7fa f917 	bl	80016b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	4809      	ldr	r0, [pc, #36]	; (80074ac <Error_Handler+0x38>)
 8007488:	f7fa f912 	bl	80016b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800748c:	2200      	movs	r2, #0
 800748e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007492:	4806      	ldr	r0, [pc, #24]	; (80074ac <Error_Handler+0x38>)
 8007494:	f7fa f90c 	bl	80016b0 <HAL_GPIO_WritePin>
  while(1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800749c:	4803      	ldr	r0, [pc, #12]	; (80074ac <Error_Handler+0x38>)
 800749e:	f7fa f920 	bl	80016e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80074a2:	2064      	movs	r0, #100	; 0x64
 80074a4:	f7f9 fe04 	bl	80010b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80074a8:	e7f6      	b.n	8007498 <Error_Handler+0x24>
 80074aa:	bf00      	nop
 80074ac:	40020400 	.word	0x40020400

080074b0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80074b4:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <MX_SPI4_Init+0x74>)
 80074b6:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <MX_SPI4_Init+0x78>)
 80074b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <MX_SPI4_Init+0x74>)
 80074bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80074c2:	4b18      	ldr	r3, [pc, #96]	; (8007524 <MX_SPI4_Init+0x74>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80074c8:	4b16      	ldr	r3, [pc, #88]	; (8007524 <MX_SPI4_Init+0x74>)
 80074ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80074ce:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <MX_SPI4_Init+0x74>)
 80074d2:	2202      	movs	r2, #2
 80074d4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <MX_SPI4_Init+0x74>)
 80074d8:	2201      	movs	r2, #1
 80074da:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80074dc:	4b11      	ldr	r3, [pc, #68]	; (8007524 <MX_SPI4_Init+0x74>)
 80074de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <MX_SPI4_Init+0x74>)
 80074e6:	2210      	movs	r2, #16
 80074e8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074ea:	4b0e      	ldr	r3, [pc, #56]	; (8007524 <MX_SPI4_Init+0x74>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80074f0:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <MX_SPI4_Init+0x74>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <MX_SPI4_Init+0x74>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80074fc:	4b09      	ldr	r3, [pc, #36]	; (8007524 <MX_SPI4_Init+0x74>)
 80074fe:	2207      	movs	r2, #7
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007502:	4b08      	ldr	r3, [pc, #32]	; (8007524 <MX_SPI4_Init+0x74>)
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <MX_SPI4_Init+0x74>)
 800750a:	2200      	movs	r2, #0
 800750c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800750e:	4805      	ldr	r0, [pc, #20]	; (8007524 <MX_SPI4_Init+0x74>)
 8007510:	f7fb fd0c 	bl	8002f2c <HAL_SPI_Init>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800751a:	f7ff ffab 	bl	8007474 <Error_Handler>
  }

}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000328 	.word	0x20000328
 8007528:	40013400 	.word	0x40013400

0800752c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	; 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007534:	f107 0314 	add.w	r3, r7, #20
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	605a      	str	r2, [r3, #4]
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	60da      	str	r2, [r3, #12]
 8007542:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <HAL_SPI_MspInit+0x7c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d127      	bne.n	800759e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800754e:	4b17      	ldr	r3, [pc, #92]	; (80075ac <HAL_SPI_MspInit+0x80>)
 8007550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007552:	4a16      	ldr	r2, [pc, #88]	; (80075ac <HAL_SPI_MspInit+0x80>)
 8007554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007558:	6453      	str	r3, [r2, #68]	; 0x44
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <HAL_SPI_MspInit+0x80>)
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <HAL_SPI_MspInit+0x80>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a10      	ldr	r2, [pc, #64]	; (80075ac <HAL_SPI_MspInit+0x80>)
 800756c:	f043 0310 	orr.w	r3, r3, #16
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b0e      	ldr	r3, [pc, #56]	; (80075ac <HAL_SPI_MspInit+0x80>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration    
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800757e:	2364      	movs	r3, #100	; 0x64
 8007580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007582:	2302      	movs	r3, #2
 8007584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758a:	2303      	movs	r3, #3
 800758c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800758e:	2305      	movs	r3, #5
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	4619      	mov	r1, r3
 8007598:	4805      	ldr	r0, [pc, #20]	; (80075b0 <HAL_SPI_MspInit+0x84>)
 800759a:	f7f9 fedf 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800759e:	bf00      	nop
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40013400 	.word	0x40013400
 80075ac:	40023800 	.word	0x40023800
 80075b0:	40021000 	.word	0x40021000

080075b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80075ba:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <HAL_MspInit+0x44>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	4a0e      	ldr	r2, [pc, #56]	; (80075f8 <HAL_MspInit+0x44>)
 80075c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c4:	6413      	str	r3, [r2, #64]	; 0x40
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <HAL_MspInit+0x44>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <HAL_MspInit+0x44>)
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <HAL_MspInit+0x44>)
 80075d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075dc:	6453      	str	r3, [r2, #68]	; 0x44
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <HAL_MspInit+0x44>)
 80075e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40023800 	.word	0x40023800

080075fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800760e:	e7fe      	b.n	800760e <HardFault_Handler+0x4>

08007610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007614:	e7fe      	b.n	8007614 <MemManage_Handler+0x4>

08007616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007616:	b480      	push	{r7}
 8007618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800761a:	e7fe      	b.n	800761a <BusFault_Handler+0x4>

0800761c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007620:	e7fe      	b.n	8007620 <UsageFault_Handler+0x4>

08007622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007622:	b480      	push	{r7}
 8007624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007626:	bf00      	nop
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007642:	bf00      	nop
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007650:	f7f9 fd0e 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007654:	bf00      	nop
 8007656:	bd80      	pop	{r7, pc}

08007658 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800765c:	2001      	movs	r0, #1
 800765e:	f7fa f85b 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007662:	bf00      	nop
 8007664:	bd80      	pop	{r7, pc}

08007666 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800766a:	2008      	movs	r0, #8
 800766c:	f7fa f854 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007670:	bf00      	nop
 8007672:	bd80      	pop	{r7, pc}

08007674 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007678:	2080      	movs	r0, #128	; 0x80
 800767a:	f7fa f84d 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800767e:	bf00      	nop
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007688:	4802      	ldr	r0, [pc, #8]	; (8007694 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800768a:	f7fc fb10 	bl	8003cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200003cc 	.word	0x200003cc

08007698 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800769c:	4802      	ldr	r0, [pc, #8]	; (80076a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800769e:	f7fc fb06 	bl	8003cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80076a2:	bf00      	nop
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200003cc 	.word	0x200003cc

080076ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80076b0:	4802      	ldr	r0, [pc, #8]	; (80076bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80076b2:	f7fc fafc 	bl	8003cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80076b6:	bf00      	nop
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200003cc 	.word	0x200003cc

080076c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80076c4:	4802      	ldr	r0, [pc, #8]	; (80076d0 <TIM1_CC_IRQHandler+0x10>)
 80076c6:	f7fc faf2 	bl	8003cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200003cc 	.word	0x200003cc

080076d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80076d8:	4802      	ldr	r0, [pc, #8]	; (80076e4 <USART3_IRQHandler+0x10>)
 80076da:	f7fd fbc5 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	2000040c 	.word	0x2000040c

080076e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80076ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80076f0:	f7fa f812 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80076f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80076f8:	f7fa f80e 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80076fc:	bf00      	nop
 80076fe:	bd80      	pop	{r7, pc}

08007700 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <_sbrk+0x50>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <_sbrk+0x16>
		heap_end = &end;
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <_sbrk+0x50>)
 8007712:	4a10      	ldr	r2, [pc, #64]	; (8007754 <_sbrk+0x54>)
 8007714:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007716:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <_sbrk+0x50>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800771c:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <_sbrk+0x50>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	466a      	mov	r2, sp
 8007726:	4293      	cmp	r3, r2
 8007728:	d907      	bls.n	800773a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800772a:	f000 faaf 	bl	8007c8c <__errno>
 800772e:	4602      	mov	r2, r0
 8007730:	230c      	movs	r3, #12
 8007732:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007734:	f04f 33ff 	mov.w	r3, #4294967295
 8007738:	e006      	b.n	8007748 <_sbrk+0x48>
	}

	heap_end += incr;
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <_sbrk+0x50>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	4a03      	ldr	r2, [pc, #12]	; (8007750 <_sbrk+0x50>)
 8007744:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000224 	.word	0x20000224
 8007754:	20000490 	.word	0x20000490

08007758 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800775c:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <SystemInit+0x5c>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <SystemInit+0x5c>)
 8007764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <SystemInit+0x60>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a11      	ldr	r2, [pc, #68]	; (80077b8 <SystemInit+0x60>)
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <SystemInit+0x60>)
 800777a:	2200      	movs	r2, #0
 800777c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <SystemInit+0x60>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	490d      	ldr	r1, [pc, #52]	; (80077b8 <SystemInit+0x60>)
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <SystemInit+0x64>)
 8007786:	4013      	ands	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <SystemInit+0x60>)
 800778c:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <SystemInit+0x68>)
 800778e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <SystemInit+0x60>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <SystemInit+0x60>)
 8007796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <SystemInit+0x60>)
 800779e:	2200      	movs	r2, #0
 80077a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077a2:	4b04      	ldr	r3, [pc, #16]	; (80077b4 <SystemInit+0x5c>)
 80077a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077a8:	609a      	str	r2, [r3, #8]
#endif
}
 80077aa:	bf00      	nop
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	e000ed00 	.word	0xe000ed00
 80077b8:	40023800 	.word	0x40023800
 80077bc:	fef6ffff 	.word	0xfef6ffff
 80077c0:	24003010 	.word	0x24003010

080077c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08c      	sub	sp, #48	; 0x30
 80077c8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80077ca:	f107 030c 	add.w	r3, r7, #12
 80077ce:	2224      	movs	r2, #36	; 0x24
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fa84 	bl	8007ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077d8:	463b      	mov	r3, r7
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	605a      	str	r2, [r3, #4]
 80077e0:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80077e2:	4b23      	ldr	r3, [pc, #140]	; (8007870 <MX_TIM1_Init+0xac>)
 80077e4:	4a23      	ldr	r2, [pc, #140]	; (8007874 <MX_TIM1_Init+0xb0>)
 80077e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80077e8:	4b21      	ldr	r3, [pc, #132]	; (8007870 <MX_TIM1_Init+0xac>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077ee:	4b20      	ldr	r3, [pc, #128]	; (8007870 <MX_TIM1_Init+0xac>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80077f4:	4b1e      	ldr	r3, [pc, #120]	; (8007870 <MX_TIM1_Init+0xac>)
 80077f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077fc:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <MX_TIM1_Init+0xac>)
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007802:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <MX_TIM1_Init+0xac>)
 8007804:	2200      	movs	r2, #0
 8007806:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007808:	4b19      	ldr	r3, [pc, #100]	; (8007870 <MX_TIM1_Init+0xac>)
 800780a:	2200      	movs	r2, #0
 800780c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800780e:	2303      	movs	r3, #3
 8007810:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007812:	2300      	movs	r3, #0
 8007814:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007816:	2301      	movs	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800781e:	230f      	movs	r3, #15
 8007820:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007822:	2300      	movs	r3, #0
 8007824:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007826:	2301      	movs	r3, #1
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800782a:	2300      	movs	r3, #0
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800782e:	230f      	movs	r3, #15
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	4619      	mov	r1, r3
 8007838:	480d      	ldr	r0, [pc, #52]	; (8007870 <MX_TIM1_Init+0xac>)
 800783a:	f7fc f96f 	bl	8003b1c <HAL_TIM_Encoder_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8007844:	f7ff fe16 	bl	8007474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007848:	2300      	movs	r3, #0
 800784a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800784c:	2300      	movs	r3, #0
 800784e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007850:	2300      	movs	r3, #0
 8007852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007854:	463b      	mov	r3, r7
 8007856:	4619      	mov	r1, r3
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <MX_TIM1_Init+0xac>)
 800785a:	f7fd f909 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8007864:	f7ff fe06 	bl	8007474 <Error_Handler>
  }

}
 8007868:	bf00      	nop
 800786a:	3730      	adds	r7, #48	; 0x30
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	200003cc 	.word	0x200003cc
 8007874:	40010000 	.word	0x40010000

08007878 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08e      	sub	sp, #56	; 0x38
 800787c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800787e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	605a      	str	r2, [r3, #4]
 8007888:	609a      	str	r2, [r3, #8]
 800788a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800788c:	f107 031c 	add.w	r3, r7, #28
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007898:	463b      	mov	r3, r7
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	609a      	str	r2, [r3, #8]
 80078a2:	60da      	str	r2, [r3, #12]
 80078a4:	611a      	str	r2, [r3, #16]
 80078a6:	615a      	str	r2, [r3, #20]
 80078a8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80078aa:	4b34      	ldr	r3, [pc, #208]	; (800797c <MX_TIM3_Init+0x104>)
 80078ac:	4a34      	ldr	r2, [pc, #208]	; (8007980 <MX_TIM3_Init+0x108>)
 80078ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80078b0:	4b32      	ldr	r3, [pc, #200]	; (800797c <MX_TIM3_Init+0x104>)
 80078b2:	2247      	movs	r2, #71	; 0x47
 80078b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078b6:	4b31      	ldr	r3, [pc, #196]	; (800797c <MX_TIM3_Init+0x104>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80078bc:	4b2f      	ldr	r3, [pc, #188]	; (800797c <MX_TIM3_Init+0x104>)
 80078be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80078c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c4:	4b2d      	ldr	r3, [pc, #180]	; (800797c <MX_TIM3_Init+0x104>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078ca:	4b2c      	ldr	r3, [pc, #176]	; (800797c <MX_TIM3_Init+0x104>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80078d0:	482a      	ldr	r0, [pc, #168]	; (800797c <MX_TIM3_Init+0x104>)
 80078d2:	f7fc f853 	bl	800397c <HAL_TIM_Base_Init>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80078dc:	f7ff fdca 	bl	8007474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80078e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078ea:	4619      	mov	r1, r3
 80078ec:	4823      	ldr	r0, [pc, #140]	; (800797c <MX_TIM3_Init+0x104>)
 80078ee:	f7fc fc15 	bl	800411c <HAL_TIM_ConfigClockSource>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80078f8:	f7ff fdbc 	bl	8007474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80078fc:	481f      	ldr	r0, [pc, #124]	; (800797c <MX_TIM3_Init+0x104>)
 80078fe:	f7fc f893 	bl	8003a28 <HAL_TIM_PWM_Init>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8007908:	f7ff fdb4 	bl	8007474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007910:	2300      	movs	r3, #0
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007914:	f107 031c 	add.w	r3, r7, #28
 8007918:	4619      	mov	r1, r3
 800791a:	4818      	ldr	r0, [pc, #96]	; (800797c <MX_TIM3_Init+0x104>)
 800791c:	f7fd f8a8 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007926:	f7ff fda5 	bl	8007474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800792a:	2360      	movs	r3, #96	; 0x60
 800792c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007936:	2300      	movs	r3, #0
 8007938:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800793a:	463b      	mov	r3, r7
 800793c:	2200      	movs	r2, #0
 800793e:	4619      	mov	r1, r3
 8007940:	480e      	ldr	r0, [pc, #56]	; (800797c <MX_TIM3_Init+0x104>)
 8007942:	f7fc fad3 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800794c:	f7ff fd92 	bl	8007474 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8007950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007954:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007956:	463b      	mov	r3, r7
 8007958:	2208      	movs	r2, #8
 800795a:	4619      	mov	r1, r3
 800795c:	4807      	ldr	r0, [pc, #28]	; (800797c <MX_TIM3_Init+0x104>)
 800795e:	f7fc fac5 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8007968:	f7ff fd84 	bl	8007474 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800796c:	4803      	ldr	r0, [pc, #12]	; (800797c <MX_TIM3_Init+0x104>)
 800796e:	f000 f88d 	bl	8007a8c <HAL_TIM_MspPostInit>

}
 8007972:	bf00      	nop
 8007974:	3738      	adds	r7, #56	; 0x38
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	2000038c 	.word	0x2000038c
 8007980:	40000400 	.word	0x40000400

08007984 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	; 0x28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	60da      	str	r2, [r3, #12]
 800799a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a27      	ldr	r2, [pc, #156]	; (8007a40 <HAL_TIM_Encoder_MspInit+0xbc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d148      	bne.n	8007a38 <HAL_TIM_Encoder_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <HAL_TIM_Encoder_MspInit+0xc0>)
 80079a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079aa:	4a26      	ldr	r2, [pc, #152]	; (8007a44 <HAL_TIM_Encoder_MspInit+0xc0>)
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	6453      	str	r3, [r2, #68]	; 0x44
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <HAL_TIM_Encoder_MspInit+0xc0>)
 80079b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <HAL_TIM_Encoder_MspInit+0xc0>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <HAL_TIM_Encoder_MspInit+0xc0>)
 80079c4:	f043 0310 	orr.w	r3, r3, #16
 80079c8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ca:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <HAL_TIM_Encoder_MspInit+0xc0>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80079d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80079da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079dc:	2302      	movs	r3, #2
 80079de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e4:	2300      	movs	r3, #0
 80079e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80079e8:	2301      	movs	r3, #1
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80079ec:	f107 0314 	add.w	r3, r7, #20
 80079f0:	4619      	mov	r1, r3
 80079f2:	4815      	ldr	r0, [pc, #84]	; (8007a48 <HAL_TIM_Encoder_MspInit+0xc4>)
 80079f4:	f7f9 fcb2 	bl	800135c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	2018      	movs	r0, #24
 80079fe:	f7f9 fc54 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007a02:	2018      	movs	r0, #24
 8007a04:	f7f9 fc6d 	bl	80012e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	2019      	movs	r0, #25
 8007a0e:	f7f9 fc4c 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007a12:	2019      	movs	r0, #25
 8007a14:	f7f9 fc65 	bl	80012e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	201a      	movs	r0, #26
 8007a1e:	f7f9 fc44 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007a22:	201a      	movs	r0, #26
 8007a24:	f7f9 fc5d 	bl	80012e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	201b      	movs	r0, #27
 8007a2e:	f7f9 fc3c 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007a32:	201b      	movs	r0, #27
 8007a34:	f7f9 fc55 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40023800 	.word	0x40023800
 8007a48:	40021000 	.word	0x40021000

08007a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <HAL_TIM_Base_MspInit+0x38>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d10b      	bne.n	8007a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <HAL_TIM_Base_MspInit+0x3c>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <HAL_TIM_Base_MspInit+0x3c>)
 8007a64:	f043 0302 	orr.w	r3, r3, #2
 8007a68:	6413      	str	r3, [r2, #64]	; 0x40
 8007a6a:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <HAL_TIM_Base_MspInit+0x3c>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007a76:	bf00      	nop
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	40000400 	.word	0x40000400
 8007a88:	40023800 	.word	0x40023800

08007a8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08a      	sub	sp, #40	; 0x28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a94:	f107 0314 	add.w	r3, r7, #20
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	609a      	str	r2, [r3, #8]
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1f      	ldr	r2, [pc, #124]	; (8007b28 <HAL_TIM_MspPostInit+0x9c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d138      	bne.n	8007b20 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aae:	4b1f      	ldr	r3, [pc, #124]	; (8007b2c <HAL_TIM_MspPostInit+0xa0>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	4a1e      	ldr	r2, [pc, #120]	; (8007b2c <HAL_TIM_MspPostInit+0xa0>)
 8007ab4:	f043 0301 	orr.w	r3, r3, #1
 8007ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aba:	4b1c      	ldr	r3, [pc, #112]	; (8007b2c <HAL_TIM_MspPostInit+0xa0>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ac6:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <HAL_TIM_MspPostInit+0xa0>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	4a18      	ldr	r2, [pc, #96]	; (8007b2c <HAL_TIM_MspPostInit+0xa0>)
 8007acc:	f043 0304 	orr.w	r3, r3, #4
 8007ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ad2:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <HAL_TIM_MspPostInit+0xa0>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aea:	2300      	movs	r3, #0
 8007aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007aee:	2302      	movs	r3, #2
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007af2:	f107 0314 	add.w	r3, r7, #20
 8007af6:	4619      	mov	r1, r3
 8007af8:	480d      	ldr	r0, [pc, #52]	; (8007b30 <HAL_TIM_MspPostInit+0xa4>)
 8007afa:	f7f9 fc2f 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b04:	2302      	movs	r3, #2
 8007b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b10:	2302      	movs	r3, #2
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b14:	f107 0314 	add.w	r3, r7, #20
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4806      	ldr	r0, [pc, #24]	; (8007b34 <HAL_TIM_MspPostInit+0xa8>)
 8007b1c:	f7f9 fc1e 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007b20:	bf00      	nop
 8007b22:	3728      	adds	r7, #40	; 0x28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	40020000 	.word	0x40020000
 8007b34:	40020800 	.word	0x40020800

08007b38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007b3c:	4b14      	ldr	r3, [pc, #80]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b3e:	4a15      	ldr	r2, [pc, #84]	; (8007b94 <MX_USART3_UART_Init+0x5c>)
 8007b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007b42:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007b4a:	4b11      	ldr	r3, [pc, #68]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007b56:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b5e:	220c      	movs	r2, #12
 8007b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b62:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b6e:	4b08      	ldr	r3, [pc, #32]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007b7a:	4805      	ldr	r0, [pc, #20]	; (8007b90 <MX_USART3_UART_Init+0x58>)
 8007b7c:	f7fc fff2 	bl	8004b64 <HAL_UART_Init>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007b86:	f7ff fc75 	bl	8007474 <Error_Handler>
  }

}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000040c 	.word	0x2000040c
 8007b94:	40004800 	.word	0x40004800

08007b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
 8007baa:	609a      	str	r2, [r3, #8]
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	; (8007c24 <HAL_UART_MspInit+0x8c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d130      	bne.n	8007c1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007bba:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <HAL_UART_MspInit+0x90>)
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	4a1a      	ldr	r2, [pc, #104]	; (8007c28 <HAL_UART_MspInit+0x90>)
 8007bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8007bc6:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <HAL_UART_MspInit+0x90>)
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <HAL_UART_MspInit+0x90>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	4a14      	ldr	r2, [pc, #80]	; (8007c28 <HAL_UART_MspInit+0x90>)
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <HAL_UART_MspInit+0x90>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007bfc:	2307      	movs	r3, #7
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	4619      	mov	r1, r3
 8007c06:	4809      	ldr	r0, [pc, #36]	; (8007c2c <HAL_UART_MspInit+0x94>)
 8007c08:	f7f9 fba8 	bl	800135c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2027      	movs	r0, #39	; 0x27
 8007c12:	f7f9 fb4a 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007c16:	2027      	movs	r0, #39	; 0x27
 8007c18:	f7f9 fb63 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	3728      	adds	r7, #40	; 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40004800 	.word	0x40004800
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	40020c00 	.word	0x40020c00

08007c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c36:	e003      	b.n	8007c40 <LoopCopyDataInit>

08007c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c38:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c3e:	3104      	adds	r1, #4

08007c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c40:	480b      	ldr	r0, [pc, #44]	; (8007c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c48:	d3f6      	bcc.n	8007c38 <CopyDataInit>
  ldr  r2, =_sbss
 8007c4a:	4a0b      	ldr	r2, [pc, #44]	; (8007c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c4c:	e002      	b.n	8007c54 <LoopFillZerobss>

08007c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c50:	f842 3b04 	str.w	r3, [r2], #4

08007c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c54:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c58:	d3f9      	bcc.n	8007c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007c5a:	f7ff fd7d 	bl	8007758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c5e:	f000 f81b 	bl	8007c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c62:	f7fe ffd7 	bl	8006c14 <main>
  bx  lr    
 8007c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c68:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007c6c:	0800a1c8 	.word	0x0800a1c8
  ldr  r0, =_sdata
 8007c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c74:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8007c78:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8007c7c:	20000490 	.word	0x20000490

08007c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c80:	e7fe      	b.n	8007c80 <ADC_IRQHandler>

08007c82 <atoi>:
 8007c82:	220a      	movs	r2, #10
 8007c84:	2100      	movs	r1, #0
 8007c86:	f000 bd2b 	b.w	80086e0 <strtol>
	...

08007c8c <__errno>:
 8007c8c:	4b01      	ldr	r3, [pc, #4]	; (8007c94 <__errno+0x8>)
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20000018 	.word	0x20000018

08007c98 <__libc_init_array>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	4e0d      	ldr	r6, [pc, #52]	; (8007cd0 <__libc_init_array+0x38>)
 8007c9c:	4c0d      	ldr	r4, [pc, #52]	; (8007cd4 <__libc_init_array+0x3c>)
 8007c9e:	1ba4      	subs	r4, r4, r6
 8007ca0:	10a4      	asrs	r4, r4, #2
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	42a5      	cmp	r5, r4
 8007ca6:	d109      	bne.n	8007cbc <__libc_init_array+0x24>
 8007ca8:	4e0b      	ldr	r6, [pc, #44]	; (8007cd8 <__libc_init_array+0x40>)
 8007caa:	4c0c      	ldr	r4, [pc, #48]	; (8007cdc <__libc_init_array+0x44>)
 8007cac:	f002 f8f4 	bl	8009e98 <_init>
 8007cb0:	1ba4      	subs	r4, r4, r6
 8007cb2:	10a4      	asrs	r4, r4, #2
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	42a5      	cmp	r5, r4
 8007cb8:	d105      	bne.n	8007cc6 <__libc_init_array+0x2e>
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cc0:	4798      	blx	r3
 8007cc2:	3501      	adds	r5, #1
 8007cc4:	e7ee      	b.n	8007ca4 <__libc_init_array+0xc>
 8007cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cca:	4798      	blx	r3
 8007ccc:	3501      	adds	r5, #1
 8007cce:	e7f2      	b.n	8007cb6 <__libc_init_array+0x1e>
 8007cd0:	0800a1c0 	.word	0x0800a1c0
 8007cd4:	0800a1c0 	.word	0x0800a1c0
 8007cd8:	0800a1c0 	.word	0x0800a1c0
 8007cdc:	0800a1c4 	.word	0x0800a1c4

08007ce0 <memset>:
 8007ce0:	4402      	add	r2, r0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d100      	bne.n	8007cea <memset+0xa>
 8007ce8:	4770      	bx	lr
 8007cea:	f803 1b01 	strb.w	r1, [r3], #1
 8007cee:	e7f9      	b.n	8007ce4 <memset+0x4>

08007cf0 <__cvt>:
 8007cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	ec55 4b10 	vmov	r4, r5, d0
 8007cf8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007cfa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	460e      	mov	r6, r1
 8007d02:	4691      	mov	r9, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	bfb8      	it	lt
 8007d08:	4622      	movlt	r2, r4
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	f027 0720 	bic.w	r7, r7, #32
 8007d10:	bfbb      	ittet	lt
 8007d12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d16:	461d      	movlt	r5, r3
 8007d18:	2300      	movge	r3, #0
 8007d1a:	232d      	movlt	r3, #45	; 0x2d
 8007d1c:	bfb8      	it	lt
 8007d1e:	4614      	movlt	r4, r2
 8007d20:	2f46      	cmp	r7, #70	; 0x46
 8007d22:	700b      	strb	r3, [r1, #0]
 8007d24:	d004      	beq.n	8007d30 <__cvt+0x40>
 8007d26:	2f45      	cmp	r7, #69	; 0x45
 8007d28:	d100      	bne.n	8007d2c <__cvt+0x3c>
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	2102      	movs	r1, #2
 8007d2e:	e000      	b.n	8007d32 <__cvt+0x42>
 8007d30:	2103      	movs	r1, #3
 8007d32:	ab03      	add	r3, sp, #12
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	ab02      	add	r3, sp, #8
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	4653      	mov	r3, sl
 8007d3e:	ec45 4b10 	vmov	d0, r4, r5
 8007d42:	f000 fd71 	bl	8008828 <_dtoa_r>
 8007d46:	2f47      	cmp	r7, #71	; 0x47
 8007d48:	4680      	mov	r8, r0
 8007d4a:	d102      	bne.n	8007d52 <__cvt+0x62>
 8007d4c:	f019 0f01 	tst.w	r9, #1
 8007d50:	d026      	beq.n	8007da0 <__cvt+0xb0>
 8007d52:	2f46      	cmp	r7, #70	; 0x46
 8007d54:	eb08 0906 	add.w	r9, r8, r6
 8007d58:	d111      	bne.n	8007d7e <__cvt+0x8e>
 8007d5a:	f898 3000 	ldrb.w	r3, [r8]
 8007d5e:	2b30      	cmp	r3, #48	; 0x30
 8007d60:	d10a      	bne.n	8007d78 <__cvt+0x88>
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fecd 	bl	8000b08 <__aeabi_dcmpeq>
 8007d6e:	b918      	cbnz	r0, 8007d78 <__cvt+0x88>
 8007d70:	f1c6 0601 	rsb	r6, r6, #1
 8007d74:	f8ca 6000 	str.w	r6, [sl]
 8007d78:	f8da 3000 	ldr.w	r3, [sl]
 8007d7c:	4499      	add	r9, r3
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2300      	movs	r3, #0
 8007d82:	4620      	mov	r0, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	f7f8 febf 	bl	8000b08 <__aeabi_dcmpeq>
 8007d8a:	b938      	cbnz	r0, 8007d9c <__cvt+0xac>
 8007d8c:	2230      	movs	r2, #48	; 0x30
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	454b      	cmp	r3, r9
 8007d92:	d205      	bcs.n	8007da0 <__cvt+0xb0>
 8007d94:	1c59      	adds	r1, r3, #1
 8007d96:	9103      	str	r1, [sp, #12]
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e7f8      	b.n	8007d8e <__cvt+0x9e>
 8007d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007da4:	eba3 0308 	sub.w	r3, r3, r8
 8007da8:	4640      	mov	r0, r8
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	b004      	add	sp, #16
 8007dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007db2 <__exponent>:
 8007db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db4:	2900      	cmp	r1, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	bfba      	itte	lt
 8007dba:	4249      	neglt	r1, r1
 8007dbc:	232d      	movlt	r3, #45	; 0x2d
 8007dbe:	232b      	movge	r3, #43	; 0x2b
 8007dc0:	2909      	cmp	r1, #9
 8007dc2:	f804 2b02 	strb.w	r2, [r4], #2
 8007dc6:	7043      	strb	r3, [r0, #1]
 8007dc8:	dd20      	ble.n	8007e0c <__exponent+0x5a>
 8007dca:	f10d 0307 	add.w	r3, sp, #7
 8007dce:	461f      	mov	r7, r3
 8007dd0:	260a      	movs	r6, #10
 8007dd2:	fb91 f5f6 	sdiv	r5, r1, r6
 8007dd6:	fb06 1115 	mls	r1, r6, r5, r1
 8007dda:	3130      	adds	r1, #48	; 0x30
 8007ddc:	2d09      	cmp	r5, #9
 8007dde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007de2:	f103 32ff 	add.w	r2, r3, #4294967295
 8007de6:	4629      	mov	r1, r5
 8007de8:	dc09      	bgt.n	8007dfe <__exponent+0x4c>
 8007dea:	3130      	adds	r1, #48	; 0x30
 8007dec:	3b02      	subs	r3, #2
 8007dee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007df2:	42bb      	cmp	r3, r7
 8007df4:	4622      	mov	r2, r4
 8007df6:	d304      	bcc.n	8007e02 <__exponent+0x50>
 8007df8:	1a10      	subs	r0, r2, r0
 8007dfa:	b003      	add	sp, #12
 8007dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfe:	4613      	mov	r3, r2
 8007e00:	e7e7      	b.n	8007dd2 <__exponent+0x20>
 8007e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e06:	f804 2b01 	strb.w	r2, [r4], #1
 8007e0a:	e7f2      	b.n	8007df2 <__exponent+0x40>
 8007e0c:	2330      	movs	r3, #48	; 0x30
 8007e0e:	4419      	add	r1, r3
 8007e10:	7083      	strb	r3, [r0, #2]
 8007e12:	1d02      	adds	r2, r0, #4
 8007e14:	70c1      	strb	r1, [r0, #3]
 8007e16:	e7ef      	b.n	8007df8 <__exponent+0x46>

08007e18 <_printf_float>:
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	b08d      	sub	sp, #52	; 0x34
 8007e1e:	460c      	mov	r4, r1
 8007e20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e24:	4616      	mov	r6, r2
 8007e26:	461f      	mov	r7, r3
 8007e28:	4605      	mov	r5, r0
 8007e2a:	f001 fab9 	bl	80093a0 <_localeconv_r>
 8007e2e:	6803      	ldr	r3, [r0, #0]
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7f8 f9ec 	bl	8000210 <strlen>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e40:	9005      	str	r0, [sp, #20]
 8007e42:	3307      	adds	r3, #7
 8007e44:	f023 0307 	bic.w	r3, r3, #7
 8007e48:	f103 0208 	add.w	r2, r3, #8
 8007e4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e50:	f8d4 b000 	ldr.w	fp, [r4]
 8007e54:	f8c8 2000 	str.w	r2, [r8]
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e68:	9307      	str	r3, [sp, #28]
 8007e6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	4ba7      	ldr	r3, [pc, #668]	; (8008110 <_printf_float+0x2f8>)
 8007e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e78:	f7f8 fe78 	bl	8000b6c <__aeabi_dcmpun>
 8007e7c:	bb70      	cbnz	r0, 8007edc <_printf_float+0xc4>
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	4ba3      	ldr	r3, [pc, #652]	; (8008110 <_printf_float+0x2f8>)
 8007e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e88:	f7f8 fe52 	bl	8000b30 <__aeabi_dcmple>
 8007e8c:	bb30      	cbnz	r0, 8007edc <_printf_float+0xc4>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2300      	movs	r3, #0
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	f7f8 fe41 	bl	8000b1c <__aeabi_dcmplt>
 8007e9a:	b110      	cbz	r0, 8007ea2 <_printf_float+0x8a>
 8007e9c:	232d      	movs	r3, #45	; 0x2d
 8007e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea2:	4a9c      	ldr	r2, [pc, #624]	; (8008114 <_printf_float+0x2fc>)
 8007ea4:	4b9c      	ldr	r3, [pc, #624]	; (8008118 <_printf_float+0x300>)
 8007ea6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007eaa:	bf8c      	ite	hi
 8007eac:	4690      	movhi	r8, r2
 8007eae:	4698      	movls	r8, r3
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	f02b 0204 	bic.w	r2, fp, #4
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	9700      	str	r7, [sp, #0]
 8007ec0:	4633      	mov	r3, r6
 8007ec2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 f9e6 	bl	8008298 <_printf_common>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	f040 808d 	bne.w	8007fec <_printf_float+0x1d4>
 8007ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed6:	b00d      	add	sp, #52	; 0x34
 8007ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe42 	bl	8000b6c <__aeabi_dcmpun>
 8007ee8:	b110      	cbz	r0, 8007ef0 <_printf_float+0xd8>
 8007eea:	4a8c      	ldr	r2, [pc, #560]	; (800811c <_printf_float+0x304>)
 8007eec:	4b8c      	ldr	r3, [pc, #560]	; (8008120 <_printf_float+0x308>)
 8007eee:	e7da      	b.n	8007ea6 <_printf_float+0x8e>
 8007ef0:	6861      	ldr	r1, [r4, #4]
 8007ef2:	1c4b      	adds	r3, r1, #1
 8007ef4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ef8:	a80a      	add	r0, sp, #40	; 0x28
 8007efa:	d13e      	bne.n	8007f7a <_printf_float+0x162>
 8007efc:	2306      	movs	r3, #6
 8007efe:	6063      	str	r3, [r4, #4]
 8007f00:	2300      	movs	r3, #0
 8007f02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f06:	ab09      	add	r3, sp, #36	; 0x24
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	ec49 8b10 	vmov	d0, r8, r9
 8007f0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	f8cd a004 	str.w	sl, [sp, #4]
 8007f18:	6861      	ldr	r1, [r4, #4]
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7ff fee8 	bl	8007cf0 <__cvt>
 8007f20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f24:	2b47      	cmp	r3, #71	; 0x47
 8007f26:	4680      	mov	r8, r0
 8007f28:	d109      	bne.n	8007f3e <_printf_float+0x126>
 8007f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2c:	1cd8      	adds	r0, r3, #3
 8007f2e:	db02      	blt.n	8007f36 <_printf_float+0x11e>
 8007f30:	6862      	ldr	r2, [r4, #4]
 8007f32:	4293      	cmp	r3, r2
 8007f34:	dd47      	ble.n	8007fc6 <_printf_float+0x1ae>
 8007f36:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f3a:	fa5f fa8a 	uxtb.w	sl, sl
 8007f3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f44:	d824      	bhi.n	8007f90 <_printf_float+0x178>
 8007f46:	3901      	subs	r1, #1
 8007f48:	4652      	mov	r2, sl
 8007f4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f4e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f50:	f7ff ff2f 	bl	8007db2 <__exponent>
 8007f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f56:	1813      	adds	r3, r2, r0
 8007f58:	2a01      	cmp	r2, #1
 8007f5a:	4681      	mov	r9, r0
 8007f5c:	6123      	str	r3, [r4, #16]
 8007f5e:	dc02      	bgt.n	8007f66 <_printf_float+0x14e>
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	07d1      	lsls	r1, r2, #31
 8007f64:	d501      	bpl.n	8007f6a <_printf_float+0x152>
 8007f66:	3301      	adds	r3, #1
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0a5      	beq.n	8007ebe <_printf_float+0xa6>
 8007f72:	232d      	movs	r3, #45	; 0x2d
 8007f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f78:	e7a1      	b.n	8007ebe <_printf_float+0xa6>
 8007f7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f7e:	f000 8177 	beq.w	8008270 <_printf_float+0x458>
 8007f82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f86:	d1bb      	bne.n	8007f00 <_printf_float+0xe8>
 8007f88:	2900      	cmp	r1, #0
 8007f8a:	d1b9      	bne.n	8007f00 <_printf_float+0xe8>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e7b6      	b.n	8007efe <_printf_float+0xe6>
 8007f90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f94:	d119      	bne.n	8007fca <_printf_float+0x1b2>
 8007f96:	2900      	cmp	r1, #0
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	dd0c      	ble.n	8007fb6 <_printf_float+0x19e>
 8007f9c:	6121      	str	r1, [r4, #16]
 8007f9e:	b913      	cbnz	r3, 8007fa6 <_printf_float+0x18e>
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	07d2      	lsls	r2, r2, #31
 8007fa4:	d502      	bpl.n	8007fac <_printf_float+0x194>
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	440b      	add	r3, r1
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fae:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fb0:	f04f 0900 	mov.w	r9, #0
 8007fb4:	e7d9      	b.n	8007f6a <_printf_float+0x152>
 8007fb6:	b913      	cbnz	r3, 8007fbe <_printf_float+0x1a6>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	07d0      	lsls	r0, r2, #31
 8007fbc:	d501      	bpl.n	8007fc2 <_printf_float+0x1aa>
 8007fbe:	3302      	adds	r3, #2
 8007fc0:	e7f3      	b.n	8007faa <_printf_float+0x192>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e7f1      	b.n	8007faa <_printf_float+0x192>
 8007fc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007fca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	db05      	blt.n	8007fde <_printf_float+0x1c6>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	07d1      	lsls	r1, r2, #31
 8007fd8:	d5e8      	bpl.n	8007fac <_printf_float+0x194>
 8007fda:	3301      	adds	r3, #1
 8007fdc:	e7e5      	b.n	8007faa <_printf_float+0x192>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfd4      	ite	le
 8007fe2:	f1c3 0302 	rsble	r3, r3, #2
 8007fe6:	2301      	movgt	r3, #1
 8007fe8:	4413      	add	r3, r2
 8007fea:	e7de      	b.n	8007faa <_printf_float+0x192>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	055a      	lsls	r2, r3, #21
 8007ff0:	d407      	bmi.n	8008002 <_printf_float+0x1ea>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d12b      	bne.n	8008058 <_printf_float+0x240>
 8008000:	e767      	b.n	8007ed2 <_printf_float+0xba>
 8008002:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008006:	f240 80dc 	bls.w	80081c2 <_printf_float+0x3aa>
 800800a:	2200      	movs	r2, #0
 800800c:	2300      	movs	r3, #0
 800800e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008012:	f7f8 fd79 	bl	8000b08 <__aeabi_dcmpeq>
 8008016:	2800      	cmp	r0, #0
 8008018:	d033      	beq.n	8008082 <_printf_float+0x26a>
 800801a:	2301      	movs	r3, #1
 800801c:	4a41      	ldr	r2, [pc, #260]	; (8008124 <_printf_float+0x30c>)
 800801e:	4631      	mov	r1, r6
 8008020:	4628      	mov	r0, r5
 8008022:	47b8      	blx	r7
 8008024:	3001      	adds	r0, #1
 8008026:	f43f af54 	beq.w	8007ed2 <_printf_float+0xba>
 800802a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800802e:	429a      	cmp	r2, r3
 8008030:	db02      	blt.n	8008038 <_printf_float+0x220>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	07d8      	lsls	r0, r3, #31
 8008036:	d50f      	bpl.n	8008058 <_printf_float+0x240>
 8008038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f af45 	beq.w	8007ed2 <_printf_float+0xba>
 8008048:	f04f 0800 	mov.w	r8, #0
 800804c:	f104 091a 	add.w	r9, r4, #26
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	3b01      	subs	r3, #1
 8008054:	4543      	cmp	r3, r8
 8008056:	dc09      	bgt.n	800806c <_printf_float+0x254>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	079b      	lsls	r3, r3, #30
 800805c:	f100 8103 	bmi.w	8008266 <_printf_float+0x44e>
 8008060:	68e0      	ldr	r0, [r4, #12]
 8008062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008064:	4298      	cmp	r0, r3
 8008066:	bfb8      	it	lt
 8008068:	4618      	movlt	r0, r3
 800806a:	e734      	b.n	8007ed6 <_printf_float+0xbe>
 800806c:	2301      	movs	r3, #1
 800806e:	464a      	mov	r2, r9
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af2b 	beq.w	8007ed2 <_printf_float+0xba>
 800807c:	f108 0801 	add.w	r8, r8, #1
 8008080:	e7e6      	b.n	8008050 <_printf_float+0x238>
 8008082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	dc2b      	bgt.n	80080e0 <_printf_float+0x2c8>
 8008088:	2301      	movs	r3, #1
 800808a:	4a26      	ldr	r2, [pc, #152]	; (8008124 <_printf_float+0x30c>)
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	f43f af1d 	beq.w	8007ed2 <_printf_float+0xba>
 8008098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809a:	b923      	cbnz	r3, 80080a6 <_printf_float+0x28e>
 800809c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809e:	b913      	cbnz	r3, 80080a6 <_printf_float+0x28e>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	07d9      	lsls	r1, r3, #31
 80080a4:	d5d8      	bpl.n	8008058 <_printf_float+0x240>
 80080a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	f43f af0e 	beq.w	8007ed2 <_printf_float+0xba>
 80080b6:	f04f 0900 	mov.w	r9, #0
 80080ba:	f104 0a1a 	add.w	sl, r4, #26
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	425b      	negs	r3, r3
 80080c2:	454b      	cmp	r3, r9
 80080c4:	dc01      	bgt.n	80080ca <_printf_float+0x2b2>
 80080c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c8:	e794      	b.n	8007ff4 <_printf_float+0x1dc>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f aefc 	beq.w	8007ed2 <_printf_float+0xba>
 80080da:	f109 0901 	add.w	r9, r9, #1
 80080de:	e7ee      	b.n	80080be <_printf_float+0x2a6>
 80080e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080e4:	429a      	cmp	r2, r3
 80080e6:	bfa8      	it	ge
 80080e8:	461a      	movge	r2, r3
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	4691      	mov	r9, r2
 80080ee:	dd07      	ble.n	8008100 <_printf_float+0x2e8>
 80080f0:	4613      	mov	r3, r2
 80080f2:	4631      	mov	r1, r6
 80080f4:	4642      	mov	r2, r8
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f aee9 	beq.w	8007ed2 <_printf_float+0xba>
 8008100:	f104 031a 	add.w	r3, r4, #26
 8008104:	f04f 0b00 	mov.w	fp, #0
 8008108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800810c:	9306      	str	r3, [sp, #24]
 800810e:	e015      	b.n	800813c <_printf_float+0x324>
 8008110:	7fefffff 	.word	0x7fefffff
 8008114:	08009f60 	.word	0x08009f60
 8008118:	08009f5c 	.word	0x08009f5c
 800811c:	08009f68 	.word	0x08009f68
 8008120:	08009f64 	.word	0x08009f64
 8008124:	08009f6c 	.word	0x08009f6c
 8008128:	2301      	movs	r3, #1
 800812a:	9a06      	ldr	r2, [sp, #24]
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f aecd 	beq.w	8007ed2 <_printf_float+0xba>
 8008138:	f10b 0b01 	add.w	fp, fp, #1
 800813c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008140:	ebaa 0309 	sub.w	r3, sl, r9
 8008144:	455b      	cmp	r3, fp
 8008146:	dcef      	bgt.n	8008128 <_printf_float+0x310>
 8008148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800814c:	429a      	cmp	r2, r3
 800814e:	44d0      	add	r8, sl
 8008150:	db15      	blt.n	800817e <_printf_float+0x366>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	07da      	lsls	r2, r3, #31
 8008156:	d412      	bmi.n	800817e <_printf_float+0x366>
 8008158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800815c:	eba3 020a 	sub.w	r2, r3, sl
 8008160:	eba3 0a01 	sub.w	sl, r3, r1
 8008164:	4592      	cmp	sl, r2
 8008166:	bfa8      	it	ge
 8008168:	4692      	movge	sl, r2
 800816a:	f1ba 0f00 	cmp.w	sl, #0
 800816e:	dc0e      	bgt.n	800818e <_printf_float+0x376>
 8008170:	f04f 0800 	mov.w	r8, #0
 8008174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008178:	f104 091a 	add.w	r9, r4, #26
 800817c:	e019      	b.n	80081b2 <_printf_float+0x39a>
 800817e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	d1e5      	bne.n	8008158 <_printf_float+0x340>
 800818c:	e6a1      	b.n	8007ed2 <_printf_float+0xba>
 800818e:	4653      	mov	r3, sl
 8008190:	4642      	mov	r2, r8
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	d1e9      	bne.n	8008170 <_printf_float+0x358>
 800819c:	e699      	b.n	8007ed2 <_printf_float+0xba>
 800819e:	2301      	movs	r3, #1
 80081a0:	464a      	mov	r2, r9
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	f43f ae92 	beq.w	8007ed2 <_printf_float+0xba>
 80081ae:	f108 0801 	add.w	r8, r8, #1
 80081b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	eba3 030a 	sub.w	r3, r3, sl
 80081bc:	4543      	cmp	r3, r8
 80081be:	dcee      	bgt.n	800819e <_printf_float+0x386>
 80081c0:	e74a      	b.n	8008058 <_printf_float+0x240>
 80081c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c4:	2a01      	cmp	r2, #1
 80081c6:	dc01      	bgt.n	80081cc <_printf_float+0x3b4>
 80081c8:	07db      	lsls	r3, r3, #31
 80081ca:	d53a      	bpl.n	8008242 <_printf_float+0x42a>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4642      	mov	r2, r8
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f ae7b 	beq.w	8007ed2 <_printf_float+0xba>
 80081dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081e0:	4631      	mov	r1, r6
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b8      	blx	r7
 80081e6:	3001      	adds	r0, #1
 80081e8:	f108 0801 	add.w	r8, r8, #1
 80081ec:	f43f ae71 	beq.w	8007ed2 <_printf_float+0xba>
 80081f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f2:	2200      	movs	r2, #0
 80081f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80081f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081fc:	2300      	movs	r3, #0
 80081fe:	f7f8 fc83 	bl	8000b08 <__aeabi_dcmpeq>
 8008202:	b9c8      	cbnz	r0, 8008238 <_printf_float+0x420>
 8008204:	4653      	mov	r3, sl
 8008206:	4642      	mov	r2, r8
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	d10e      	bne.n	8008230 <_printf_float+0x418>
 8008212:	e65e      	b.n	8007ed2 <_printf_float+0xba>
 8008214:	2301      	movs	r3, #1
 8008216:	4652      	mov	r2, sl
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f ae57 	beq.w	8007ed2 <_printf_float+0xba>
 8008224:	f108 0801 	add.w	r8, r8, #1
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	3b01      	subs	r3, #1
 800822c:	4543      	cmp	r3, r8
 800822e:	dcf1      	bgt.n	8008214 <_printf_float+0x3fc>
 8008230:	464b      	mov	r3, r9
 8008232:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008236:	e6de      	b.n	8007ff6 <_printf_float+0x1de>
 8008238:	f04f 0800 	mov.w	r8, #0
 800823c:	f104 0a1a 	add.w	sl, r4, #26
 8008240:	e7f2      	b.n	8008228 <_printf_float+0x410>
 8008242:	2301      	movs	r3, #1
 8008244:	e7df      	b.n	8008206 <_printf_float+0x3ee>
 8008246:	2301      	movs	r3, #1
 8008248:	464a      	mov	r2, r9
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	f43f ae3e 	beq.w	8007ed2 <_printf_float+0xba>
 8008256:	f108 0801 	add.w	r8, r8, #1
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	4543      	cmp	r3, r8
 8008262:	dcf0      	bgt.n	8008246 <_printf_float+0x42e>
 8008264:	e6fc      	b.n	8008060 <_printf_float+0x248>
 8008266:	f04f 0800 	mov.w	r8, #0
 800826a:	f104 0919 	add.w	r9, r4, #25
 800826e:	e7f4      	b.n	800825a <_printf_float+0x442>
 8008270:	2900      	cmp	r1, #0
 8008272:	f43f ae8b 	beq.w	8007f8c <_printf_float+0x174>
 8008276:	2300      	movs	r3, #0
 8008278:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800827c:	ab09      	add	r3, sp, #36	; 0x24
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	ec49 8b10 	vmov	d0, r8, r9
 8008284:	6022      	str	r2, [r4, #0]
 8008286:	f8cd a004 	str.w	sl, [sp, #4]
 800828a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800828e:	4628      	mov	r0, r5
 8008290:	f7ff fd2e 	bl	8007cf0 <__cvt>
 8008294:	4680      	mov	r8, r0
 8008296:	e648      	b.n	8007f2a <_printf_float+0x112>

08008298 <_printf_common>:
 8008298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	4691      	mov	r9, r2
 800829e:	461f      	mov	r7, r3
 80082a0:	688a      	ldr	r2, [r1, #8]
 80082a2:	690b      	ldr	r3, [r1, #16]
 80082a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	bfb8      	it	lt
 80082ac:	4613      	movlt	r3, r2
 80082ae:	f8c9 3000 	str.w	r3, [r9]
 80082b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082b6:	4606      	mov	r6, r0
 80082b8:	460c      	mov	r4, r1
 80082ba:	b112      	cbz	r2, 80082c2 <_printf_common+0x2a>
 80082bc:	3301      	adds	r3, #1
 80082be:	f8c9 3000 	str.w	r3, [r9]
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	0699      	lsls	r1, r3, #26
 80082c6:	bf42      	ittt	mi
 80082c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082cc:	3302      	addmi	r3, #2
 80082ce:	f8c9 3000 	strmi.w	r3, [r9]
 80082d2:	6825      	ldr	r5, [r4, #0]
 80082d4:	f015 0506 	ands.w	r5, r5, #6
 80082d8:	d107      	bne.n	80082ea <_printf_common+0x52>
 80082da:	f104 0a19 	add.w	sl, r4, #25
 80082de:	68e3      	ldr	r3, [r4, #12]
 80082e0:	f8d9 2000 	ldr.w	r2, [r9]
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	42ab      	cmp	r3, r5
 80082e8:	dc28      	bgt.n	800833c <_printf_common+0xa4>
 80082ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	3300      	adds	r3, #0
 80082f2:	bf18      	it	ne
 80082f4:	2301      	movne	r3, #1
 80082f6:	0692      	lsls	r2, r2, #26
 80082f8:	d42d      	bmi.n	8008356 <_printf_common+0xbe>
 80082fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082fe:	4639      	mov	r1, r7
 8008300:	4630      	mov	r0, r6
 8008302:	47c0      	blx	r8
 8008304:	3001      	adds	r0, #1
 8008306:	d020      	beq.n	800834a <_printf_common+0xb2>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	68e5      	ldr	r5, [r4, #12]
 800830c:	f8d9 2000 	ldr.w	r2, [r9]
 8008310:	f003 0306 	and.w	r3, r3, #6
 8008314:	2b04      	cmp	r3, #4
 8008316:	bf08      	it	eq
 8008318:	1aad      	subeq	r5, r5, r2
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	bf0c      	ite	eq
 8008320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008324:	2500      	movne	r5, #0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfc4      	itt	gt
 800832a:	1a9b      	subgt	r3, r3, r2
 800832c:	18ed      	addgt	r5, r5, r3
 800832e:	f04f 0900 	mov.w	r9, #0
 8008332:	341a      	adds	r4, #26
 8008334:	454d      	cmp	r5, r9
 8008336:	d11a      	bne.n	800836e <_printf_common+0xd6>
 8008338:	2000      	movs	r0, #0
 800833a:	e008      	b.n	800834e <_printf_common+0xb6>
 800833c:	2301      	movs	r3, #1
 800833e:	4652      	mov	r2, sl
 8008340:	4639      	mov	r1, r7
 8008342:	4630      	mov	r0, r6
 8008344:	47c0      	blx	r8
 8008346:	3001      	adds	r0, #1
 8008348:	d103      	bne.n	8008352 <_printf_common+0xba>
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008352:	3501      	adds	r5, #1
 8008354:	e7c3      	b.n	80082de <_printf_common+0x46>
 8008356:	18e1      	adds	r1, r4, r3
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	2030      	movs	r0, #48	; 0x30
 800835c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008360:	4422      	add	r2, r4
 8008362:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008366:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800836a:	3302      	adds	r3, #2
 800836c:	e7c5      	b.n	80082fa <_printf_common+0x62>
 800836e:	2301      	movs	r3, #1
 8008370:	4622      	mov	r2, r4
 8008372:	4639      	mov	r1, r7
 8008374:	4630      	mov	r0, r6
 8008376:	47c0      	blx	r8
 8008378:	3001      	adds	r0, #1
 800837a:	d0e6      	beq.n	800834a <_printf_common+0xb2>
 800837c:	f109 0901 	add.w	r9, r9, #1
 8008380:	e7d8      	b.n	8008334 <_printf_common+0x9c>
	...

08008384 <_printf_i>:
 8008384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008388:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800838c:	460c      	mov	r4, r1
 800838e:	7e09      	ldrb	r1, [r1, #24]
 8008390:	b085      	sub	sp, #20
 8008392:	296e      	cmp	r1, #110	; 0x6e
 8008394:	4617      	mov	r7, r2
 8008396:	4606      	mov	r6, r0
 8008398:	4698      	mov	r8, r3
 800839a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800839c:	f000 80b3 	beq.w	8008506 <_printf_i+0x182>
 80083a0:	d822      	bhi.n	80083e8 <_printf_i+0x64>
 80083a2:	2963      	cmp	r1, #99	; 0x63
 80083a4:	d036      	beq.n	8008414 <_printf_i+0x90>
 80083a6:	d80a      	bhi.n	80083be <_printf_i+0x3a>
 80083a8:	2900      	cmp	r1, #0
 80083aa:	f000 80b9 	beq.w	8008520 <_printf_i+0x19c>
 80083ae:	2958      	cmp	r1, #88	; 0x58
 80083b0:	f000 8083 	beq.w	80084ba <_printf_i+0x136>
 80083b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80083bc:	e032      	b.n	8008424 <_printf_i+0xa0>
 80083be:	2964      	cmp	r1, #100	; 0x64
 80083c0:	d001      	beq.n	80083c6 <_printf_i+0x42>
 80083c2:	2969      	cmp	r1, #105	; 0x69
 80083c4:	d1f6      	bne.n	80083b4 <_printf_i+0x30>
 80083c6:	6820      	ldr	r0, [r4, #0]
 80083c8:	6813      	ldr	r3, [r2, #0]
 80083ca:	0605      	lsls	r5, r0, #24
 80083cc:	f103 0104 	add.w	r1, r3, #4
 80083d0:	d52a      	bpl.n	8008428 <_printf_i+0xa4>
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da03      	bge.n	80083e2 <_printf_i+0x5e>
 80083da:	222d      	movs	r2, #45	; 0x2d
 80083dc:	425b      	negs	r3, r3
 80083de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80083e2:	486f      	ldr	r0, [pc, #444]	; (80085a0 <_printf_i+0x21c>)
 80083e4:	220a      	movs	r2, #10
 80083e6:	e039      	b.n	800845c <_printf_i+0xd8>
 80083e8:	2973      	cmp	r1, #115	; 0x73
 80083ea:	f000 809d 	beq.w	8008528 <_printf_i+0x1a4>
 80083ee:	d808      	bhi.n	8008402 <_printf_i+0x7e>
 80083f0:	296f      	cmp	r1, #111	; 0x6f
 80083f2:	d020      	beq.n	8008436 <_printf_i+0xb2>
 80083f4:	2970      	cmp	r1, #112	; 0x70
 80083f6:	d1dd      	bne.n	80083b4 <_printf_i+0x30>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	f043 0320 	orr.w	r3, r3, #32
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	e003      	b.n	800840a <_printf_i+0x86>
 8008402:	2975      	cmp	r1, #117	; 0x75
 8008404:	d017      	beq.n	8008436 <_printf_i+0xb2>
 8008406:	2978      	cmp	r1, #120	; 0x78
 8008408:	d1d4      	bne.n	80083b4 <_printf_i+0x30>
 800840a:	2378      	movs	r3, #120	; 0x78
 800840c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008410:	4864      	ldr	r0, [pc, #400]	; (80085a4 <_printf_i+0x220>)
 8008412:	e055      	b.n	80084c0 <_printf_i+0x13c>
 8008414:	6813      	ldr	r3, [r2, #0]
 8008416:	1d19      	adds	r1, r3, #4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6011      	str	r1, [r2, #0]
 800841c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008424:	2301      	movs	r3, #1
 8008426:	e08c      	b.n	8008542 <_printf_i+0x1be>
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6011      	str	r1, [r2, #0]
 800842c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008430:	bf18      	it	ne
 8008432:	b21b      	sxthne	r3, r3
 8008434:	e7cf      	b.n	80083d6 <_printf_i+0x52>
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	6825      	ldr	r5, [r4, #0]
 800843a:	1d18      	adds	r0, r3, #4
 800843c:	6010      	str	r0, [r2, #0]
 800843e:	0628      	lsls	r0, r5, #24
 8008440:	d501      	bpl.n	8008446 <_printf_i+0xc2>
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	e002      	b.n	800844c <_printf_i+0xc8>
 8008446:	0668      	lsls	r0, r5, #25
 8008448:	d5fb      	bpl.n	8008442 <_printf_i+0xbe>
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	4854      	ldr	r0, [pc, #336]	; (80085a0 <_printf_i+0x21c>)
 800844e:	296f      	cmp	r1, #111	; 0x6f
 8008450:	bf14      	ite	ne
 8008452:	220a      	movne	r2, #10
 8008454:	2208      	moveq	r2, #8
 8008456:	2100      	movs	r1, #0
 8008458:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800845c:	6865      	ldr	r5, [r4, #4]
 800845e:	60a5      	str	r5, [r4, #8]
 8008460:	2d00      	cmp	r5, #0
 8008462:	f2c0 8095 	blt.w	8008590 <_printf_i+0x20c>
 8008466:	6821      	ldr	r1, [r4, #0]
 8008468:	f021 0104 	bic.w	r1, r1, #4
 800846c:	6021      	str	r1, [r4, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d13d      	bne.n	80084ee <_printf_i+0x16a>
 8008472:	2d00      	cmp	r5, #0
 8008474:	f040 808e 	bne.w	8008594 <_printf_i+0x210>
 8008478:	4665      	mov	r5, ip
 800847a:	2a08      	cmp	r2, #8
 800847c:	d10b      	bne.n	8008496 <_printf_i+0x112>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	07db      	lsls	r3, r3, #31
 8008482:	d508      	bpl.n	8008496 <_printf_i+0x112>
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	6862      	ldr	r2, [r4, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	bfde      	ittt	le
 800848c:	2330      	movle	r3, #48	; 0x30
 800848e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008492:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008496:	ebac 0305 	sub.w	r3, ip, r5
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	f8cd 8000 	str.w	r8, [sp]
 80084a0:	463b      	mov	r3, r7
 80084a2:	aa03      	add	r2, sp, #12
 80084a4:	4621      	mov	r1, r4
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7ff fef6 	bl	8008298 <_printf_common>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d14d      	bne.n	800854c <_printf_i+0x1c8>
 80084b0:	f04f 30ff 	mov.w	r0, #4294967295
 80084b4:	b005      	add	sp, #20
 80084b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ba:	4839      	ldr	r0, [pc, #228]	; (80085a0 <_printf_i+0x21c>)
 80084bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80084c0:	6813      	ldr	r3, [r2, #0]
 80084c2:	6821      	ldr	r1, [r4, #0]
 80084c4:	1d1d      	adds	r5, r3, #4
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6015      	str	r5, [r2, #0]
 80084ca:	060a      	lsls	r2, r1, #24
 80084cc:	d50b      	bpl.n	80084e6 <_printf_i+0x162>
 80084ce:	07ca      	lsls	r2, r1, #31
 80084d0:	bf44      	itt	mi
 80084d2:	f041 0120 	orrmi.w	r1, r1, #32
 80084d6:	6021      	strmi	r1, [r4, #0]
 80084d8:	b91b      	cbnz	r3, 80084e2 <_printf_i+0x15e>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	f022 0220 	bic.w	r2, r2, #32
 80084e0:	6022      	str	r2, [r4, #0]
 80084e2:	2210      	movs	r2, #16
 80084e4:	e7b7      	b.n	8008456 <_printf_i+0xd2>
 80084e6:	064d      	lsls	r5, r1, #25
 80084e8:	bf48      	it	mi
 80084ea:	b29b      	uxthmi	r3, r3
 80084ec:	e7ef      	b.n	80084ce <_printf_i+0x14a>
 80084ee:	4665      	mov	r5, ip
 80084f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80084f4:	fb02 3311 	mls	r3, r2, r1, r3
 80084f8:	5cc3      	ldrb	r3, [r0, r3]
 80084fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80084fe:	460b      	mov	r3, r1
 8008500:	2900      	cmp	r1, #0
 8008502:	d1f5      	bne.n	80084f0 <_printf_i+0x16c>
 8008504:	e7b9      	b.n	800847a <_printf_i+0xf6>
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	6825      	ldr	r5, [r4, #0]
 800850a:	6961      	ldr	r1, [r4, #20]
 800850c:	1d18      	adds	r0, r3, #4
 800850e:	6010      	str	r0, [r2, #0]
 8008510:	0628      	lsls	r0, r5, #24
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	d501      	bpl.n	800851a <_printf_i+0x196>
 8008516:	6019      	str	r1, [r3, #0]
 8008518:	e002      	b.n	8008520 <_printf_i+0x19c>
 800851a:	066a      	lsls	r2, r5, #25
 800851c:	d5fb      	bpl.n	8008516 <_printf_i+0x192>
 800851e:	8019      	strh	r1, [r3, #0]
 8008520:	2300      	movs	r3, #0
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	4665      	mov	r5, ip
 8008526:	e7b9      	b.n	800849c <_printf_i+0x118>
 8008528:	6813      	ldr	r3, [r2, #0]
 800852a:	1d19      	adds	r1, r3, #4
 800852c:	6011      	str	r1, [r2, #0]
 800852e:	681d      	ldr	r5, [r3, #0]
 8008530:	6862      	ldr	r2, [r4, #4]
 8008532:	2100      	movs	r1, #0
 8008534:	4628      	mov	r0, r5
 8008536:	f7f7 fe73 	bl	8000220 <memchr>
 800853a:	b108      	cbz	r0, 8008540 <_printf_i+0x1bc>
 800853c:	1b40      	subs	r0, r0, r5
 800853e:	6060      	str	r0, [r4, #4]
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	2300      	movs	r3, #0
 8008546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854a:	e7a7      	b.n	800849c <_printf_i+0x118>
 800854c:	6923      	ldr	r3, [r4, #16]
 800854e:	462a      	mov	r2, r5
 8008550:	4639      	mov	r1, r7
 8008552:	4630      	mov	r0, r6
 8008554:	47c0      	blx	r8
 8008556:	3001      	adds	r0, #1
 8008558:	d0aa      	beq.n	80084b0 <_printf_i+0x12c>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	079b      	lsls	r3, r3, #30
 800855e:	d413      	bmi.n	8008588 <_printf_i+0x204>
 8008560:	68e0      	ldr	r0, [r4, #12]
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	4298      	cmp	r0, r3
 8008566:	bfb8      	it	lt
 8008568:	4618      	movlt	r0, r3
 800856a:	e7a3      	b.n	80084b4 <_printf_i+0x130>
 800856c:	2301      	movs	r3, #1
 800856e:	464a      	mov	r2, r9
 8008570:	4639      	mov	r1, r7
 8008572:	4630      	mov	r0, r6
 8008574:	47c0      	blx	r8
 8008576:	3001      	adds	r0, #1
 8008578:	d09a      	beq.n	80084b0 <_printf_i+0x12c>
 800857a:	3501      	adds	r5, #1
 800857c:	68e3      	ldr	r3, [r4, #12]
 800857e:	9a03      	ldr	r2, [sp, #12]
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	42ab      	cmp	r3, r5
 8008584:	dcf2      	bgt.n	800856c <_printf_i+0x1e8>
 8008586:	e7eb      	b.n	8008560 <_printf_i+0x1dc>
 8008588:	2500      	movs	r5, #0
 800858a:	f104 0919 	add.w	r9, r4, #25
 800858e:	e7f5      	b.n	800857c <_printf_i+0x1f8>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1ac      	bne.n	80084ee <_printf_i+0x16a>
 8008594:	7803      	ldrb	r3, [r0, #0]
 8008596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800859a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800859e:	e76c      	b.n	800847a <_printf_i+0xf6>
 80085a0:	08009f6e 	.word	0x08009f6e
 80085a4:	08009f7f 	.word	0x08009f7f

080085a8 <siprintf>:
 80085a8:	b40e      	push	{r1, r2, r3}
 80085aa:	b500      	push	{lr}
 80085ac:	b09c      	sub	sp, #112	; 0x70
 80085ae:	ab1d      	add	r3, sp, #116	; 0x74
 80085b0:	9002      	str	r0, [sp, #8]
 80085b2:	9006      	str	r0, [sp, #24]
 80085b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085b8:	4809      	ldr	r0, [pc, #36]	; (80085e0 <siprintf+0x38>)
 80085ba:	9107      	str	r1, [sp, #28]
 80085bc:	9104      	str	r1, [sp, #16]
 80085be:	4909      	ldr	r1, [pc, #36]	; (80085e4 <siprintf+0x3c>)
 80085c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c4:	9105      	str	r1, [sp, #20]
 80085c6:	6800      	ldr	r0, [r0, #0]
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	a902      	add	r1, sp, #8
 80085cc:	f001 fb06 	bl	8009bdc <_svfiprintf_r>
 80085d0:	9b02      	ldr	r3, [sp, #8]
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
 80085d6:	b01c      	add	sp, #112	; 0x70
 80085d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085dc:	b003      	add	sp, #12
 80085de:	4770      	bx	lr
 80085e0:	20000018 	.word	0x20000018
 80085e4:	ffff0208 	.word	0xffff0208

080085e8 <_strtol_l.isra.0>:
 80085e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	4680      	mov	r8, r0
 80085ee:	4689      	mov	r9, r1
 80085f0:	4692      	mov	sl, r2
 80085f2:	461e      	mov	r6, r3
 80085f4:	460f      	mov	r7, r1
 80085f6:	463d      	mov	r5, r7
 80085f8:	9808      	ldr	r0, [sp, #32]
 80085fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085fe:	f000 fecb 	bl	8009398 <__locale_ctype_ptr_l>
 8008602:	4420      	add	r0, r4
 8008604:	7843      	ldrb	r3, [r0, #1]
 8008606:	f013 0308 	ands.w	r3, r3, #8
 800860a:	d132      	bne.n	8008672 <_strtol_l.isra.0+0x8a>
 800860c:	2c2d      	cmp	r4, #45	; 0x2d
 800860e:	d132      	bne.n	8008676 <_strtol_l.isra.0+0x8e>
 8008610:	787c      	ldrb	r4, [r7, #1]
 8008612:	1cbd      	adds	r5, r7, #2
 8008614:	2201      	movs	r2, #1
 8008616:	2e00      	cmp	r6, #0
 8008618:	d05d      	beq.n	80086d6 <_strtol_l.isra.0+0xee>
 800861a:	2e10      	cmp	r6, #16
 800861c:	d109      	bne.n	8008632 <_strtol_l.isra.0+0x4a>
 800861e:	2c30      	cmp	r4, #48	; 0x30
 8008620:	d107      	bne.n	8008632 <_strtol_l.isra.0+0x4a>
 8008622:	782b      	ldrb	r3, [r5, #0]
 8008624:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008628:	2b58      	cmp	r3, #88	; 0x58
 800862a:	d14f      	bne.n	80086cc <_strtol_l.isra.0+0xe4>
 800862c:	786c      	ldrb	r4, [r5, #1]
 800862e:	2610      	movs	r6, #16
 8008630:	3502      	adds	r5, #2
 8008632:	2a00      	cmp	r2, #0
 8008634:	bf14      	ite	ne
 8008636:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800863a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800863e:	2700      	movs	r7, #0
 8008640:	fbb1 fcf6 	udiv	ip, r1, r6
 8008644:	4638      	mov	r0, r7
 8008646:	fb06 1e1c 	mls	lr, r6, ip, r1
 800864a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800864e:	2b09      	cmp	r3, #9
 8008650:	d817      	bhi.n	8008682 <_strtol_l.isra.0+0x9a>
 8008652:	461c      	mov	r4, r3
 8008654:	42a6      	cmp	r6, r4
 8008656:	dd23      	ble.n	80086a0 <_strtol_l.isra.0+0xb8>
 8008658:	1c7b      	adds	r3, r7, #1
 800865a:	d007      	beq.n	800866c <_strtol_l.isra.0+0x84>
 800865c:	4584      	cmp	ip, r0
 800865e:	d31c      	bcc.n	800869a <_strtol_l.isra.0+0xb2>
 8008660:	d101      	bne.n	8008666 <_strtol_l.isra.0+0x7e>
 8008662:	45a6      	cmp	lr, r4
 8008664:	db19      	blt.n	800869a <_strtol_l.isra.0+0xb2>
 8008666:	fb00 4006 	mla	r0, r0, r6, r4
 800866a:	2701      	movs	r7, #1
 800866c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008670:	e7eb      	b.n	800864a <_strtol_l.isra.0+0x62>
 8008672:	462f      	mov	r7, r5
 8008674:	e7bf      	b.n	80085f6 <_strtol_l.isra.0+0xe>
 8008676:	2c2b      	cmp	r4, #43	; 0x2b
 8008678:	bf04      	itt	eq
 800867a:	1cbd      	addeq	r5, r7, #2
 800867c:	787c      	ldrbeq	r4, [r7, #1]
 800867e:	461a      	mov	r2, r3
 8008680:	e7c9      	b.n	8008616 <_strtol_l.isra.0+0x2e>
 8008682:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008686:	2b19      	cmp	r3, #25
 8008688:	d801      	bhi.n	800868e <_strtol_l.isra.0+0xa6>
 800868a:	3c37      	subs	r4, #55	; 0x37
 800868c:	e7e2      	b.n	8008654 <_strtol_l.isra.0+0x6c>
 800868e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008692:	2b19      	cmp	r3, #25
 8008694:	d804      	bhi.n	80086a0 <_strtol_l.isra.0+0xb8>
 8008696:	3c57      	subs	r4, #87	; 0x57
 8008698:	e7dc      	b.n	8008654 <_strtol_l.isra.0+0x6c>
 800869a:	f04f 37ff 	mov.w	r7, #4294967295
 800869e:	e7e5      	b.n	800866c <_strtol_l.isra.0+0x84>
 80086a0:	1c7b      	adds	r3, r7, #1
 80086a2:	d108      	bne.n	80086b6 <_strtol_l.isra.0+0xce>
 80086a4:	2322      	movs	r3, #34	; 0x22
 80086a6:	f8c8 3000 	str.w	r3, [r8]
 80086aa:	4608      	mov	r0, r1
 80086ac:	f1ba 0f00 	cmp.w	sl, #0
 80086b0:	d107      	bne.n	80086c2 <_strtol_l.isra.0+0xda>
 80086b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b6:	b102      	cbz	r2, 80086ba <_strtol_l.isra.0+0xd2>
 80086b8:	4240      	negs	r0, r0
 80086ba:	f1ba 0f00 	cmp.w	sl, #0
 80086be:	d0f8      	beq.n	80086b2 <_strtol_l.isra.0+0xca>
 80086c0:	b10f      	cbz	r7, 80086c6 <_strtol_l.isra.0+0xde>
 80086c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80086c6:	f8ca 9000 	str.w	r9, [sl]
 80086ca:	e7f2      	b.n	80086b2 <_strtol_l.isra.0+0xca>
 80086cc:	2430      	movs	r4, #48	; 0x30
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	d1af      	bne.n	8008632 <_strtol_l.isra.0+0x4a>
 80086d2:	2608      	movs	r6, #8
 80086d4:	e7ad      	b.n	8008632 <_strtol_l.isra.0+0x4a>
 80086d6:	2c30      	cmp	r4, #48	; 0x30
 80086d8:	d0a3      	beq.n	8008622 <_strtol_l.isra.0+0x3a>
 80086da:	260a      	movs	r6, #10
 80086dc:	e7a9      	b.n	8008632 <_strtol_l.isra.0+0x4a>
	...

080086e0 <strtol>:
 80086e0:	4b08      	ldr	r3, [pc, #32]	; (8008704 <strtol+0x24>)
 80086e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086e4:	681c      	ldr	r4, [r3, #0]
 80086e6:	4d08      	ldr	r5, [pc, #32]	; (8008708 <strtol+0x28>)
 80086e8:	6a23      	ldr	r3, [r4, #32]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bf08      	it	eq
 80086ee:	462b      	moveq	r3, r5
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	460a      	mov	r2, r1
 80086f6:	4601      	mov	r1, r0
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff ff75 	bl	80085e8 <_strtol_l.isra.0>
 80086fe:	b003      	add	sp, #12
 8008700:	bd30      	pop	{r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	20000018 	.word	0x20000018
 8008708:	2000007c 	.word	0x2000007c

0800870c <quorem>:
 800870c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	6903      	ldr	r3, [r0, #16]
 8008712:	690c      	ldr	r4, [r1, #16]
 8008714:	42a3      	cmp	r3, r4
 8008716:	4680      	mov	r8, r0
 8008718:	f2c0 8082 	blt.w	8008820 <quorem+0x114>
 800871c:	3c01      	subs	r4, #1
 800871e:	f101 0714 	add.w	r7, r1, #20
 8008722:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008726:	f100 0614 	add.w	r6, r0, #20
 800872a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800872e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008732:	eb06 030c 	add.w	r3, r6, ip
 8008736:	3501      	adds	r5, #1
 8008738:	eb07 090c 	add.w	r9, r7, ip
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008742:	b395      	cbz	r5, 80087aa <quorem+0x9e>
 8008744:	f04f 0a00 	mov.w	sl, #0
 8008748:	4638      	mov	r0, r7
 800874a:	46b6      	mov	lr, r6
 800874c:	46d3      	mov	fp, sl
 800874e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008752:	b293      	uxth	r3, r2
 8008754:	fb05 a303 	mla	r3, r5, r3, sl
 8008758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800875c:	b29b      	uxth	r3, r3
 800875e:	ebab 0303 	sub.w	r3, fp, r3
 8008762:	0c12      	lsrs	r2, r2, #16
 8008764:	f8de b000 	ldr.w	fp, [lr]
 8008768:	fb05 a202 	mla	r2, r5, r2, sl
 800876c:	fa13 f38b 	uxtah	r3, r3, fp
 8008770:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008774:	fa1f fb82 	uxth.w	fp, r2
 8008778:	f8de 2000 	ldr.w	r2, [lr]
 800877c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008784:	b29b      	uxth	r3, r3
 8008786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800878a:	4581      	cmp	r9, r0
 800878c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008790:	f84e 3b04 	str.w	r3, [lr], #4
 8008794:	d2db      	bcs.n	800874e <quorem+0x42>
 8008796:	f856 300c 	ldr.w	r3, [r6, ip]
 800879a:	b933      	cbnz	r3, 80087aa <quorem+0x9e>
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	3b04      	subs	r3, #4
 80087a0:	429e      	cmp	r6, r3
 80087a2:	461a      	mov	r2, r3
 80087a4:	d330      	bcc.n	8008808 <quorem+0xfc>
 80087a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80087aa:	4640      	mov	r0, r8
 80087ac:	f001 f840 	bl	8009830 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	db25      	blt.n	8008800 <quorem+0xf4>
 80087b4:	3501      	adds	r5, #1
 80087b6:	4630      	mov	r0, r6
 80087b8:	f04f 0c00 	mov.w	ip, #0
 80087bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80087c0:	f8d0 e000 	ldr.w	lr, [r0]
 80087c4:	b293      	uxth	r3, r2
 80087c6:	ebac 0303 	sub.w	r3, ip, r3
 80087ca:	0c12      	lsrs	r2, r2, #16
 80087cc:	fa13 f38e 	uxtah	r3, r3, lr
 80087d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087d8:	b29b      	uxth	r3, r3
 80087da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087de:	45b9      	cmp	r9, r7
 80087e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087e4:	f840 3b04 	str.w	r3, [r0], #4
 80087e8:	d2e8      	bcs.n	80087bc <quorem+0xb0>
 80087ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80087ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80087f2:	b92a      	cbnz	r2, 8008800 <quorem+0xf4>
 80087f4:	3b04      	subs	r3, #4
 80087f6:	429e      	cmp	r6, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	d30b      	bcc.n	8008814 <quorem+0x108>
 80087fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008800:	4628      	mov	r0, r5
 8008802:	b003      	add	sp, #12
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	3b04      	subs	r3, #4
 800880c:	2a00      	cmp	r2, #0
 800880e:	d1ca      	bne.n	80087a6 <quorem+0x9a>
 8008810:	3c01      	subs	r4, #1
 8008812:	e7c5      	b.n	80087a0 <quorem+0x94>
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	3b04      	subs	r3, #4
 8008818:	2a00      	cmp	r2, #0
 800881a:	d1ef      	bne.n	80087fc <quorem+0xf0>
 800881c:	3c01      	subs	r4, #1
 800881e:	e7ea      	b.n	80087f6 <quorem+0xea>
 8008820:	2000      	movs	r0, #0
 8008822:	e7ee      	b.n	8008802 <quorem+0xf6>
 8008824:	0000      	movs	r0, r0
	...

08008828 <_dtoa_r>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	ec57 6b10 	vmov	r6, r7, d0
 8008830:	b097      	sub	sp, #92	; 0x5c
 8008832:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008834:	9106      	str	r1, [sp, #24]
 8008836:	4604      	mov	r4, r0
 8008838:	920b      	str	r2, [sp, #44]	; 0x2c
 800883a:	9312      	str	r3, [sp, #72]	; 0x48
 800883c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008840:	e9cd 6700 	strd	r6, r7, [sp]
 8008844:	b93d      	cbnz	r5, 8008856 <_dtoa_r+0x2e>
 8008846:	2010      	movs	r0, #16
 8008848:	f000 fdb8 	bl	80093bc <malloc>
 800884c:	6260      	str	r0, [r4, #36]	; 0x24
 800884e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008852:	6005      	str	r5, [r0, #0]
 8008854:	60c5      	str	r5, [r0, #12]
 8008856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	b151      	cbz	r1, 8008872 <_dtoa_r+0x4a>
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	604a      	str	r2, [r1, #4]
 8008860:	2301      	movs	r3, #1
 8008862:	4093      	lsls	r3, r2
 8008864:	608b      	str	r3, [r1, #8]
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fe01 	bl	800946e <_Bfree>
 800886c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	1e3b      	subs	r3, r7, #0
 8008874:	bfbb      	ittet	lt
 8008876:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800887a:	9301      	strlt	r3, [sp, #4]
 800887c:	2300      	movge	r3, #0
 800887e:	2201      	movlt	r2, #1
 8008880:	bfac      	ite	ge
 8008882:	f8c8 3000 	strge.w	r3, [r8]
 8008886:	f8c8 2000 	strlt.w	r2, [r8]
 800888a:	4baf      	ldr	r3, [pc, #700]	; (8008b48 <_dtoa_r+0x320>)
 800888c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008890:	ea33 0308 	bics.w	r3, r3, r8
 8008894:	d114      	bne.n	80088c0 <_dtoa_r+0x98>
 8008896:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008898:	f242 730f 	movw	r3, #9999	; 0x270f
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	b923      	cbnz	r3, 80088ac <_dtoa_r+0x84>
 80088a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f000 8542 	beq.w	8009330 <_dtoa_r+0xb08>
 80088ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008b5c <_dtoa_r+0x334>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8544 	beq.w	8009340 <_dtoa_r+0xb18>
 80088b8:	f10b 0303 	add.w	r3, fp, #3
 80088bc:	f000 bd3e 	b.w	800933c <_dtoa_r+0xb14>
 80088c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	4630      	mov	r0, r6
 80088ca:	4639      	mov	r1, r7
 80088cc:	f7f8 f91c 	bl	8000b08 <__aeabi_dcmpeq>
 80088d0:	4681      	mov	r9, r0
 80088d2:	b168      	cbz	r0, 80088f0 <_dtoa_r+0xc8>
 80088d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088d6:	2301      	movs	r3, #1
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8524 	beq.w	800932a <_dtoa_r+0xb02>
 80088e2:	4b9a      	ldr	r3, [pc, #616]	; (8008b4c <_dtoa_r+0x324>)
 80088e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	f000 bd28 	b.w	8009340 <_dtoa_r+0xb18>
 80088f0:	aa14      	add	r2, sp, #80	; 0x50
 80088f2:	a915      	add	r1, sp, #84	; 0x54
 80088f4:	ec47 6b10 	vmov	d0, r6, r7
 80088f8:	4620      	mov	r0, r4
 80088fa:	f001 f810 	bl	800991e <__d2b>
 80088fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008902:	9004      	str	r0, [sp, #16]
 8008904:	2d00      	cmp	r5, #0
 8008906:	d07c      	beq.n	8008a02 <_dtoa_r+0x1da>
 8008908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800890c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008910:	46b2      	mov	sl, r6
 8008912:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800891a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800891e:	2200      	movs	r2, #0
 8008920:	4b8b      	ldr	r3, [pc, #556]	; (8008b50 <_dtoa_r+0x328>)
 8008922:	4650      	mov	r0, sl
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 fccf 	bl	80002c8 <__aeabi_dsub>
 800892a:	a381      	add	r3, pc, #516	; (adr r3, 8008b30 <_dtoa_r+0x308>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fe82 	bl	8000638 <__aeabi_dmul>
 8008934:	a380      	add	r3, pc, #512	; (adr r3, 8008b38 <_dtoa_r+0x310>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	f7f7 fcc7 	bl	80002cc <__adddf3>
 800893e:	4606      	mov	r6, r0
 8008940:	4628      	mov	r0, r5
 8008942:	460f      	mov	r7, r1
 8008944:	f7f7 fe0e 	bl	8000564 <__aeabi_i2d>
 8008948:	a37d      	add	r3, pc, #500	; (adr r3, 8008b40 <_dtoa_r+0x318>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fe73 	bl	8000638 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f7 fcb7 	bl	80002cc <__adddf3>
 800895e:	4606      	mov	r6, r0
 8008960:	460f      	mov	r7, r1
 8008962:	f7f8 f919 	bl	8000b98 <__aeabi_d2iz>
 8008966:	2200      	movs	r2, #0
 8008968:	4682      	mov	sl, r0
 800896a:	2300      	movs	r3, #0
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f7f8 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8008974:	b148      	cbz	r0, 800898a <_dtoa_r+0x162>
 8008976:	4650      	mov	r0, sl
 8008978:	f7f7 fdf4 	bl	8000564 <__aeabi_i2d>
 800897c:	4632      	mov	r2, r6
 800897e:	463b      	mov	r3, r7
 8008980:	f7f8 f8c2 	bl	8000b08 <__aeabi_dcmpeq>
 8008984:	b908      	cbnz	r0, 800898a <_dtoa_r+0x162>
 8008986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800898a:	f1ba 0f16 	cmp.w	sl, #22
 800898e:	d859      	bhi.n	8008a44 <_dtoa_r+0x21c>
 8008990:	4970      	ldr	r1, [pc, #448]	; (8008b54 <_dtoa_r+0x32c>)
 8008992:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800899a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899e:	f7f8 f8db 	bl	8000b58 <__aeabi_dcmpgt>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d050      	beq.n	8008a48 <_dtoa_r+0x220>
 80089a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089aa:	2300      	movs	r3, #0
 80089ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089b0:	1b5d      	subs	r5, r3, r5
 80089b2:	f1b5 0801 	subs.w	r8, r5, #1
 80089b6:	bf49      	itett	mi
 80089b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80089bc:	2300      	movpl	r3, #0
 80089be:	9305      	strmi	r3, [sp, #20]
 80089c0:	f04f 0800 	movmi.w	r8, #0
 80089c4:	bf58      	it	pl
 80089c6:	9305      	strpl	r3, [sp, #20]
 80089c8:	f1ba 0f00 	cmp.w	sl, #0
 80089cc:	db3e      	blt.n	8008a4c <_dtoa_r+0x224>
 80089ce:	2300      	movs	r3, #0
 80089d0:	44d0      	add	r8, sl
 80089d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	9b06      	ldr	r3, [sp, #24]
 80089da:	2b09      	cmp	r3, #9
 80089dc:	f200 8090 	bhi.w	8008b00 <_dtoa_r+0x2d8>
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	bfc4      	itt	gt
 80089e4:	3b04      	subgt	r3, #4
 80089e6:	9306      	strgt	r3, [sp, #24]
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	f1a3 0302 	sub.w	r3, r3, #2
 80089ee:	bfcc      	ite	gt
 80089f0:	2500      	movgt	r5, #0
 80089f2:	2501      	movle	r5, #1
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	f200 808f 	bhi.w	8008b18 <_dtoa_r+0x2f0>
 80089fa:	e8df f003 	tbb	[pc, r3]
 80089fe:	7f7d      	.short	0x7f7d
 8008a00:	7131      	.short	0x7131
 8008a02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a06:	441d      	add	r5, r3
 8008a08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a0c:	2820      	cmp	r0, #32
 8008a0e:	dd13      	ble.n	8008a38 <_dtoa_r+0x210>
 8008a10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	fa08 f800 	lsl.w	r8, r8, r0
 8008a1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a1e:	fa23 f000 	lsr.w	r0, r3, r0
 8008a22:	ea48 0000 	orr.w	r0, r8, r0
 8008a26:	f7f7 fd8d 	bl	8000544 <__aeabi_ui2d>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4682      	mov	sl, r0
 8008a2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008a32:	3d01      	subs	r5, #1
 8008a34:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a36:	e772      	b.n	800891e <_dtoa_r+0xf6>
 8008a38:	9b00      	ldr	r3, [sp, #0]
 8008a3a:	f1c0 0020 	rsb	r0, r0, #32
 8008a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a42:	e7f0      	b.n	8008a26 <_dtoa_r+0x1fe>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e7b1      	b.n	80089ac <_dtoa_r+0x184>
 8008a48:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a4a:	e7b0      	b.n	80089ae <_dtoa_r+0x186>
 8008a4c:	9b05      	ldr	r3, [sp, #20]
 8008a4e:	eba3 030a 	sub.w	r3, r3, sl
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	f1ca 0300 	rsb	r3, sl, #0
 8008a58:	9307      	str	r3, [sp, #28]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a5e:	e7bb      	b.n	80089d8 <_dtoa_r+0x1b0>
 8008a60:	2301      	movs	r3, #1
 8008a62:	930a      	str	r3, [sp, #40]	; 0x28
 8008a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	dd59      	ble.n	8008b1e <_dtoa_r+0x2f6>
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	4699      	mov	r9, r3
 8008a6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a70:	2200      	movs	r2, #0
 8008a72:	6072      	str	r2, [r6, #4]
 8008a74:	2204      	movs	r2, #4
 8008a76:	f102 0014 	add.w	r0, r2, #20
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	6871      	ldr	r1, [r6, #4]
 8008a7e:	d953      	bls.n	8008b28 <_dtoa_r+0x300>
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fcc0 	bl	8009406 <_Balloc>
 8008a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a88:	6030      	str	r0, [r6, #0]
 8008a8a:	f1b9 0f0e 	cmp.w	r9, #14
 8008a8e:	f8d3 b000 	ldr.w	fp, [r3]
 8008a92:	f200 80e6 	bhi.w	8008c62 <_dtoa_r+0x43a>
 8008a96:	2d00      	cmp	r5, #0
 8008a98:	f000 80e3 	beq.w	8008c62 <_dtoa_r+0x43a>
 8008a9c:	ed9d 7b00 	vldr	d7, [sp]
 8008aa0:	f1ba 0f00 	cmp.w	sl, #0
 8008aa4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008aa8:	dd74      	ble.n	8008b94 <_dtoa_r+0x36c>
 8008aaa:	4a2a      	ldr	r2, [pc, #168]	; (8008b54 <_dtoa_r+0x32c>)
 8008aac:	f00a 030f 	and.w	r3, sl, #15
 8008ab0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ab4:	ed93 7b00 	vldr	d7, [r3]
 8008ab8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008abc:	06f0      	lsls	r0, r6, #27
 8008abe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008ac2:	d565      	bpl.n	8008b90 <_dtoa_r+0x368>
 8008ac4:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <_dtoa_r+0x330>)
 8008ac6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008aca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ace:	f7f7 fedd 	bl	800088c <__aeabi_ddiv>
 8008ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ad6:	f006 060f 	and.w	r6, r6, #15
 8008ada:	2503      	movs	r5, #3
 8008adc:	4f1e      	ldr	r7, [pc, #120]	; (8008b58 <_dtoa_r+0x330>)
 8008ade:	e04c      	b.n	8008b7a <_dtoa_r+0x352>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae6:	4453      	add	r3, sl
 8008ae8:	f103 0901 	add.w	r9, r3, #1
 8008aec:	9302      	str	r3, [sp, #8]
 8008aee:	464b      	mov	r3, r9
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	bfb8      	it	lt
 8008af4:	2301      	movlt	r3, #1
 8008af6:	e7ba      	b.n	8008a6e <_dtoa_r+0x246>
 8008af8:	2300      	movs	r3, #0
 8008afa:	e7b2      	b.n	8008a62 <_dtoa_r+0x23a>
 8008afc:	2300      	movs	r3, #0
 8008afe:	e7f0      	b.n	8008ae2 <_dtoa_r+0x2ba>
 8008b00:	2501      	movs	r5, #1
 8008b02:	2300      	movs	r3, #0
 8008b04:	9306      	str	r3, [sp, #24]
 8008b06:	950a      	str	r5, [sp, #40]	; 0x28
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	4699      	mov	r9, r3
 8008b10:	2200      	movs	r2, #0
 8008b12:	2312      	movs	r3, #18
 8008b14:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b16:	e7aa      	b.n	8008a6e <_dtoa_r+0x246>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1c:	e7f4      	b.n	8008b08 <_dtoa_r+0x2e0>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	4699      	mov	r9, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	e7f5      	b.n	8008b14 <_dtoa_r+0x2ec>
 8008b28:	3101      	adds	r1, #1
 8008b2a:	6071      	str	r1, [r6, #4]
 8008b2c:	0052      	lsls	r2, r2, #1
 8008b2e:	e7a2      	b.n	8008a76 <_dtoa_r+0x24e>
 8008b30:	636f4361 	.word	0x636f4361
 8008b34:	3fd287a7 	.word	0x3fd287a7
 8008b38:	8b60c8b3 	.word	0x8b60c8b3
 8008b3c:	3fc68a28 	.word	0x3fc68a28
 8008b40:	509f79fb 	.word	0x509f79fb
 8008b44:	3fd34413 	.word	0x3fd34413
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	08009f6d 	.word	0x08009f6d
 8008b50:	3ff80000 	.word	0x3ff80000
 8008b54:	08009fd0 	.word	0x08009fd0
 8008b58:	08009fa8 	.word	0x08009fa8
 8008b5c:	08009f99 	.word	0x08009f99
 8008b60:	07f1      	lsls	r1, r6, #31
 8008b62:	d508      	bpl.n	8008b76 <_dtoa_r+0x34e>
 8008b64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b6c:	f7f7 fd64 	bl	8000638 <__aeabi_dmul>
 8008b70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b74:	3501      	adds	r5, #1
 8008b76:	1076      	asrs	r6, r6, #1
 8008b78:	3708      	adds	r7, #8
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d1f0      	bne.n	8008b60 <_dtoa_r+0x338>
 8008b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b86:	f7f7 fe81 	bl	800088c <__aeabi_ddiv>
 8008b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b8e:	e01a      	b.n	8008bc6 <_dtoa_r+0x39e>
 8008b90:	2502      	movs	r5, #2
 8008b92:	e7a3      	b.n	8008adc <_dtoa_r+0x2b4>
 8008b94:	f000 80a0 	beq.w	8008cd8 <_dtoa_r+0x4b0>
 8008b98:	f1ca 0600 	rsb	r6, sl, #0
 8008b9c:	4b9f      	ldr	r3, [pc, #636]	; (8008e1c <_dtoa_r+0x5f4>)
 8008b9e:	4fa0      	ldr	r7, [pc, #640]	; (8008e20 <_dtoa_r+0x5f8>)
 8008ba0:	f006 020f 	and.w	r2, r6, #15
 8008ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bb0:	f7f7 fd42 	bl	8000638 <__aeabi_dmul>
 8008bb4:	e9cd 0100 	strd	r0, r1, [sp]
 8008bb8:	1136      	asrs	r6, r6, #4
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2502      	movs	r5, #2
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	d17f      	bne.n	8008cc2 <_dtoa_r+0x49a>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e1      	bne.n	8008b8a <_dtoa_r+0x362>
 8008bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 8087 	beq.w	8008cdc <_dtoa_r+0x4b4>
 8008bce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4b93      	ldr	r3, [pc, #588]	; (8008e24 <_dtoa_r+0x5fc>)
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	4639      	mov	r1, r7
 8008bda:	f7f7 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d07c      	beq.n	8008cdc <_dtoa_r+0x4b4>
 8008be2:	f1b9 0f00 	cmp.w	r9, #0
 8008be6:	d079      	beq.n	8008cdc <_dtoa_r+0x4b4>
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dd35      	ble.n	8008c5a <_dtoa_r+0x432>
 8008bee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bf2:	9308      	str	r3, [sp, #32]
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4b8b      	ldr	r3, [pc, #556]	; (8008e28 <_dtoa_r+0x600>)
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7f7 fd1c 	bl	8000638 <__aeabi_dmul>
 8008c00:	e9cd 0100 	strd	r0, r1, [sp]
 8008c04:	9f02      	ldr	r7, [sp, #8]
 8008c06:	3501      	adds	r5, #1
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f7f7 fcab 	bl	8000564 <__aeabi_i2d>
 8008c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c12:	f7f7 fd11 	bl	8000638 <__aeabi_dmul>
 8008c16:	2200      	movs	r2, #0
 8008c18:	4b84      	ldr	r3, [pc, #528]	; (8008e2c <_dtoa_r+0x604>)
 8008c1a:	f7f7 fb57 	bl	80002cc <__adddf3>
 8008c1e:	4605      	mov	r5, r0
 8008c20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c24:	2f00      	cmp	r7, #0
 8008c26:	d15d      	bne.n	8008ce4 <_dtoa_r+0x4bc>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4b81      	ldr	r3, [pc, #516]	; (8008e30 <_dtoa_r+0x608>)
 8008c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c30:	f7f7 fb4a 	bl	80002c8 <__aeabi_dsub>
 8008c34:	462a      	mov	r2, r5
 8008c36:	4633      	mov	r3, r6
 8008c38:	e9cd 0100 	strd	r0, r1, [sp]
 8008c3c:	f7f7 ff8c 	bl	8000b58 <__aeabi_dcmpgt>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	f040 8288 	bne.w	8009156 <_dtoa_r+0x92e>
 8008c46:	462a      	mov	r2, r5
 8008c48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c50:	f7f7 ff64 	bl	8000b1c <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 827c 	bne.w	8009152 <_dtoa_r+0x92a>
 8008c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8008c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f2c0 8150 	blt.w	8008f0a <_dtoa_r+0x6e2>
 8008c6a:	f1ba 0f0e 	cmp.w	sl, #14
 8008c6e:	f300 814c 	bgt.w	8008f0a <_dtoa_r+0x6e2>
 8008c72:	4b6a      	ldr	r3, [pc, #424]	; (8008e1c <_dtoa_r+0x5f4>)
 8008c74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c78:	ed93 7b00 	vldr	d7, [r3]
 8008c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c84:	f280 80d8 	bge.w	8008e38 <_dtoa_r+0x610>
 8008c88:	f1b9 0f00 	cmp.w	r9, #0
 8008c8c:	f300 80d4 	bgt.w	8008e38 <_dtoa_r+0x610>
 8008c90:	f040 825e 	bne.w	8009150 <_dtoa_r+0x928>
 8008c94:	2200      	movs	r2, #0
 8008c96:	4b66      	ldr	r3, [pc, #408]	; (8008e30 <_dtoa_r+0x608>)
 8008c98:	ec51 0b17 	vmov	r0, r1, d7
 8008c9c:	f7f7 fccc 	bl	8000638 <__aeabi_dmul>
 8008ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca4:	f7f7 ff4e 	bl	8000b44 <__aeabi_dcmpge>
 8008ca8:	464f      	mov	r7, r9
 8008caa:	464e      	mov	r6, r9
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 8234 	bne.w	800911a <_dtoa_r+0x8f2>
 8008cb2:	2331      	movs	r3, #49	; 0x31
 8008cb4:	f10b 0501 	add.w	r5, fp, #1
 8008cb8:	f88b 3000 	strb.w	r3, [fp]
 8008cbc:	f10a 0a01 	add.w	sl, sl, #1
 8008cc0:	e22f      	b.n	8009122 <_dtoa_r+0x8fa>
 8008cc2:	07f2      	lsls	r2, r6, #31
 8008cc4:	d505      	bpl.n	8008cd2 <_dtoa_r+0x4aa>
 8008cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cca:	f7f7 fcb5 	bl	8000638 <__aeabi_dmul>
 8008cce:	3501      	adds	r5, #1
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	1076      	asrs	r6, r6, #1
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	e772      	b.n	8008bbe <_dtoa_r+0x396>
 8008cd8:	2502      	movs	r5, #2
 8008cda:	e774      	b.n	8008bc6 <_dtoa_r+0x39e>
 8008cdc:	f8cd a020 	str.w	sl, [sp, #32]
 8008ce0:	464f      	mov	r7, r9
 8008ce2:	e791      	b.n	8008c08 <_dtoa_r+0x3e0>
 8008ce4:	4b4d      	ldr	r3, [pc, #308]	; (8008e1c <_dtoa_r+0x5f4>)
 8008ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d047      	beq.n	8008d84 <_dtoa_r+0x55c>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	494e      	ldr	r1, [pc, #312]	; (8008e34 <_dtoa_r+0x60c>)
 8008cfc:	f7f7 fdc6 	bl	800088c <__aeabi_ddiv>
 8008d00:	462a      	mov	r2, r5
 8008d02:	4633      	mov	r3, r6
 8008d04:	f7f7 fae0 	bl	80002c8 <__aeabi_dsub>
 8008d08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d0c:	465d      	mov	r5, fp
 8008d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d12:	f7f7 ff41 	bl	8000b98 <__aeabi_d2iz>
 8008d16:	4606      	mov	r6, r0
 8008d18:	f7f7 fc24 	bl	8000564 <__aeabi_i2d>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d24:	f7f7 fad0 	bl	80002c8 <__aeabi_dsub>
 8008d28:	3630      	adds	r6, #48	; 0x30
 8008d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d32:	e9cd 0100 	strd	r0, r1, [sp]
 8008d36:	f7f7 fef1 	bl	8000b1c <__aeabi_dcmplt>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d163      	bne.n	8008e06 <_dtoa_r+0x5de>
 8008d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d42:	2000      	movs	r0, #0
 8008d44:	4937      	ldr	r1, [pc, #220]	; (8008e24 <_dtoa_r+0x5fc>)
 8008d46:	f7f7 fabf 	bl	80002c8 <__aeabi_dsub>
 8008d4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d4e:	f7f7 fee5 	bl	8000b1c <__aeabi_dcmplt>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	f040 80b7 	bne.w	8008ec6 <_dtoa_r+0x69e>
 8008d58:	eba5 030b 	sub.w	r3, r5, fp
 8008d5c:	429f      	cmp	r7, r3
 8008d5e:	f77f af7c 	ble.w	8008c5a <_dtoa_r+0x432>
 8008d62:	2200      	movs	r2, #0
 8008d64:	4b30      	ldr	r3, [pc, #192]	; (8008e28 <_dtoa_r+0x600>)
 8008d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d6a:	f7f7 fc65 	bl	8000638 <__aeabi_dmul>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d74:	4b2c      	ldr	r3, [pc, #176]	; (8008e28 <_dtoa_r+0x600>)
 8008d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d7a:	f7f7 fc5d 	bl	8000638 <__aeabi_dmul>
 8008d7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d82:	e7c4      	b.n	8008d0e <_dtoa_r+0x4e6>
 8008d84:	462a      	mov	r2, r5
 8008d86:	4633      	mov	r3, r6
 8008d88:	f7f7 fc56 	bl	8000638 <__aeabi_dmul>
 8008d8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d90:	eb0b 0507 	add.w	r5, fp, r7
 8008d94:	465e      	mov	r6, fp
 8008d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d9a:	f7f7 fefd 	bl	8000b98 <__aeabi_d2iz>
 8008d9e:	4607      	mov	r7, r0
 8008da0:	f7f7 fbe0 	bl	8000564 <__aeabi_i2d>
 8008da4:	3730      	adds	r7, #48	; 0x30
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dae:	f7f7 fa8b 	bl	80002c8 <__aeabi_dsub>
 8008db2:	f806 7b01 	strb.w	r7, [r6], #1
 8008db6:	42ae      	cmp	r6, r5
 8008db8:	e9cd 0100 	strd	r0, r1, [sp]
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	d126      	bne.n	8008e10 <_dtoa_r+0x5e8>
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <_dtoa_r+0x60c>)
 8008dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dc8:	f7f7 fa80 	bl	80002cc <__adddf3>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dd4:	f7f7 fec0 	bl	8000b58 <__aeabi_dcmpgt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d174      	bne.n	8008ec6 <_dtoa_r+0x69e>
 8008ddc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008de0:	2000      	movs	r0, #0
 8008de2:	4914      	ldr	r1, [pc, #80]	; (8008e34 <_dtoa_r+0x60c>)
 8008de4:	f7f7 fa70 	bl	80002c8 <__aeabi_dsub>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008df0:	f7f7 fe94 	bl	8000b1c <__aeabi_dcmplt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f43f af30 	beq.w	8008c5a <_dtoa_r+0x432>
 8008dfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dfe:	2b30      	cmp	r3, #48	; 0x30
 8008e00:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e04:	d002      	beq.n	8008e0c <_dtoa_r+0x5e4>
 8008e06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e0a:	e04a      	b.n	8008ea2 <_dtoa_r+0x67a>
 8008e0c:	4615      	mov	r5, r2
 8008e0e:	e7f4      	b.n	8008dfa <_dtoa_r+0x5d2>
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <_dtoa_r+0x600>)
 8008e12:	f7f7 fc11 	bl	8000638 <__aeabi_dmul>
 8008e16:	e9cd 0100 	strd	r0, r1, [sp]
 8008e1a:	e7bc      	b.n	8008d96 <_dtoa_r+0x56e>
 8008e1c:	08009fd0 	.word	0x08009fd0
 8008e20:	08009fa8 	.word	0x08009fa8
 8008e24:	3ff00000 	.word	0x3ff00000
 8008e28:	40240000 	.word	0x40240000
 8008e2c:	401c0000 	.word	0x401c0000
 8008e30:	40140000 	.word	0x40140000
 8008e34:	3fe00000 	.word	0x3fe00000
 8008e38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e3c:	465d      	mov	r5, fp
 8008e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7f7 fd21 	bl	800088c <__aeabi_ddiv>
 8008e4a:	f7f7 fea5 	bl	8000b98 <__aeabi_d2iz>
 8008e4e:	4680      	mov	r8, r0
 8008e50:	f7f7 fb88 	bl	8000564 <__aeabi_i2d>
 8008e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e58:	f7f7 fbee 	bl	8000638 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008e68:	f7f7 fa2e 	bl	80002c8 <__aeabi_dsub>
 8008e6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e70:	eba5 060b 	sub.w	r6, r5, fp
 8008e74:	45b1      	cmp	r9, r6
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	d139      	bne.n	8008ef0 <_dtoa_r+0x6c8>
 8008e7c:	f7f7 fa26 	bl	80002cc <__adddf3>
 8008e80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e84:	4606      	mov	r6, r0
 8008e86:	460f      	mov	r7, r1
 8008e88:	f7f7 fe66 	bl	8000b58 <__aeabi_dcmpgt>
 8008e8c:	b9c8      	cbnz	r0, 8008ec2 <_dtoa_r+0x69a>
 8008e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e92:	4630      	mov	r0, r6
 8008e94:	4639      	mov	r1, r7
 8008e96:	f7f7 fe37 	bl	8000b08 <__aeabi_dcmpeq>
 8008e9a:	b110      	cbz	r0, 8008ea2 <_dtoa_r+0x67a>
 8008e9c:	f018 0f01 	tst.w	r8, #1
 8008ea0:	d10f      	bne.n	8008ec2 <_dtoa_r+0x69a>
 8008ea2:	9904      	ldr	r1, [sp, #16]
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fae2 	bl	800946e <_Bfree>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eae:	702b      	strb	r3, [r5, #0]
 8008eb0:	f10a 0301 	add.w	r3, sl, #1
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 8241 	beq.w	8009340 <_dtoa_r+0xb18>
 8008ebe:	601d      	str	r5, [r3, #0]
 8008ec0:	e23e      	b.n	8009340 <_dtoa_r+0xb18>
 8008ec2:	f8cd a020 	str.w	sl, [sp, #32]
 8008ec6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eca:	2a39      	cmp	r2, #57	; 0x39
 8008ecc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ed0:	d108      	bne.n	8008ee4 <_dtoa_r+0x6bc>
 8008ed2:	459b      	cmp	fp, r3
 8008ed4:	d10a      	bne.n	8008eec <_dtoa_r+0x6c4>
 8008ed6:	9b08      	ldr	r3, [sp, #32]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	9308      	str	r3, [sp, #32]
 8008edc:	2330      	movs	r3, #48	; 0x30
 8008ede:	f88b 3000 	strb.w	r3, [fp]
 8008ee2:	465b      	mov	r3, fp
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	e78c      	b.n	8008e06 <_dtoa_r+0x5de>
 8008eec:	461d      	mov	r5, r3
 8008eee:	e7ea      	b.n	8008ec6 <_dtoa_r+0x69e>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4b9b      	ldr	r3, [pc, #620]	; (8009160 <_dtoa_r+0x938>)
 8008ef4:	f7f7 fba0 	bl	8000638 <__aeabi_dmul>
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2300      	movs	r3, #0
 8008efc:	4606      	mov	r6, r0
 8008efe:	460f      	mov	r7, r1
 8008f00:	f7f7 fe02 	bl	8000b08 <__aeabi_dcmpeq>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d09a      	beq.n	8008e3e <_dtoa_r+0x616>
 8008f08:	e7cb      	b.n	8008ea2 <_dtoa_r+0x67a>
 8008f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	f000 808b 	beq.w	8009028 <_dtoa_r+0x800>
 8008f12:	9a06      	ldr	r2, [sp, #24]
 8008f14:	2a01      	cmp	r2, #1
 8008f16:	dc6e      	bgt.n	8008ff6 <_dtoa_r+0x7ce>
 8008f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f1a:	2a00      	cmp	r2, #0
 8008f1c:	d067      	beq.n	8008fee <_dtoa_r+0x7c6>
 8008f1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f22:	9f07      	ldr	r7, [sp, #28]
 8008f24:	9d05      	ldr	r5, [sp, #20]
 8008f26:	9a05      	ldr	r2, [sp, #20]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	441a      	add	r2, r3
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	9205      	str	r2, [sp, #20]
 8008f30:	4498      	add	r8, r3
 8008f32:	f000 fb3c 	bl	80095ae <__i2b>
 8008f36:	4606      	mov	r6, r0
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	dd0c      	ble.n	8008f56 <_dtoa_r+0x72e>
 8008f3c:	f1b8 0f00 	cmp.w	r8, #0
 8008f40:	dd09      	ble.n	8008f56 <_dtoa_r+0x72e>
 8008f42:	4545      	cmp	r5, r8
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	462b      	mov	r3, r5
 8008f48:	bfa8      	it	ge
 8008f4a:	4643      	movge	r3, r8
 8008f4c:	1ad2      	subs	r2, r2, r3
 8008f4e:	9205      	str	r2, [sp, #20]
 8008f50:	1aed      	subs	r5, r5, r3
 8008f52:	eba8 0803 	sub.w	r8, r8, r3
 8008f56:	9b07      	ldr	r3, [sp, #28]
 8008f58:	b1eb      	cbz	r3, 8008f96 <_dtoa_r+0x76e>
 8008f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d067      	beq.n	8009030 <_dtoa_r+0x808>
 8008f60:	b18f      	cbz	r7, 8008f86 <_dtoa_r+0x75e>
 8008f62:	4631      	mov	r1, r6
 8008f64:	463a      	mov	r2, r7
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fbc0 	bl	80096ec <__pow5mult>
 8008f6c:	9a04      	ldr	r2, [sp, #16]
 8008f6e:	4601      	mov	r1, r0
 8008f70:	4606      	mov	r6, r0
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fb24 	bl	80095c0 <__multiply>
 8008f78:	9904      	ldr	r1, [sp, #16]
 8008f7a:	9008      	str	r0, [sp, #32]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 fa76 	bl	800946e <_Bfree>
 8008f82:	9b08      	ldr	r3, [sp, #32]
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	1bda      	subs	r2, r3, r7
 8008f8a:	d004      	beq.n	8008f96 <_dtoa_r+0x76e>
 8008f8c:	9904      	ldr	r1, [sp, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fbac 	bl	80096ec <__pow5mult>
 8008f94:	9004      	str	r0, [sp, #16]
 8008f96:	2101      	movs	r1, #1
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 fb08 	bl	80095ae <__i2b>
 8008f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 81d0 	beq.w	8009348 <_dtoa_r+0xb20>
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4601      	mov	r1, r0
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 fb9d 	bl	80096ec <__pow5mult>
 8008fb2:	9b06      	ldr	r3, [sp, #24]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	dc40      	bgt.n	800903c <_dtoa_r+0x814>
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d139      	bne.n	8009034 <_dtoa_r+0x80c>
 8008fc0:	9b01      	ldr	r3, [sp, #4]
 8008fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d136      	bne.n	8009038 <_dtoa_r+0x810>
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fd0:	0d1b      	lsrs	r3, r3, #20
 8008fd2:	051b      	lsls	r3, r3, #20
 8008fd4:	b12b      	cbz	r3, 8008fe2 <_dtoa_r+0x7ba>
 8008fd6:	9b05      	ldr	r3, [sp, #20]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	f108 0801 	add.w	r8, r8, #1
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	9307      	str	r3, [sp, #28]
 8008fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d12a      	bne.n	8009040 <_dtoa_r+0x818>
 8008fea:	2001      	movs	r0, #1
 8008fec:	e030      	b.n	8009050 <_dtoa_r+0x828>
 8008fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ff0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ff4:	e795      	b.n	8008f22 <_dtoa_r+0x6fa>
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008ffc:	42bb      	cmp	r3, r7
 8008ffe:	bfbf      	itttt	lt
 8009000:	9b07      	ldrlt	r3, [sp, #28]
 8009002:	9707      	strlt	r7, [sp, #28]
 8009004:	1afa      	sublt	r2, r7, r3
 8009006:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009008:	bfbb      	ittet	lt
 800900a:	189b      	addlt	r3, r3, r2
 800900c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800900e:	1bdf      	subge	r7, r3, r7
 8009010:	2700      	movlt	r7, #0
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	bfb5      	itete	lt
 8009018:	9b05      	ldrlt	r3, [sp, #20]
 800901a:	9d05      	ldrge	r5, [sp, #20]
 800901c:	eba3 0509 	sublt.w	r5, r3, r9
 8009020:	464b      	movge	r3, r9
 8009022:	bfb8      	it	lt
 8009024:	2300      	movlt	r3, #0
 8009026:	e77e      	b.n	8008f26 <_dtoa_r+0x6fe>
 8009028:	9f07      	ldr	r7, [sp, #28]
 800902a:	9d05      	ldr	r5, [sp, #20]
 800902c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800902e:	e783      	b.n	8008f38 <_dtoa_r+0x710>
 8009030:	9a07      	ldr	r2, [sp, #28]
 8009032:	e7ab      	b.n	8008f8c <_dtoa_r+0x764>
 8009034:	2300      	movs	r3, #0
 8009036:	e7d4      	b.n	8008fe2 <_dtoa_r+0x7ba>
 8009038:	9b00      	ldr	r3, [sp, #0]
 800903a:	e7d2      	b.n	8008fe2 <_dtoa_r+0x7ba>
 800903c:	2300      	movs	r3, #0
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009046:	6918      	ldr	r0, [r3, #16]
 8009048:	f000 fa63 	bl	8009512 <__hi0bits>
 800904c:	f1c0 0020 	rsb	r0, r0, #32
 8009050:	4440      	add	r0, r8
 8009052:	f010 001f 	ands.w	r0, r0, #31
 8009056:	d047      	beq.n	80090e8 <_dtoa_r+0x8c0>
 8009058:	f1c0 0320 	rsb	r3, r0, #32
 800905c:	2b04      	cmp	r3, #4
 800905e:	dd3b      	ble.n	80090d8 <_dtoa_r+0x8b0>
 8009060:	9b05      	ldr	r3, [sp, #20]
 8009062:	f1c0 001c 	rsb	r0, r0, #28
 8009066:	4403      	add	r3, r0
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	4405      	add	r5, r0
 800906c:	4480      	add	r8, r0
 800906e:	9b05      	ldr	r3, [sp, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	dd05      	ble.n	8009080 <_dtoa_r+0x858>
 8009074:	461a      	mov	r2, r3
 8009076:	9904      	ldr	r1, [sp, #16]
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fb85 	bl	8009788 <__lshift>
 800907e:	9004      	str	r0, [sp, #16]
 8009080:	f1b8 0f00 	cmp.w	r8, #0
 8009084:	dd05      	ble.n	8009092 <_dtoa_r+0x86a>
 8009086:	4639      	mov	r1, r7
 8009088:	4642      	mov	r2, r8
 800908a:	4620      	mov	r0, r4
 800908c:	f000 fb7c 	bl	8009788 <__lshift>
 8009090:	4607      	mov	r7, r0
 8009092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009094:	b353      	cbz	r3, 80090ec <_dtoa_r+0x8c4>
 8009096:	4639      	mov	r1, r7
 8009098:	9804      	ldr	r0, [sp, #16]
 800909a:	f000 fbc9 	bl	8009830 <__mcmp>
 800909e:	2800      	cmp	r0, #0
 80090a0:	da24      	bge.n	80090ec <_dtoa_r+0x8c4>
 80090a2:	2300      	movs	r3, #0
 80090a4:	220a      	movs	r2, #10
 80090a6:	9904      	ldr	r1, [sp, #16]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 f9f7 	bl	800949c <__multadd>
 80090ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b0:	9004      	str	r0, [sp, #16]
 80090b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 814d 	beq.w	8009356 <_dtoa_r+0xb2e>
 80090bc:	2300      	movs	r3, #0
 80090be:	4631      	mov	r1, r6
 80090c0:	220a      	movs	r2, #10
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f9ea 	bl	800949c <__multadd>
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	4606      	mov	r6, r0
 80090ce:	dc4f      	bgt.n	8009170 <_dtoa_r+0x948>
 80090d0:	9b06      	ldr	r3, [sp, #24]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	dd4c      	ble.n	8009170 <_dtoa_r+0x948>
 80090d6:	e011      	b.n	80090fc <_dtoa_r+0x8d4>
 80090d8:	d0c9      	beq.n	800906e <_dtoa_r+0x846>
 80090da:	9a05      	ldr	r2, [sp, #20]
 80090dc:	331c      	adds	r3, #28
 80090de:	441a      	add	r2, r3
 80090e0:	9205      	str	r2, [sp, #20]
 80090e2:	441d      	add	r5, r3
 80090e4:	4498      	add	r8, r3
 80090e6:	e7c2      	b.n	800906e <_dtoa_r+0x846>
 80090e8:	4603      	mov	r3, r0
 80090ea:	e7f6      	b.n	80090da <_dtoa_r+0x8b2>
 80090ec:	f1b9 0f00 	cmp.w	r9, #0
 80090f0:	dc38      	bgt.n	8009164 <_dtoa_r+0x93c>
 80090f2:	9b06      	ldr	r3, [sp, #24]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	dd35      	ble.n	8009164 <_dtoa_r+0x93c>
 80090f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80090fc:	9b02      	ldr	r3, [sp, #8]
 80090fe:	b963      	cbnz	r3, 800911a <_dtoa_r+0x8f2>
 8009100:	4639      	mov	r1, r7
 8009102:	2205      	movs	r2, #5
 8009104:	4620      	mov	r0, r4
 8009106:	f000 f9c9 	bl	800949c <__multadd>
 800910a:	4601      	mov	r1, r0
 800910c:	4607      	mov	r7, r0
 800910e:	9804      	ldr	r0, [sp, #16]
 8009110:	f000 fb8e 	bl	8009830 <__mcmp>
 8009114:	2800      	cmp	r0, #0
 8009116:	f73f adcc 	bgt.w	8008cb2 <_dtoa_r+0x48a>
 800911a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800911c:	465d      	mov	r5, fp
 800911e:	ea6f 0a03 	mvn.w	sl, r3
 8009122:	f04f 0900 	mov.w	r9, #0
 8009126:	4639      	mov	r1, r7
 8009128:	4620      	mov	r0, r4
 800912a:	f000 f9a0 	bl	800946e <_Bfree>
 800912e:	2e00      	cmp	r6, #0
 8009130:	f43f aeb7 	beq.w	8008ea2 <_dtoa_r+0x67a>
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	d005      	beq.n	8009146 <_dtoa_r+0x91e>
 800913a:	45b1      	cmp	r9, r6
 800913c:	d003      	beq.n	8009146 <_dtoa_r+0x91e>
 800913e:	4649      	mov	r1, r9
 8009140:	4620      	mov	r0, r4
 8009142:	f000 f994 	bl	800946e <_Bfree>
 8009146:	4631      	mov	r1, r6
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f990 	bl	800946e <_Bfree>
 800914e:	e6a8      	b.n	8008ea2 <_dtoa_r+0x67a>
 8009150:	2700      	movs	r7, #0
 8009152:	463e      	mov	r6, r7
 8009154:	e7e1      	b.n	800911a <_dtoa_r+0x8f2>
 8009156:	f8dd a020 	ldr.w	sl, [sp, #32]
 800915a:	463e      	mov	r6, r7
 800915c:	e5a9      	b.n	8008cb2 <_dtoa_r+0x48a>
 800915e:	bf00      	nop
 8009160:	40240000 	.word	0x40240000
 8009164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009166:	f8cd 9008 	str.w	r9, [sp, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80fa 	beq.w	8009364 <_dtoa_r+0xb3c>
 8009170:	2d00      	cmp	r5, #0
 8009172:	dd05      	ble.n	8009180 <_dtoa_r+0x958>
 8009174:	4631      	mov	r1, r6
 8009176:	462a      	mov	r2, r5
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fb05 	bl	8009788 <__lshift>
 800917e:	4606      	mov	r6, r0
 8009180:	9b07      	ldr	r3, [sp, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d04c      	beq.n	8009220 <_dtoa_r+0x9f8>
 8009186:	6871      	ldr	r1, [r6, #4]
 8009188:	4620      	mov	r0, r4
 800918a:	f000 f93c 	bl	8009406 <_Balloc>
 800918e:	6932      	ldr	r2, [r6, #16]
 8009190:	3202      	adds	r2, #2
 8009192:	4605      	mov	r5, r0
 8009194:	0092      	lsls	r2, r2, #2
 8009196:	f106 010c 	add.w	r1, r6, #12
 800919a:	300c      	adds	r0, #12
 800919c:	f000 f928 	bl	80093f0 <memcpy>
 80091a0:	2201      	movs	r2, #1
 80091a2:	4629      	mov	r1, r5
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 faef 	bl	8009788 <__lshift>
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	f8cd b014 	str.w	fp, [sp, #20]
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	46b1      	mov	r9, r6
 80091b6:	9307      	str	r3, [sp, #28]
 80091b8:	4606      	mov	r6, r0
 80091ba:	4639      	mov	r1, r7
 80091bc:	9804      	ldr	r0, [sp, #16]
 80091be:	f7ff faa5 	bl	800870c <quorem>
 80091c2:	4649      	mov	r1, r9
 80091c4:	4605      	mov	r5, r0
 80091c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80091ca:	9804      	ldr	r0, [sp, #16]
 80091cc:	f000 fb30 	bl	8009830 <__mcmp>
 80091d0:	4632      	mov	r2, r6
 80091d2:	9000      	str	r0, [sp, #0]
 80091d4:	4639      	mov	r1, r7
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fb44 	bl	8009864 <__mdiff>
 80091dc:	68c3      	ldr	r3, [r0, #12]
 80091de:	4602      	mov	r2, r0
 80091e0:	bb03      	cbnz	r3, 8009224 <_dtoa_r+0x9fc>
 80091e2:	4601      	mov	r1, r0
 80091e4:	9008      	str	r0, [sp, #32]
 80091e6:	9804      	ldr	r0, [sp, #16]
 80091e8:	f000 fb22 	bl	8009830 <__mcmp>
 80091ec:	9a08      	ldr	r2, [sp, #32]
 80091ee:	4603      	mov	r3, r0
 80091f0:	4611      	mov	r1, r2
 80091f2:	4620      	mov	r0, r4
 80091f4:	9308      	str	r3, [sp, #32]
 80091f6:	f000 f93a 	bl	800946e <_Bfree>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	b9a3      	cbnz	r3, 8009228 <_dtoa_r+0xa00>
 80091fe:	9a06      	ldr	r2, [sp, #24]
 8009200:	b992      	cbnz	r2, 8009228 <_dtoa_r+0xa00>
 8009202:	9a07      	ldr	r2, [sp, #28]
 8009204:	b982      	cbnz	r2, 8009228 <_dtoa_r+0xa00>
 8009206:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800920a:	d029      	beq.n	8009260 <_dtoa_r+0xa38>
 800920c:	9b00      	ldr	r3, [sp, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd01      	ble.n	8009216 <_dtoa_r+0x9ee>
 8009212:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009216:	9b05      	ldr	r3, [sp, #20]
 8009218:	1c5d      	adds	r5, r3, #1
 800921a:	f883 8000 	strb.w	r8, [r3]
 800921e:	e782      	b.n	8009126 <_dtoa_r+0x8fe>
 8009220:	4630      	mov	r0, r6
 8009222:	e7c2      	b.n	80091aa <_dtoa_r+0x982>
 8009224:	2301      	movs	r3, #1
 8009226:	e7e3      	b.n	80091f0 <_dtoa_r+0x9c8>
 8009228:	9a00      	ldr	r2, [sp, #0]
 800922a:	2a00      	cmp	r2, #0
 800922c:	db04      	blt.n	8009238 <_dtoa_r+0xa10>
 800922e:	d125      	bne.n	800927c <_dtoa_r+0xa54>
 8009230:	9a06      	ldr	r2, [sp, #24]
 8009232:	bb1a      	cbnz	r2, 800927c <_dtoa_r+0xa54>
 8009234:	9a07      	ldr	r2, [sp, #28]
 8009236:	bb0a      	cbnz	r2, 800927c <_dtoa_r+0xa54>
 8009238:	2b00      	cmp	r3, #0
 800923a:	ddec      	ble.n	8009216 <_dtoa_r+0x9ee>
 800923c:	2201      	movs	r2, #1
 800923e:	9904      	ldr	r1, [sp, #16]
 8009240:	4620      	mov	r0, r4
 8009242:	f000 faa1 	bl	8009788 <__lshift>
 8009246:	4639      	mov	r1, r7
 8009248:	9004      	str	r0, [sp, #16]
 800924a:	f000 faf1 	bl	8009830 <__mcmp>
 800924e:	2800      	cmp	r0, #0
 8009250:	dc03      	bgt.n	800925a <_dtoa_r+0xa32>
 8009252:	d1e0      	bne.n	8009216 <_dtoa_r+0x9ee>
 8009254:	f018 0f01 	tst.w	r8, #1
 8009258:	d0dd      	beq.n	8009216 <_dtoa_r+0x9ee>
 800925a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800925e:	d1d8      	bne.n	8009212 <_dtoa_r+0x9ea>
 8009260:	9b05      	ldr	r3, [sp, #20]
 8009262:	9a05      	ldr	r2, [sp, #20]
 8009264:	1c5d      	adds	r5, r3, #1
 8009266:	2339      	movs	r3, #57	; 0x39
 8009268:	7013      	strb	r3, [r2, #0]
 800926a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800926e:	2b39      	cmp	r3, #57	; 0x39
 8009270:	f105 32ff 	add.w	r2, r5, #4294967295
 8009274:	d04f      	beq.n	8009316 <_dtoa_r+0xaee>
 8009276:	3301      	adds	r3, #1
 8009278:	7013      	strb	r3, [r2, #0]
 800927a:	e754      	b.n	8009126 <_dtoa_r+0x8fe>
 800927c:	9a05      	ldr	r2, [sp, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	f102 0501 	add.w	r5, r2, #1
 8009284:	dd06      	ble.n	8009294 <_dtoa_r+0xa6c>
 8009286:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800928a:	d0e9      	beq.n	8009260 <_dtoa_r+0xa38>
 800928c:	f108 0801 	add.w	r8, r8, #1
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	e7c2      	b.n	800921a <_dtoa_r+0x9f2>
 8009294:	9a02      	ldr	r2, [sp, #8]
 8009296:	f805 8c01 	strb.w	r8, [r5, #-1]
 800929a:	eba5 030b 	sub.w	r3, r5, fp
 800929e:	4293      	cmp	r3, r2
 80092a0:	d021      	beq.n	80092e6 <_dtoa_r+0xabe>
 80092a2:	2300      	movs	r3, #0
 80092a4:	220a      	movs	r2, #10
 80092a6:	9904      	ldr	r1, [sp, #16]
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 f8f7 	bl	800949c <__multadd>
 80092ae:	45b1      	cmp	r9, r6
 80092b0:	9004      	str	r0, [sp, #16]
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	f04f 020a 	mov.w	r2, #10
 80092ba:	4649      	mov	r1, r9
 80092bc:	4620      	mov	r0, r4
 80092be:	d105      	bne.n	80092cc <_dtoa_r+0xaa4>
 80092c0:	f000 f8ec 	bl	800949c <__multadd>
 80092c4:	4681      	mov	r9, r0
 80092c6:	4606      	mov	r6, r0
 80092c8:	9505      	str	r5, [sp, #20]
 80092ca:	e776      	b.n	80091ba <_dtoa_r+0x992>
 80092cc:	f000 f8e6 	bl	800949c <__multadd>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4681      	mov	r9, r0
 80092d4:	2300      	movs	r3, #0
 80092d6:	220a      	movs	r2, #10
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 f8df 	bl	800949c <__multadd>
 80092de:	4606      	mov	r6, r0
 80092e0:	e7f2      	b.n	80092c8 <_dtoa_r+0xaa0>
 80092e2:	f04f 0900 	mov.w	r9, #0
 80092e6:	2201      	movs	r2, #1
 80092e8:	9904      	ldr	r1, [sp, #16]
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fa4c 	bl	8009788 <__lshift>
 80092f0:	4639      	mov	r1, r7
 80092f2:	9004      	str	r0, [sp, #16]
 80092f4:	f000 fa9c 	bl	8009830 <__mcmp>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	dcb6      	bgt.n	800926a <_dtoa_r+0xa42>
 80092fc:	d102      	bne.n	8009304 <_dtoa_r+0xadc>
 80092fe:	f018 0f01 	tst.w	r8, #1
 8009302:	d1b2      	bne.n	800926a <_dtoa_r+0xa42>
 8009304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009308:	2b30      	cmp	r3, #48	; 0x30
 800930a:	f105 32ff 	add.w	r2, r5, #4294967295
 800930e:	f47f af0a 	bne.w	8009126 <_dtoa_r+0x8fe>
 8009312:	4615      	mov	r5, r2
 8009314:	e7f6      	b.n	8009304 <_dtoa_r+0xadc>
 8009316:	4593      	cmp	fp, r2
 8009318:	d105      	bne.n	8009326 <_dtoa_r+0xafe>
 800931a:	2331      	movs	r3, #49	; 0x31
 800931c:	f10a 0a01 	add.w	sl, sl, #1
 8009320:	f88b 3000 	strb.w	r3, [fp]
 8009324:	e6ff      	b.n	8009126 <_dtoa_r+0x8fe>
 8009326:	4615      	mov	r5, r2
 8009328:	e79f      	b.n	800926a <_dtoa_r+0xa42>
 800932a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009390 <_dtoa_r+0xb68>
 800932e:	e007      	b.n	8009340 <_dtoa_r+0xb18>
 8009330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009332:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009394 <_dtoa_r+0xb6c>
 8009336:	b11b      	cbz	r3, 8009340 <_dtoa_r+0xb18>
 8009338:	f10b 0308 	add.w	r3, fp, #8
 800933c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	4658      	mov	r0, fp
 8009342:	b017      	add	sp, #92	; 0x5c
 8009344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009348:	9b06      	ldr	r3, [sp, #24]
 800934a:	2b01      	cmp	r3, #1
 800934c:	f77f ae35 	ble.w	8008fba <_dtoa_r+0x792>
 8009350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009352:	9307      	str	r3, [sp, #28]
 8009354:	e649      	b.n	8008fea <_dtoa_r+0x7c2>
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	dc03      	bgt.n	8009364 <_dtoa_r+0xb3c>
 800935c:	9b06      	ldr	r3, [sp, #24]
 800935e:	2b02      	cmp	r3, #2
 8009360:	f73f aecc 	bgt.w	80090fc <_dtoa_r+0x8d4>
 8009364:	465d      	mov	r5, fp
 8009366:	4639      	mov	r1, r7
 8009368:	9804      	ldr	r0, [sp, #16]
 800936a:	f7ff f9cf 	bl	800870c <quorem>
 800936e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009372:	f805 8b01 	strb.w	r8, [r5], #1
 8009376:	9a02      	ldr	r2, [sp, #8]
 8009378:	eba5 030b 	sub.w	r3, r5, fp
 800937c:	429a      	cmp	r2, r3
 800937e:	ddb0      	ble.n	80092e2 <_dtoa_r+0xaba>
 8009380:	2300      	movs	r3, #0
 8009382:	220a      	movs	r2, #10
 8009384:	9904      	ldr	r1, [sp, #16]
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f888 	bl	800949c <__multadd>
 800938c:	9004      	str	r0, [sp, #16]
 800938e:	e7ea      	b.n	8009366 <_dtoa_r+0xb3e>
 8009390:	08009f6c 	.word	0x08009f6c
 8009394:	08009f90 	.word	0x08009f90

08009398 <__locale_ctype_ptr_l>:
 8009398:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800939c:	4770      	bx	lr
	...

080093a0 <_localeconv_r>:
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <_localeconv_r+0x14>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6a18      	ldr	r0, [r3, #32]
 80093a6:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <_localeconv_r+0x18>)
 80093a8:	2800      	cmp	r0, #0
 80093aa:	bf08      	it	eq
 80093ac:	4618      	moveq	r0, r3
 80093ae:	30f0      	adds	r0, #240	; 0xf0
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000018 	.word	0x20000018
 80093b8:	2000007c 	.word	0x2000007c

080093bc <malloc>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <malloc+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f000 bb57 	b.w	8009a74 <_malloc_r>
 80093c6:	bf00      	nop
 80093c8:	20000018 	.word	0x20000018

080093cc <__ascii_mbtowc>:
 80093cc:	b082      	sub	sp, #8
 80093ce:	b901      	cbnz	r1, 80093d2 <__ascii_mbtowc+0x6>
 80093d0:	a901      	add	r1, sp, #4
 80093d2:	b142      	cbz	r2, 80093e6 <__ascii_mbtowc+0x1a>
 80093d4:	b14b      	cbz	r3, 80093ea <__ascii_mbtowc+0x1e>
 80093d6:	7813      	ldrb	r3, [r2, #0]
 80093d8:	600b      	str	r3, [r1, #0]
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	1c10      	adds	r0, r2, #0
 80093de:	bf18      	it	ne
 80093e0:	2001      	movne	r0, #1
 80093e2:	b002      	add	sp, #8
 80093e4:	4770      	bx	lr
 80093e6:	4610      	mov	r0, r2
 80093e8:	e7fb      	b.n	80093e2 <__ascii_mbtowc+0x16>
 80093ea:	f06f 0001 	mvn.w	r0, #1
 80093ee:	e7f8      	b.n	80093e2 <__ascii_mbtowc+0x16>

080093f0 <memcpy>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	1e43      	subs	r3, r0, #1
 80093f4:	440a      	add	r2, r1
 80093f6:	4291      	cmp	r1, r2
 80093f8:	d100      	bne.n	80093fc <memcpy+0xc>
 80093fa:	bd10      	pop	{r4, pc}
 80093fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009404:	e7f7      	b.n	80093f6 <memcpy+0x6>

08009406 <_Balloc>:
 8009406:	b570      	push	{r4, r5, r6, lr}
 8009408:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800940a:	4604      	mov	r4, r0
 800940c:	460e      	mov	r6, r1
 800940e:	b93d      	cbnz	r5, 8009420 <_Balloc+0x1a>
 8009410:	2010      	movs	r0, #16
 8009412:	f7ff ffd3 	bl	80093bc <malloc>
 8009416:	6260      	str	r0, [r4, #36]	; 0x24
 8009418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800941c:	6005      	str	r5, [r0, #0]
 800941e:	60c5      	str	r5, [r0, #12]
 8009420:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009422:	68eb      	ldr	r3, [r5, #12]
 8009424:	b183      	cbz	r3, 8009448 <_Balloc+0x42>
 8009426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800942e:	b9b8      	cbnz	r0, 8009460 <_Balloc+0x5a>
 8009430:	2101      	movs	r1, #1
 8009432:	fa01 f506 	lsl.w	r5, r1, r6
 8009436:	1d6a      	adds	r2, r5, #5
 8009438:	0092      	lsls	r2, r2, #2
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fabe 	bl	80099bc <_calloc_r>
 8009440:	b160      	cbz	r0, 800945c <_Balloc+0x56>
 8009442:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009446:	e00e      	b.n	8009466 <_Balloc+0x60>
 8009448:	2221      	movs	r2, #33	; 0x21
 800944a:	2104      	movs	r1, #4
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fab5 	bl	80099bc <_calloc_r>
 8009452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009454:	60e8      	str	r0, [r5, #12]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e4      	bne.n	8009426 <_Balloc+0x20>
 800945c:	2000      	movs	r0, #0
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	6802      	ldr	r2, [r0, #0]
 8009462:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009466:	2300      	movs	r3, #0
 8009468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800946c:	e7f7      	b.n	800945e <_Balloc+0x58>

0800946e <_Bfree>:
 800946e:	b570      	push	{r4, r5, r6, lr}
 8009470:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009472:	4606      	mov	r6, r0
 8009474:	460d      	mov	r5, r1
 8009476:	b93c      	cbnz	r4, 8009488 <_Bfree+0x1a>
 8009478:	2010      	movs	r0, #16
 800947a:	f7ff ff9f 	bl	80093bc <malloc>
 800947e:	6270      	str	r0, [r6, #36]	; 0x24
 8009480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009484:	6004      	str	r4, [r0, #0]
 8009486:	60c4      	str	r4, [r0, #12]
 8009488:	b13d      	cbz	r5, 800949a <_Bfree+0x2c>
 800948a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800948c:	686a      	ldr	r2, [r5, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009494:	6029      	str	r1, [r5, #0]
 8009496:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800949a:	bd70      	pop	{r4, r5, r6, pc}

0800949c <__multadd>:
 800949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a0:	690d      	ldr	r5, [r1, #16]
 80094a2:	461f      	mov	r7, r3
 80094a4:	4606      	mov	r6, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	f101 0c14 	add.w	ip, r1, #20
 80094ac:	2300      	movs	r3, #0
 80094ae:	f8dc 0000 	ldr.w	r0, [ip]
 80094b2:	b281      	uxth	r1, r0
 80094b4:	fb02 7101 	mla	r1, r2, r1, r7
 80094b8:	0c0f      	lsrs	r7, r1, #16
 80094ba:	0c00      	lsrs	r0, r0, #16
 80094bc:	fb02 7000 	mla	r0, r2, r0, r7
 80094c0:	b289      	uxth	r1, r1
 80094c2:	3301      	adds	r3, #1
 80094c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80094c8:	429d      	cmp	r5, r3
 80094ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80094ce:	f84c 1b04 	str.w	r1, [ip], #4
 80094d2:	dcec      	bgt.n	80094ae <__multadd+0x12>
 80094d4:	b1d7      	cbz	r7, 800950c <__multadd+0x70>
 80094d6:	68a3      	ldr	r3, [r4, #8]
 80094d8:	42ab      	cmp	r3, r5
 80094da:	dc12      	bgt.n	8009502 <__multadd+0x66>
 80094dc:	6861      	ldr	r1, [r4, #4]
 80094de:	4630      	mov	r0, r6
 80094e0:	3101      	adds	r1, #1
 80094e2:	f7ff ff90 	bl	8009406 <_Balloc>
 80094e6:	6922      	ldr	r2, [r4, #16]
 80094e8:	3202      	adds	r2, #2
 80094ea:	f104 010c 	add.w	r1, r4, #12
 80094ee:	4680      	mov	r8, r0
 80094f0:	0092      	lsls	r2, r2, #2
 80094f2:	300c      	adds	r0, #12
 80094f4:	f7ff ff7c 	bl	80093f0 <memcpy>
 80094f8:	4621      	mov	r1, r4
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff ffb7 	bl	800946e <_Bfree>
 8009500:	4644      	mov	r4, r8
 8009502:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009506:	3501      	adds	r5, #1
 8009508:	615f      	str	r7, [r3, #20]
 800950a:	6125      	str	r5, [r4, #16]
 800950c:	4620      	mov	r0, r4
 800950e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009512 <__hi0bits>:
 8009512:	0c02      	lsrs	r2, r0, #16
 8009514:	0412      	lsls	r2, r2, #16
 8009516:	4603      	mov	r3, r0
 8009518:	b9b2      	cbnz	r2, 8009548 <__hi0bits+0x36>
 800951a:	0403      	lsls	r3, r0, #16
 800951c:	2010      	movs	r0, #16
 800951e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009522:	bf04      	itt	eq
 8009524:	021b      	lsleq	r3, r3, #8
 8009526:	3008      	addeq	r0, #8
 8009528:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800952c:	bf04      	itt	eq
 800952e:	011b      	lsleq	r3, r3, #4
 8009530:	3004      	addeq	r0, #4
 8009532:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009536:	bf04      	itt	eq
 8009538:	009b      	lsleq	r3, r3, #2
 800953a:	3002      	addeq	r0, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	db06      	blt.n	800954e <__hi0bits+0x3c>
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	d503      	bpl.n	800954c <__hi0bits+0x3a>
 8009544:	3001      	adds	r0, #1
 8009546:	4770      	bx	lr
 8009548:	2000      	movs	r0, #0
 800954a:	e7e8      	b.n	800951e <__hi0bits+0xc>
 800954c:	2020      	movs	r0, #32
 800954e:	4770      	bx	lr

08009550 <__lo0bits>:
 8009550:	6803      	ldr	r3, [r0, #0]
 8009552:	f013 0207 	ands.w	r2, r3, #7
 8009556:	4601      	mov	r1, r0
 8009558:	d00b      	beq.n	8009572 <__lo0bits+0x22>
 800955a:	07da      	lsls	r2, r3, #31
 800955c:	d423      	bmi.n	80095a6 <__lo0bits+0x56>
 800955e:	0798      	lsls	r0, r3, #30
 8009560:	bf49      	itett	mi
 8009562:	085b      	lsrmi	r3, r3, #1
 8009564:	089b      	lsrpl	r3, r3, #2
 8009566:	2001      	movmi	r0, #1
 8009568:	600b      	strmi	r3, [r1, #0]
 800956a:	bf5c      	itt	pl
 800956c:	600b      	strpl	r3, [r1, #0]
 800956e:	2002      	movpl	r0, #2
 8009570:	4770      	bx	lr
 8009572:	b298      	uxth	r0, r3
 8009574:	b9a8      	cbnz	r0, 80095a2 <__lo0bits+0x52>
 8009576:	0c1b      	lsrs	r3, r3, #16
 8009578:	2010      	movs	r0, #16
 800957a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800957e:	bf04      	itt	eq
 8009580:	0a1b      	lsreq	r3, r3, #8
 8009582:	3008      	addeq	r0, #8
 8009584:	071a      	lsls	r2, r3, #28
 8009586:	bf04      	itt	eq
 8009588:	091b      	lsreq	r3, r3, #4
 800958a:	3004      	addeq	r0, #4
 800958c:	079a      	lsls	r2, r3, #30
 800958e:	bf04      	itt	eq
 8009590:	089b      	lsreq	r3, r3, #2
 8009592:	3002      	addeq	r0, #2
 8009594:	07da      	lsls	r2, r3, #31
 8009596:	d402      	bmi.n	800959e <__lo0bits+0x4e>
 8009598:	085b      	lsrs	r3, r3, #1
 800959a:	d006      	beq.n	80095aa <__lo0bits+0x5a>
 800959c:	3001      	adds	r0, #1
 800959e:	600b      	str	r3, [r1, #0]
 80095a0:	4770      	bx	lr
 80095a2:	4610      	mov	r0, r2
 80095a4:	e7e9      	b.n	800957a <__lo0bits+0x2a>
 80095a6:	2000      	movs	r0, #0
 80095a8:	4770      	bx	lr
 80095aa:	2020      	movs	r0, #32
 80095ac:	4770      	bx	lr

080095ae <__i2b>:
 80095ae:	b510      	push	{r4, lr}
 80095b0:	460c      	mov	r4, r1
 80095b2:	2101      	movs	r1, #1
 80095b4:	f7ff ff27 	bl	8009406 <_Balloc>
 80095b8:	2201      	movs	r2, #1
 80095ba:	6144      	str	r4, [r0, #20]
 80095bc:	6102      	str	r2, [r0, #16]
 80095be:	bd10      	pop	{r4, pc}

080095c0 <__multiply>:
 80095c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	4614      	mov	r4, r2
 80095c6:	690a      	ldr	r2, [r1, #16]
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	bfb8      	it	lt
 80095ce:	460b      	movlt	r3, r1
 80095d0:	4688      	mov	r8, r1
 80095d2:	bfbc      	itt	lt
 80095d4:	46a0      	movlt	r8, r4
 80095d6:	461c      	movlt	r4, r3
 80095d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095e8:	eb07 0609 	add.w	r6, r7, r9
 80095ec:	42b3      	cmp	r3, r6
 80095ee:	bfb8      	it	lt
 80095f0:	3101      	addlt	r1, #1
 80095f2:	f7ff ff08 	bl	8009406 <_Balloc>
 80095f6:	f100 0514 	add.w	r5, r0, #20
 80095fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80095fe:	462b      	mov	r3, r5
 8009600:	2200      	movs	r2, #0
 8009602:	4573      	cmp	r3, lr
 8009604:	d316      	bcc.n	8009634 <__multiply+0x74>
 8009606:	f104 0214 	add.w	r2, r4, #20
 800960a:	f108 0114 	add.w	r1, r8, #20
 800960e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009612:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	9b00      	ldr	r3, [sp, #0]
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	4293      	cmp	r3, r2
 800961e:	d80c      	bhi.n	800963a <__multiply+0x7a>
 8009620:	2e00      	cmp	r6, #0
 8009622:	dd03      	ble.n	800962c <__multiply+0x6c>
 8009624:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009628:	2b00      	cmp	r3, #0
 800962a:	d05d      	beq.n	80096e8 <__multiply+0x128>
 800962c:	6106      	str	r6, [r0, #16]
 800962e:	b003      	add	sp, #12
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	f843 2b04 	str.w	r2, [r3], #4
 8009638:	e7e3      	b.n	8009602 <__multiply+0x42>
 800963a:	f8b2 b000 	ldrh.w	fp, [r2]
 800963e:	f1bb 0f00 	cmp.w	fp, #0
 8009642:	d023      	beq.n	800968c <__multiply+0xcc>
 8009644:	4689      	mov	r9, r1
 8009646:	46ac      	mov	ip, r5
 8009648:	f04f 0800 	mov.w	r8, #0
 800964c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009650:	f8dc a000 	ldr.w	sl, [ip]
 8009654:	b2a3      	uxth	r3, r4
 8009656:	fa1f fa8a 	uxth.w	sl, sl
 800965a:	fb0b a303 	mla	r3, fp, r3, sl
 800965e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009662:	f8dc 4000 	ldr.w	r4, [ip]
 8009666:	4443      	add	r3, r8
 8009668:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800966c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009670:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009674:	46e2      	mov	sl, ip
 8009676:	b29b      	uxth	r3, r3
 8009678:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800967c:	454f      	cmp	r7, r9
 800967e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009682:	f84a 3b04 	str.w	r3, [sl], #4
 8009686:	d82b      	bhi.n	80096e0 <__multiply+0x120>
 8009688:	f8cc 8004 	str.w	r8, [ip, #4]
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009692:	3204      	adds	r2, #4
 8009694:	f1ba 0f00 	cmp.w	sl, #0
 8009698:	d020      	beq.n	80096dc <__multiply+0x11c>
 800969a:	682b      	ldr	r3, [r5, #0]
 800969c:	4689      	mov	r9, r1
 800969e:	46a8      	mov	r8, r5
 80096a0:	f04f 0b00 	mov.w	fp, #0
 80096a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80096a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80096ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80096b0:	445c      	add	r4, fp
 80096b2:	46c4      	mov	ip, r8
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096ba:	f84c 3b04 	str.w	r3, [ip], #4
 80096be:	f859 3b04 	ldr.w	r3, [r9], #4
 80096c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80096c6:	0c1b      	lsrs	r3, r3, #16
 80096c8:	fb0a b303 	mla	r3, sl, r3, fp
 80096cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80096d0:	454f      	cmp	r7, r9
 80096d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80096d6:	d805      	bhi.n	80096e4 <__multiply+0x124>
 80096d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80096dc:	3504      	adds	r5, #4
 80096de:	e79b      	b.n	8009618 <__multiply+0x58>
 80096e0:	46d4      	mov	ip, sl
 80096e2:	e7b3      	b.n	800964c <__multiply+0x8c>
 80096e4:	46e0      	mov	r8, ip
 80096e6:	e7dd      	b.n	80096a4 <__multiply+0xe4>
 80096e8:	3e01      	subs	r6, #1
 80096ea:	e799      	b.n	8009620 <__multiply+0x60>

080096ec <__pow5mult>:
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	4615      	mov	r5, r2
 80096f2:	f012 0203 	ands.w	r2, r2, #3
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	d007      	beq.n	800970c <__pow5mult+0x20>
 80096fc:	3a01      	subs	r2, #1
 80096fe:	4c21      	ldr	r4, [pc, #132]	; (8009784 <__pow5mult+0x98>)
 8009700:	2300      	movs	r3, #0
 8009702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009706:	f7ff fec9 	bl	800949c <__multadd>
 800970a:	4607      	mov	r7, r0
 800970c:	10ad      	asrs	r5, r5, #2
 800970e:	d035      	beq.n	800977c <__pow5mult+0x90>
 8009710:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009712:	b93c      	cbnz	r4, 8009724 <__pow5mult+0x38>
 8009714:	2010      	movs	r0, #16
 8009716:	f7ff fe51 	bl	80093bc <malloc>
 800971a:	6270      	str	r0, [r6, #36]	; 0x24
 800971c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009720:	6004      	str	r4, [r0, #0]
 8009722:	60c4      	str	r4, [r0, #12]
 8009724:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800972c:	b94c      	cbnz	r4, 8009742 <__pow5mult+0x56>
 800972e:	f240 2171 	movw	r1, #625	; 0x271
 8009732:	4630      	mov	r0, r6
 8009734:	f7ff ff3b 	bl	80095ae <__i2b>
 8009738:	2300      	movs	r3, #0
 800973a:	f8c8 0008 	str.w	r0, [r8, #8]
 800973e:	4604      	mov	r4, r0
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	f04f 0800 	mov.w	r8, #0
 8009746:	07eb      	lsls	r3, r5, #31
 8009748:	d50a      	bpl.n	8009760 <__pow5mult+0x74>
 800974a:	4639      	mov	r1, r7
 800974c:	4622      	mov	r2, r4
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ff36 	bl	80095c0 <__multiply>
 8009754:	4639      	mov	r1, r7
 8009756:	4681      	mov	r9, r0
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff fe88 	bl	800946e <_Bfree>
 800975e:	464f      	mov	r7, r9
 8009760:	106d      	asrs	r5, r5, #1
 8009762:	d00b      	beq.n	800977c <__pow5mult+0x90>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	b938      	cbnz	r0, 8009778 <__pow5mult+0x8c>
 8009768:	4622      	mov	r2, r4
 800976a:	4621      	mov	r1, r4
 800976c:	4630      	mov	r0, r6
 800976e:	f7ff ff27 	bl	80095c0 <__multiply>
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	f8c0 8000 	str.w	r8, [r0]
 8009778:	4604      	mov	r4, r0
 800977a:	e7e4      	b.n	8009746 <__pow5mult+0x5a>
 800977c:	4638      	mov	r0, r7
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009782:	bf00      	nop
 8009784:	0800a098 	.word	0x0800a098

08009788 <__lshift>:
 8009788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	460c      	mov	r4, r1
 800978e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	6849      	ldr	r1, [r1, #4]
 8009796:	eb0a 0903 	add.w	r9, sl, r3
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	4607      	mov	r7, r0
 800979e:	4616      	mov	r6, r2
 80097a0:	f109 0501 	add.w	r5, r9, #1
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	db32      	blt.n	800980e <__lshift+0x86>
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff fe2c 	bl	8009406 <_Balloc>
 80097ae:	2300      	movs	r3, #0
 80097b0:	4680      	mov	r8, r0
 80097b2:	f100 0114 	add.w	r1, r0, #20
 80097b6:	461a      	mov	r2, r3
 80097b8:	4553      	cmp	r3, sl
 80097ba:	db2b      	blt.n	8009814 <__lshift+0x8c>
 80097bc:	6920      	ldr	r0, [r4, #16]
 80097be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097c2:	f104 0314 	add.w	r3, r4, #20
 80097c6:	f016 021f 	ands.w	r2, r6, #31
 80097ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097d2:	d025      	beq.n	8009820 <__lshift+0x98>
 80097d4:	f1c2 0e20 	rsb	lr, r2, #32
 80097d8:	2000      	movs	r0, #0
 80097da:	681e      	ldr	r6, [r3, #0]
 80097dc:	468a      	mov	sl, r1
 80097de:	4096      	lsls	r6, r2
 80097e0:	4330      	orrs	r0, r6
 80097e2:	f84a 0b04 	str.w	r0, [sl], #4
 80097e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80097ea:	459c      	cmp	ip, r3
 80097ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80097f0:	d814      	bhi.n	800981c <__lshift+0x94>
 80097f2:	6048      	str	r0, [r1, #4]
 80097f4:	b108      	cbz	r0, 80097fa <__lshift+0x72>
 80097f6:	f109 0502 	add.w	r5, r9, #2
 80097fa:	3d01      	subs	r5, #1
 80097fc:	4638      	mov	r0, r7
 80097fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8009802:	4621      	mov	r1, r4
 8009804:	f7ff fe33 	bl	800946e <_Bfree>
 8009808:	4640      	mov	r0, r8
 800980a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980e:	3101      	adds	r1, #1
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	e7c7      	b.n	80097a4 <__lshift+0x1c>
 8009814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009818:	3301      	adds	r3, #1
 800981a:	e7cd      	b.n	80097b8 <__lshift+0x30>
 800981c:	4651      	mov	r1, sl
 800981e:	e7dc      	b.n	80097da <__lshift+0x52>
 8009820:	3904      	subs	r1, #4
 8009822:	f853 2b04 	ldr.w	r2, [r3], #4
 8009826:	f841 2f04 	str.w	r2, [r1, #4]!
 800982a:	459c      	cmp	ip, r3
 800982c:	d8f9      	bhi.n	8009822 <__lshift+0x9a>
 800982e:	e7e4      	b.n	80097fa <__lshift+0x72>

08009830 <__mcmp>:
 8009830:	6903      	ldr	r3, [r0, #16]
 8009832:	690a      	ldr	r2, [r1, #16]
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	b530      	push	{r4, r5, lr}
 8009838:	d10c      	bne.n	8009854 <__mcmp+0x24>
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	3014      	adds	r0, #20
 800983e:	3114      	adds	r1, #20
 8009840:	1884      	adds	r4, r0, r2
 8009842:	4411      	add	r1, r2
 8009844:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009848:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800984c:	4295      	cmp	r5, r2
 800984e:	d003      	beq.n	8009858 <__mcmp+0x28>
 8009850:	d305      	bcc.n	800985e <__mcmp+0x2e>
 8009852:	2301      	movs	r3, #1
 8009854:	4618      	mov	r0, r3
 8009856:	bd30      	pop	{r4, r5, pc}
 8009858:	42a0      	cmp	r0, r4
 800985a:	d3f3      	bcc.n	8009844 <__mcmp+0x14>
 800985c:	e7fa      	b.n	8009854 <__mcmp+0x24>
 800985e:	f04f 33ff 	mov.w	r3, #4294967295
 8009862:	e7f7      	b.n	8009854 <__mcmp+0x24>

08009864 <__mdiff>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	460d      	mov	r5, r1
 800986a:	4607      	mov	r7, r0
 800986c:	4611      	mov	r1, r2
 800986e:	4628      	mov	r0, r5
 8009870:	4614      	mov	r4, r2
 8009872:	f7ff ffdd 	bl	8009830 <__mcmp>
 8009876:	1e06      	subs	r6, r0, #0
 8009878:	d108      	bne.n	800988c <__mdiff+0x28>
 800987a:	4631      	mov	r1, r6
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff fdc2 	bl	8009406 <_Balloc>
 8009882:	2301      	movs	r3, #1
 8009884:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	bfa4      	itt	ge
 800988e:	4623      	movge	r3, r4
 8009890:	462c      	movge	r4, r5
 8009892:	4638      	mov	r0, r7
 8009894:	6861      	ldr	r1, [r4, #4]
 8009896:	bfa6      	itte	ge
 8009898:	461d      	movge	r5, r3
 800989a:	2600      	movge	r6, #0
 800989c:	2601      	movlt	r6, #1
 800989e:	f7ff fdb2 	bl	8009406 <_Balloc>
 80098a2:	692b      	ldr	r3, [r5, #16]
 80098a4:	60c6      	str	r6, [r0, #12]
 80098a6:	6926      	ldr	r6, [r4, #16]
 80098a8:	f105 0914 	add.w	r9, r5, #20
 80098ac:	f104 0214 	add.w	r2, r4, #20
 80098b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80098b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80098b8:	f100 0514 	add.w	r5, r0, #20
 80098bc:	f04f 0e00 	mov.w	lr, #0
 80098c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80098c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80098c8:	fa1e f18a 	uxtah	r1, lr, sl
 80098cc:	b2a3      	uxth	r3, r4
 80098ce:	1ac9      	subs	r1, r1, r3
 80098d0:	0c23      	lsrs	r3, r4, #16
 80098d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80098d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80098da:	b289      	uxth	r1, r1
 80098dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80098e0:	45c8      	cmp	r8, r9
 80098e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80098e6:	4694      	mov	ip, r2
 80098e8:	f845 3b04 	str.w	r3, [r5], #4
 80098ec:	d8e8      	bhi.n	80098c0 <__mdiff+0x5c>
 80098ee:	45bc      	cmp	ip, r7
 80098f0:	d304      	bcc.n	80098fc <__mdiff+0x98>
 80098f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80098f6:	b183      	cbz	r3, 800991a <__mdiff+0xb6>
 80098f8:	6106      	str	r6, [r0, #16]
 80098fa:	e7c5      	b.n	8009888 <__mdiff+0x24>
 80098fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009900:	fa1e f381 	uxtah	r3, lr, r1
 8009904:	141a      	asrs	r2, r3, #16
 8009906:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800990a:	b29b      	uxth	r3, r3
 800990c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009910:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009914:	f845 3b04 	str.w	r3, [r5], #4
 8009918:	e7e9      	b.n	80098ee <__mdiff+0x8a>
 800991a:	3e01      	subs	r6, #1
 800991c:	e7e9      	b.n	80098f2 <__mdiff+0x8e>

0800991e <__d2b>:
 800991e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009922:	460e      	mov	r6, r1
 8009924:	2101      	movs	r1, #1
 8009926:	ec59 8b10 	vmov	r8, r9, d0
 800992a:	4615      	mov	r5, r2
 800992c:	f7ff fd6b 	bl	8009406 <_Balloc>
 8009930:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009934:	4607      	mov	r7, r0
 8009936:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800993a:	bb34      	cbnz	r4, 800998a <__d2b+0x6c>
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	f1b8 0300 	subs.w	r3, r8, #0
 8009942:	d027      	beq.n	8009994 <__d2b+0x76>
 8009944:	a802      	add	r0, sp, #8
 8009946:	f840 3d08 	str.w	r3, [r0, #-8]!
 800994a:	f7ff fe01 	bl	8009550 <__lo0bits>
 800994e:	9900      	ldr	r1, [sp, #0]
 8009950:	b1f0      	cbz	r0, 8009990 <__d2b+0x72>
 8009952:	9a01      	ldr	r2, [sp, #4]
 8009954:	f1c0 0320 	rsb	r3, r0, #32
 8009958:	fa02 f303 	lsl.w	r3, r2, r3
 800995c:	430b      	orrs	r3, r1
 800995e:	40c2      	lsrs	r2, r0
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	9201      	str	r2, [sp, #4]
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	61bb      	str	r3, [r7, #24]
 8009968:	2b00      	cmp	r3, #0
 800996a:	bf14      	ite	ne
 800996c:	2102      	movne	r1, #2
 800996e:	2101      	moveq	r1, #1
 8009970:	6139      	str	r1, [r7, #16]
 8009972:	b1c4      	cbz	r4, 80099a6 <__d2b+0x88>
 8009974:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009978:	4404      	add	r4, r0
 800997a:	6034      	str	r4, [r6, #0]
 800997c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009980:	6028      	str	r0, [r5, #0]
 8009982:	4638      	mov	r0, r7
 8009984:	b003      	add	sp, #12
 8009986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800998a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800998e:	e7d5      	b.n	800993c <__d2b+0x1e>
 8009990:	6179      	str	r1, [r7, #20]
 8009992:	e7e7      	b.n	8009964 <__d2b+0x46>
 8009994:	a801      	add	r0, sp, #4
 8009996:	f7ff fddb 	bl	8009550 <__lo0bits>
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	2101      	movs	r1, #1
 80099a0:	6139      	str	r1, [r7, #16]
 80099a2:	3020      	adds	r0, #32
 80099a4:	e7e5      	b.n	8009972 <__d2b+0x54>
 80099a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099ae:	6030      	str	r0, [r6, #0]
 80099b0:	6918      	ldr	r0, [r3, #16]
 80099b2:	f7ff fdae 	bl	8009512 <__hi0bits>
 80099b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099ba:	e7e1      	b.n	8009980 <__d2b+0x62>

080099bc <_calloc_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	fb02 f401 	mul.w	r4, r2, r1
 80099c2:	4621      	mov	r1, r4
 80099c4:	f000 f856 	bl	8009a74 <_malloc_r>
 80099c8:	4605      	mov	r5, r0
 80099ca:	b118      	cbz	r0, 80099d4 <_calloc_r+0x18>
 80099cc:	4622      	mov	r2, r4
 80099ce:	2100      	movs	r1, #0
 80099d0:	f7fe f986 	bl	8007ce0 <memset>
 80099d4:	4628      	mov	r0, r5
 80099d6:	bd38      	pop	{r3, r4, r5, pc}

080099d8 <_free_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4605      	mov	r5, r0
 80099dc:	2900      	cmp	r1, #0
 80099de:	d045      	beq.n	8009a6c <_free_r+0x94>
 80099e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e4:	1f0c      	subs	r4, r1, #4
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bfb8      	it	lt
 80099ea:	18e4      	addlt	r4, r4, r3
 80099ec:	f000 fa24 	bl	8009e38 <__malloc_lock>
 80099f0:	4a1f      	ldr	r2, [pc, #124]	; (8009a70 <_free_r+0x98>)
 80099f2:	6813      	ldr	r3, [r2, #0]
 80099f4:	4610      	mov	r0, r2
 80099f6:	b933      	cbnz	r3, 8009a06 <_free_r+0x2e>
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	6014      	str	r4, [r2, #0]
 80099fc:	4628      	mov	r0, r5
 80099fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a02:	f000 ba1a 	b.w	8009e3a <__malloc_unlock>
 8009a06:	42a3      	cmp	r3, r4
 8009a08:	d90c      	bls.n	8009a24 <_free_r+0x4c>
 8009a0a:	6821      	ldr	r1, [r4, #0]
 8009a0c:	1862      	adds	r2, r4, r1
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	bf04      	itt	eq
 8009a12:	681a      	ldreq	r2, [r3, #0]
 8009a14:	685b      	ldreq	r3, [r3, #4]
 8009a16:	6063      	str	r3, [r4, #4]
 8009a18:	bf04      	itt	eq
 8009a1a:	1852      	addeq	r2, r2, r1
 8009a1c:	6022      	streq	r2, [r4, #0]
 8009a1e:	6004      	str	r4, [r0, #0]
 8009a20:	e7ec      	b.n	80099fc <_free_r+0x24>
 8009a22:	4613      	mov	r3, r2
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	b10a      	cbz	r2, 8009a2c <_free_r+0x54>
 8009a28:	42a2      	cmp	r2, r4
 8009a2a:	d9fa      	bls.n	8009a22 <_free_r+0x4a>
 8009a2c:	6819      	ldr	r1, [r3, #0]
 8009a2e:	1858      	adds	r0, r3, r1
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d10b      	bne.n	8009a4c <_free_r+0x74>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	4401      	add	r1, r0
 8009a38:	1858      	adds	r0, r3, r1
 8009a3a:	4282      	cmp	r2, r0
 8009a3c:	6019      	str	r1, [r3, #0]
 8009a3e:	d1dd      	bne.n	80099fc <_free_r+0x24>
 8009a40:	6810      	ldr	r0, [r2, #0]
 8009a42:	6852      	ldr	r2, [r2, #4]
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	4401      	add	r1, r0
 8009a48:	6019      	str	r1, [r3, #0]
 8009a4a:	e7d7      	b.n	80099fc <_free_r+0x24>
 8009a4c:	d902      	bls.n	8009a54 <_free_r+0x7c>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	602b      	str	r3, [r5, #0]
 8009a52:	e7d3      	b.n	80099fc <_free_r+0x24>
 8009a54:	6820      	ldr	r0, [r4, #0]
 8009a56:	1821      	adds	r1, r4, r0
 8009a58:	428a      	cmp	r2, r1
 8009a5a:	bf04      	itt	eq
 8009a5c:	6811      	ldreq	r1, [r2, #0]
 8009a5e:	6852      	ldreq	r2, [r2, #4]
 8009a60:	6062      	str	r2, [r4, #4]
 8009a62:	bf04      	itt	eq
 8009a64:	1809      	addeq	r1, r1, r0
 8009a66:	6021      	streq	r1, [r4, #0]
 8009a68:	605c      	str	r4, [r3, #4]
 8009a6a:	e7c7      	b.n	80099fc <_free_r+0x24>
 8009a6c:	bd38      	pop	{r3, r4, r5, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000228 	.word	0x20000228

08009a74 <_malloc_r>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	1ccd      	adds	r5, r1, #3
 8009a78:	f025 0503 	bic.w	r5, r5, #3
 8009a7c:	3508      	adds	r5, #8
 8009a7e:	2d0c      	cmp	r5, #12
 8009a80:	bf38      	it	cc
 8009a82:	250c      	movcc	r5, #12
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	4606      	mov	r6, r0
 8009a88:	db01      	blt.n	8009a8e <_malloc_r+0x1a>
 8009a8a:	42a9      	cmp	r1, r5
 8009a8c:	d903      	bls.n	8009a96 <_malloc_r+0x22>
 8009a8e:	230c      	movs	r3, #12
 8009a90:	6033      	str	r3, [r6, #0]
 8009a92:	2000      	movs	r0, #0
 8009a94:	bd70      	pop	{r4, r5, r6, pc}
 8009a96:	f000 f9cf 	bl	8009e38 <__malloc_lock>
 8009a9a:	4a21      	ldr	r2, [pc, #132]	; (8009b20 <_malloc_r+0xac>)
 8009a9c:	6814      	ldr	r4, [r2, #0]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	b991      	cbnz	r1, 8009ac8 <_malloc_r+0x54>
 8009aa2:	4c20      	ldr	r4, [pc, #128]	; (8009b24 <_malloc_r+0xb0>)
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	b91b      	cbnz	r3, 8009ab0 <_malloc_r+0x3c>
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 f98f 	bl	8009dcc <_sbrk_r>
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 f98a 	bl	8009dcc <_sbrk_r>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d124      	bne.n	8009b06 <_malloc_r+0x92>
 8009abc:	230c      	movs	r3, #12
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f9ba 	bl	8009e3a <__malloc_unlock>
 8009ac6:	e7e4      	b.n	8009a92 <_malloc_r+0x1e>
 8009ac8:	680b      	ldr	r3, [r1, #0]
 8009aca:	1b5b      	subs	r3, r3, r5
 8009acc:	d418      	bmi.n	8009b00 <_malloc_r+0x8c>
 8009ace:	2b0b      	cmp	r3, #11
 8009ad0:	d90f      	bls.n	8009af2 <_malloc_r+0x7e>
 8009ad2:	600b      	str	r3, [r1, #0]
 8009ad4:	50cd      	str	r5, [r1, r3]
 8009ad6:	18cc      	adds	r4, r1, r3
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 f9ae 	bl	8009e3a <__malloc_unlock>
 8009ade:	f104 000b 	add.w	r0, r4, #11
 8009ae2:	1d23      	adds	r3, r4, #4
 8009ae4:	f020 0007 	bic.w	r0, r0, #7
 8009ae8:	1ac3      	subs	r3, r0, r3
 8009aea:	d0d3      	beq.n	8009a94 <_malloc_r+0x20>
 8009aec:	425a      	negs	r2, r3
 8009aee:	50e2      	str	r2, [r4, r3]
 8009af0:	e7d0      	b.n	8009a94 <_malloc_r+0x20>
 8009af2:	428c      	cmp	r4, r1
 8009af4:	684b      	ldr	r3, [r1, #4]
 8009af6:	bf16      	itet	ne
 8009af8:	6063      	strne	r3, [r4, #4]
 8009afa:	6013      	streq	r3, [r2, #0]
 8009afc:	460c      	movne	r4, r1
 8009afe:	e7eb      	b.n	8009ad8 <_malloc_r+0x64>
 8009b00:	460c      	mov	r4, r1
 8009b02:	6849      	ldr	r1, [r1, #4]
 8009b04:	e7cc      	b.n	8009aa0 <_malloc_r+0x2c>
 8009b06:	1cc4      	adds	r4, r0, #3
 8009b08:	f024 0403 	bic.w	r4, r4, #3
 8009b0c:	42a0      	cmp	r0, r4
 8009b0e:	d005      	beq.n	8009b1c <_malloc_r+0xa8>
 8009b10:	1a21      	subs	r1, r4, r0
 8009b12:	4630      	mov	r0, r6
 8009b14:	f000 f95a 	bl	8009dcc <_sbrk_r>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d0cf      	beq.n	8009abc <_malloc_r+0x48>
 8009b1c:	6025      	str	r5, [r4, #0]
 8009b1e:	e7db      	b.n	8009ad8 <_malloc_r+0x64>
 8009b20:	20000228 	.word	0x20000228
 8009b24:	2000022c 	.word	0x2000022c

08009b28 <__ssputs_r>:
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	688e      	ldr	r6, [r1, #8]
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	4682      	mov	sl, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	4690      	mov	r8, r2
 8009b36:	4699      	mov	r9, r3
 8009b38:	d837      	bhi.n	8009baa <__ssputs_r+0x82>
 8009b3a:	898a      	ldrh	r2, [r1, #12]
 8009b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b40:	d031      	beq.n	8009ba6 <__ssputs_r+0x7e>
 8009b42:	6825      	ldr	r5, [r4, #0]
 8009b44:	6909      	ldr	r1, [r1, #16]
 8009b46:	1a6f      	subs	r7, r5, r1
 8009b48:	6965      	ldr	r5, [r4, #20]
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b50:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b54:	f109 0301 	add.w	r3, r9, #1
 8009b58:	443b      	add	r3, r7
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	bf38      	it	cc
 8009b5e:	461d      	movcc	r5, r3
 8009b60:	0553      	lsls	r3, r2, #21
 8009b62:	d530      	bpl.n	8009bc6 <__ssputs_r+0x9e>
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7ff ff85 	bl	8009a74 <_malloc_r>
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	b950      	cbnz	r0, 8009b84 <__ssputs_r+0x5c>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	f8ca 3000 	str.w	r3, [sl]
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	463a      	mov	r2, r7
 8009b86:	6921      	ldr	r1, [r4, #16]
 8009b88:	f7ff fc32 	bl	80093f0 <memcpy>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	6126      	str	r6, [r4, #16]
 8009b9a:	6165      	str	r5, [r4, #20]
 8009b9c:	443e      	add	r6, r7
 8009b9e:	1bed      	subs	r5, r5, r7
 8009ba0:	6026      	str	r6, [r4, #0]
 8009ba2:	60a5      	str	r5, [r4, #8]
 8009ba4:	464e      	mov	r6, r9
 8009ba6:	454e      	cmp	r6, r9
 8009ba8:	d900      	bls.n	8009bac <__ssputs_r+0x84>
 8009baa:	464e      	mov	r6, r9
 8009bac:	4632      	mov	r2, r6
 8009bae:	4641      	mov	r1, r8
 8009bb0:	6820      	ldr	r0, [r4, #0]
 8009bb2:	f000 f928 	bl	8009e06 <memmove>
 8009bb6:	68a3      	ldr	r3, [r4, #8]
 8009bb8:	1b9b      	subs	r3, r3, r6
 8009bba:	60a3      	str	r3, [r4, #8]
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	441e      	add	r6, r3
 8009bc0:	6026      	str	r6, [r4, #0]
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	e7dc      	b.n	8009b80 <__ssputs_r+0x58>
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	f000 f938 	bl	8009e3c <_realloc_r>
 8009bcc:	4606      	mov	r6, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d1e2      	bne.n	8009b98 <__ssputs_r+0x70>
 8009bd2:	6921      	ldr	r1, [r4, #16]
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	f7ff feff 	bl	80099d8 <_free_r>
 8009bda:	e7c8      	b.n	8009b6e <__ssputs_r+0x46>

08009bdc <_svfiprintf_r>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	461d      	mov	r5, r3
 8009be2:	898b      	ldrh	r3, [r1, #12]
 8009be4:	061f      	lsls	r7, r3, #24
 8009be6:	b09d      	sub	sp, #116	; 0x74
 8009be8:	4680      	mov	r8, r0
 8009bea:	460c      	mov	r4, r1
 8009bec:	4616      	mov	r6, r2
 8009bee:	d50f      	bpl.n	8009c10 <_svfiprintf_r+0x34>
 8009bf0:	690b      	ldr	r3, [r1, #16]
 8009bf2:	b96b      	cbnz	r3, 8009c10 <_svfiprintf_r+0x34>
 8009bf4:	2140      	movs	r1, #64	; 0x40
 8009bf6:	f7ff ff3d 	bl	8009a74 <_malloc_r>
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	6120      	str	r0, [r4, #16]
 8009bfe:	b928      	cbnz	r0, 8009c0c <_svfiprintf_r+0x30>
 8009c00:	230c      	movs	r3, #12
 8009c02:	f8c8 3000 	str.w	r3, [r8]
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0a:	e0c8      	b.n	8009d9e <_svfiprintf_r+0x1c2>
 8009c0c:	2340      	movs	r3, #64	; 0x40
 8009c0e:	6163      	str	r3, [r4, #20]
 8009c10:	2300      	movs	r3, #0
 8009c12:	9309      	str	r3, [sp, #36]	; 0x24
 8009c14:	2320      	movs	r3, #32
 8009c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c1a:	2330      	movs	r3, #48	; 0x30
 8009c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c20:	9503      	str	r5, [sp, #12]
 8009c22:	f04f 0b01 	mov.w	fp, #1
 8009c26:	4637      	mov	r7, r6
 8009c28:	463d      	mov	r5, r7
 8009c2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c2e:	b10b      	cbz	r3, 8009c34 <_svfiprintf_r+0x58>
 8009c30:	2b25      	cmp	r3, #37	; 0x25
 8009c32:	d13e      	bne.n	8009cb2 <_svfiprintf_r+0xd6>
 8009c34:	ebb7 0a06 	subs.w	sl, r7, r6
 8009c38:	d00b      	beq.n	8009c52 <_svfiprintf_r+0x76>
 8009c3a:	4653      	mov	r3, sl
 8009c3c:	4632      	mov	r2, r6
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4640      	mov	r0, r8
 8009c42:	f7ff ff71 	bl	8009b28 <__ssputs_r>
 8009c46:	3001      	adds	r0, #1
 8009c48:	f000 80a4 	beq.w	8009d94 <_svfiprintf_r+0x1b8>
 8009c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c4e:	4453      	add	r3, sl
 8009c50:	9309      	str	r3, [sp, #36]	; 0x24
 8009c52:	783b      	ldrb	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 809d 	beq.w	8009d94 <_svfiprintf_r+0x1b8>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	9307      	str	r3, [sp, #28]
 8009c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c6e:	462f      	mov	r7, r5
 8009c70:	2205      	movs	r2, #5
 8009c72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c76:	4850      	ldr	r0, [pc, #320]	; (8009db8 <_svfiprintf_r+0x1dc>)
 8009c78:	f7f6 fad2 	bl	8000220 <memchr>
 8009c7c:	9b04      	ldr	r3, [sp, #16]
 8009c7e:	b9d0      	cbnz	r0, 8009cb6 <_svfiprintf_r+0xda>
 8009c80:	06d9      	lsls	r1, r3, #27
 8009c82:	bf44      	itt	mi
 8009c84:	2220      	movmi	r2, #32
 8009c86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c8a:	071a      	lsls	r2, r3, #28
 8009c8c:	bf44      	itt	mi
 8009c8e:	222b      	movmi	r2, #43	; 0x2b
 8009c90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c94:	782a      	ldrb	r2, [r5, #0]
 8009c96:	2a2a      	cmp	r2, #42	; 0x2a
 8009c98:	d015      	beq.n	8009cc6 <_svfiprintf_r+0xea>
 8009c9a:	9a07      	ldr	r2, [sp, #28]
 8009c9c:	462f      	mov	r7, r5
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	250a      	movs	r5, #10
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca8:	3b30      	subs	r3, #48	; 0x30
 8009caa:	2b09      	cmp	r3, #9
 8009cac:	d94d      	bls.n	8009d4a <_svfiprintf_r+0x16e>
 8009cae:	b1b8      	cbz	r0, 8009ce0 <_svfiprintf_r+0x104>
 8009cb0:	e00f      	b.n	8009cd2 <_svfiprintf_r+0xf6>
 8009cb2:	462f      	mov	r7, r5
 8009cb4:	e7b8      	b.n	8009c28 <_svfiprintf_r+0x4c>
 8009cb6:	4a40      	ldr	r2, [pc, #256]	; (8009db8 <_svfiprintf_r+0x1dc>)
 8009cb8:	1a80      	subs	r0, r0, r2
 8009cba:	fa0b f000 	lsl.w	r0, fp, r0
 8009cbe:	4318      	orrs	r0, r3
 8009cc0:	9004      	str	r0, [sp, #16]
 8009cc2:	463d      	mov	r5, r7
 8009cc4:	e7d3      	b.n	8009c6e <_svfiprintf_r+0x92>
 8009cc6:	9a03      	ldr	r2, [sp, #12]
 8009cc8:	1d11      	adds	r1, r2, #4
 8009cca:	6812      	ldr	r2, [r2, #0]
 8009ccc:	9103      	str	r1, [sp, #12]
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	db01      	blt.n	8009cd6 <_svfiprintf_r+0xfa>
 8009cd2:	9207      	str	r2, [sp, #28]
 8009cd4:	e004      	b.n	8009ce0 <_svfiprintf_r+0x104>
 8009cd6:	4252      	negs	r2, r2
 8009cd8:	f043 0302 	orr.w	r3, r3, #2
 8009cdc:	9207      	str	r2, [sp, #28]
 8009cde:	9304      	str	r3, [sp, #16]
 8009ce0:	783b      	ldrb	r3, [r7, #0]
 8009ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce4:	d10c      	bne.n	8009d00 <_svfiprintf_r+0x124>
 8009ce6:	787b      	ldrb	r3, [r7, #1]
 8009ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cea:	d133      	bne.n	8009d54 <_svfiprintf_r+0x178>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	1d1a      	adds	r2, r3, #4
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	9203      	str	r2, [sp, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfb8      	it	lt
 8009cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cfc:	3702      	adds	r7, #2
 8009cfe:	9305      	str	r3, [sp, #20]
 8009d00:	4d2e      	ldr	r5, [pc, #184]	; (8009dbc <_svfiprintf_r+0x1e0>)
 8009d02:	7839      	ldrb	r1, [r7, #0]
 8009d04:	2203      	movs	r2, #3
 8009d06:	4628      	mov	r0, r5
 8009d08:	f7f6 fa8a 	bl	8000220 <memchr>
 8009d0c:	b138      	cbz	r0, 8009d1e <_svfiprintf_r+0x142>
 8009d0e:	2340      	movs	r3, #64	; 0x40
 8009d10:	1b40      	subs	r0, r0, r5
 8009d12:	fa03 f000 	lsl.w	r0, r3, r0
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	4303      	orrs	r3, r0
 8009d1a:	3701      	adds	r7, #1
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	7839      	ldrb	r1, [r7, #0]
 8009d20:	4827      	ldr	r0, [pc, #156]	; (8009dc0 <_svfiprintf_r+0x1e4>)
 8009d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d26:	2206      	movs	r2, #6
 8009d28:	1c7e      	adds	r6, r7, #1
 8009d2a:	f7f6 fa79 	bl	8000220 <memchr>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d038      	beq.n	8009da4 <_svfiprintf_r+0x1c8>
 8009d32:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <_svfiprintf_r+0x1e8>)
 8009d34:	bb13      	cbnz	r3, 8009d7c <_svfiprintf_r+0x1a0>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	3307      	adds	r3, #7
 8009d3a:	f023 0307 	bic.w	r3, r3, #7
 8009d3e:	3308      	adds	r3, #8
 8009d40:	9303      	str	r3, [sp, #12]
 8009d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d44:	444b      	add	r3, r9
 8009d46:	9309      	str	r3, [sp, #36]	; 0x24
 8009d48:	e76d      	b.n	8009c26 <_svfiprintf_r+0x4a>
 8009d4a:	fb05 3202 	mla	r2, r5, r2, r3
 8009d4e:	2001      	movs	r0, #1
 8009d50:	460f      	mov	r7, r1
 8009d52:	e7a6      	b.n	8009ca2 <_svfiprintf_r+0xc6>
 8009d54:	2300      	movs	r3, #0
 8009d56:	3701      	adds	r7, #1
 8009d58:	9305      	str	r3, [sp, #20]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	250a      	movs	r5, #10
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d64:	3a30      	subs	r2, #48	; 0x30
 8009d66:	2a09      	cmp	r2, #9
 8009d68:	d903      	bls.n	8009d72 <_svfiprintf_r+0x196>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0c8      	beq.n	8009d00 <_svfiprintf_r+0x124>
 8009d6e:	9105      	str	r1, [sp, #20]
 8009d70:	e7c6      	b.n	8009d00 <_svfiprintf_r+0x124>
 8009d72:	fb05 2101 	mla	r1, r5, r1, r2
 8009d76:	2301      	movs	r3, #1
 8009d78:	4607      	mov	r7, r0
 8009d7a:	e7f0      	b.n	8009d5e <_svfiprintf_r+0x182>
 8009d7c:	ab03      	add	r3, sp, #12
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4622      	mov	r2, r4
 8009d82:	4b11      	ldr	r3, [pc, #68]	; (8009dc8 <_svfiprintf_r+0x1ec>)
 8009d84:	a904      	add	r1, sp, #16
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7fe f846 	bl	8007e18 <_printf_float>
 8009d8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d90:	4681      	mov	r9, r0
 8009d92:	d1d6      	bne.n	8009d42 <_svfiprintf_r+0x166>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	065b      	lsls	r3, r3, #25
 8009d98:	f53f af35 	bmi.w	8009c06 <_svfiprintf_r+0x2a>
 8009d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d9e:	b01d      	add	sp, #116	; 0x74
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	4622      	mov	r2, r4
 8009daa:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <_svfiprintf_r+0x1ec>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4640      	mov	r0, r8
 8009db0:	f7fe fae8 	bl	8008384 <_printf_i>
 8009db4:	e7ea      	b.n	8009d8c <_svfiprintf_r+0x1b0>
 8009db6:	bf00      	nop
 8009db8:	0800a0a4 	.word	0x0800a0a4
 8009dbc:	0800a0aa 	.word	0x0800a0aa
 8009dc0:	0800a0ae 	.word	0x0800a0ae
 8009dc4:	08007e19 	.word	0x08007e19
 8009dc8:	08009b29 	.word	0x08009b29

08009dcc <_sbrk_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4c06      	ldr	r4, [pc, #24]	; (8009de8 <_sbrk_r+0x1c>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	6023      	str	r3, [r4, #0]
 8009dd8:	f7fd fc92 	bl	8007700 <_sbrk>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_sbrk_r+0x1a>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_sbrk_r+0x1a>
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	2000048c 	.word	0x2000048c

08009dec <__ascii_wctomb>:
 8009dec:	b149      	cbz	r1, 8009e02 <__ascii_wctomb+0x16>
 8009dee:	2aff      	cmp	r2, #255	; 0xff
 8009df0:	bf85      	ittet	hi
 8009df2:	238a      	movhi	r3, #138	; 0x8a
 8009df4:	6003      	strhi	r3, [r0, #0]
 8009df6:	700a      	strbls	r2, [r1, #0]
 8009df8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009dfc:	bf98      	it	ls
 8009dfe:	2001      	movls	r0, #1
 8009e00:	4770      	bx	lr
 8009e02:	4608      	mov	r0, r1
 8009e04:	4770      	bx	lr

08009e06 <memmove>:
 8009e06:	4288      	cmp	r0, r1
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	eb01 0302 	add.w	r3, r1, r2
 8009e0e:	d807      	bhi.n	8009e20 <memmove+0x1a>
 8009e10:	1e42      	subs	r2, r0, #1
 8009e12:	4299      	cmp	r1, r3
 8009e14:	d00a      	beq.n	8009e2c <memmove+0x26>
 8009e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e1e:	e7f8      	b.n	8009e12 <memmove+0xc>
 8009e20:	4283      	cmp	r3, r0
 8009e22:	d9f5      	bls.n	8009e10 <memmove+0xa>
 8009e24:	1881      	adds	r1, r0, r2
 8009e26:	1ad2      	subs	r2, r2, r3
 8009e28:	42d3      	cmn	r3, r2
 8009e2a:	d100      	bne.n	8009e2e <memmove+0x28>
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e36:	e7f7      	b.n	8009e28 <memmove+0x22>

08009e38 <__malloc_lock>:
 8009e38:	4770      	bx	lr

08009e3a <__malloc_unlock>:
 8009e3a:	4770      	bx	lr

08009e3c <_realloc_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	4607      	mov	r7, r0
 8009e40:	4614      	mov	r4, r2
 8009e42:	460e      	mov	r6, r1
 8009e44:	b921      	cbnz	r1, 8009e50 <_realloc_r+0x14>
 8009e46:	4611      	mov	r1, r2
 8009e48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e4c:	f7ff be12 	b.w	8009a74 <_malloc_r>
 8009e50:	b922      	cbnz	r2, 8009e5c <_realloc_r+0x20>
 8009e52:	f7ff fdc1 	bl	80099d8 <_free_r>
 8009e56:	4625      	mov	r5, r4
 8009e58:	4628      	mov	r0, r5
 8009e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5c:	f000 f814 	bl	8009e88 <_malloc_usable_size_r>
 8009e60:	42a0      	cmp	r0, r4
 8009e62:	d20f      	bcs.n	8009e84 <_realloc_r+0x48>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff fe04 	bl	8009a74 <_malloc_r>
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d0f2      	beq.n	8009e58 <_realloc_r+0x1c>
 8009e72:	4631      	mov	r1, r6
 8009e74:	4622      	mov	r2, r4
 8009e76:	f7ff fabb 	bl	80093f0 <memcpy>
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f7ff fdab 	bl	80099d8 <_free_r>
 8009e82:	e7e9      	b.n	8009e58 <_realloc_r+0x1c>
 8009e84:	4635      	mov	r5, r6
 8009e86:	e7e7      	b.n	8009e58 <_realloc_r+0x1c>

08009e88 <_malloc_usable_size_r>:
 8009e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8c:	1f18      	subs	r0, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bfbc      	itt	lt
 8009e92:	580b      	ldrlt	r3, [r1, r0]
 8009e94:	18c0      	addlt	r0, r0, r3
 8009e96:	4770      	bx	lr

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
